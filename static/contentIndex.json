{"Build-a-Successful-Student-Club":{"title":"Build a Successful Student Club","links":[],"tags":[],"content":"\nmake a mission statement\ncreate a plan for where we‚Äôre going\n\nAttracting and Retaining Members ¬ß\n\nOpen doors\nBe welcoming to all students who are interested in your club\nOffer perks\nHave attractive perks such as food, exclusive events, and leadership roles to encourage people to join.\nKeep members engaged\nOrganise regular meetings, activities and events to keep members engaged and invested in the club\n\nFormalise a lunchtime ‚Äúcome chat about programming‚Äù.\nCreate leadership positions\n\nHold a brainstorming season to gather new ideas and explore new possibilities\nPoll members and ask them what they think and what they want in the club\nHost guest speakers: bring in guest speakers to share their experiences and insights and provide fresh perspectives to your club\n\nMake posters for CGSP\nActivities ¬ß\n\nHave a workshop\nHost like a game (even a video game) tournament, make it engaging\nIntegral Bee competition for Maths Club, could even be a fake trophy lol\nInvite someone who‚Äôs an expert in the field\nCollect those emails\n"},"To-Do":{"title":"To-Do","links":[],"tags":[],"content":"group by status.type\ngroup by function task.tags\nshort mode"},"index":{"title":"üè† Home","links":["notes/School-Subjects/School-Subjects","notes/University-Applications/University-Applications","notes/School-Subjects/English-Language/English-Language","notes/School-Subjects/Literature/Literature","notes/School-Subjects/Physics/Physics","notes/School-Subjects/Algorithmics/Algorithmics","notes/School-Subjects/Specialist-Maths/Specialist-Maths"],"tags":[],"content":"Hi! Welcome to my notes :)\nCurrently you can explore my School Subjects or University Applications.\n\n\n                  \n                  School Subjects \n                  \n                \nCurrently I‚Äôm doing English Language, Literature, Physics, Algorithmics, Specialist Maths and Maths Methods for VCE!\n"},"notes/Daily-Notes/Fri-October-27th-2023":{"title":"Fri October 27th 2023","links":[],"tags":[],"content":"Problem with Kahoot:\n\n\nIf you are in a university with own server and computer, limitation is internet, there would be times there will be lag, and that lag would create a difference in how fast a person would respond\n\n\nLocal LAN version without using the internet at all\n\n\nWLAN router is accessible\n\n\nwireless bluetooth devices, wireless lan, seperate ip\n\n\nwireless lan device\n\n"},"notes/Daily-Notes/Mon-August-14th-2023":{"title":"Mon August 14th 2023","links":[],"tags":[],"content":"\nUniform - scenario question: you are on the committee, and you have a job to encourage more students to wear their uniform with pride. How could you do this?\n\n\nI think the school uniform looks wonderful, and with the new uniform being able to mix and match makes it much more convenient, which increases school pride\nI think allowing for variation was key and I can see the benefit around me\nCould possibly allow and maybe even encourage accessories that adhere to the school environment and vision to let students get creative. Could make a fashion show day where people get creative!\nAwards and embroideries are good, could move to make these cheaper as achievements\nEnsure that the dress code is fair and that everyone knows about it\n\n\n\nWhat is your best leadership characteristic and why?\n\nBest trait is curiosity and love of learning\nI always love learning new things, whether that be other people‚Äôs approaches to problems or skills that benefit the team\nUseful for being open to new ideas and being pushed out of my comfort zone\n\n\n\nWhat‚Äôs a time and example that you have displayed service to someone or something?\n\n\nA time where you‚Äôve had to make a decision that you knew you would affect others, but you also knew was right.\n\n\nA time that you have stood up for something that you believe in.\n\n"},"notes/Daily-Notes/Mon-December-25th-2023":{"title":"Mon December 25th 2023","links":[],"tags":[],"content":"In triangle OAB, the OA = 3i + 4k and the vector OB = i + 2j - 2k. Find OP, where P is the point where the bisector of ‚à†AOB intersects AB.\n1‚ãÖ2‚ãÖ31‚Äã+2‚ãÖ3‚ãÖ41‚Äã+n(n+1)(n+2)1‚Äã=4(n+1)(n+2)n(n+3)‚Äã\n(21‚Äã‚àí21‚Äã+41‚Äã)+(61‚Äã‚àí31‚Äã+61‚Äã)+(81‚Äã‚àí41‚Äã+81‚Äã)+(101‚Äã‚àí51‚Äã+101‚Äã)+‚ãØ+2(k+1)1‚Äã‚àík+11‚Äã+2(k+2)1‚Äã"},"notes/Daily-Notes/Mon-July-17th-2023":{"title":"Mon July 17th 2023","links":["tags/englang","tasks/Finish-Englang-Exercises-2-12","tags/physics","tasks/Start-watching-Physics-Videos","tags/programming","tasks/Fix-Username-Issue","tasks/Fix-date-pickers-for-post-creation","tasks/Fix-the-translation-layer-for-rending-from-quill-delta"],"tags":["englang","physics","programming"],"content":"I‚Äôm in the city today! I got invited to Tildes which is really cool and I‚Äôve been having some fun with that. Right now I‚Äôm in the Melbourne Connect building and I‚Äôm meeting with Prof Alistair Moffat.\nQuestions for Mr. Moffat ¬ß\nBelow are the main discussion points I want to have with him:\n\nHi hello introduce myself, explain how I‚Äôm very interested in his work, namely on text retrieval systems and search engines.\nBeen studying Algorithmics at school, and I‚Äôve worked on a lot of frontend programming for apps and such, but have recently gotten a lot more interested in the theoretical side of computer science from books and the internet.\nI could help with anything to do with actual programming, which I really enjoy and have experience with. I can also help with anything that‚Äôs rather repetitive, I just simply want to be involved with and see how research it done at universities, since it a very different side to the field I am interested in that I haven‚Äôt viewed before.\nMy strengths lie in the actual programming itself, mainly frontend things so far, since I have made plenty of apps and websites for countless purposes. If anything like this is ever needed, especially with any of his PhD students, then I‚Äôd be incredibly pumped if I could have an informal assistant role with any of his students and see what I can help out with.\n\nNotes for Two Cousins ¬ß\n\nThese should be added into the issue tracker later\n\n\nthe list of available jobs should also have a section underneath it, maybe a button that says view other jobs, and this section should list jobs that are free but that don‚Äôt match the availability of the user since some may have more flexible schedules. Also it is not immedietly clear that the cards are interactive/clickable, so there should be an indicator saying ‚Äú16 times available‚Äù to make that more clear.\npreferably once a lesson time slot is locked in, it should also display on the manage jobs card so that it‚Äôs more clear when the lesson is.\nvolunteers should be able to click the start shift button up to 15 mins before the lesson has started, but logic needs to be put in place to ‚Äúsnap‚Äù this to lesson times\nthere will be a 2x multiplier for australian volunteers and an 8x multiplier for american volunteers, based on their location\nit needs to be made veryy clear that volunteers need to click the start shift button, so it should be made clear in the onboarding email along with an email when the lesson is claimed and before the lesson itself\nvolunteers should have a similar manage jobs view to the orphanages but only show their own jobs (orphanage should only show their own jobs too). Try to make emailing people easier by making the email very prominent, and time present too.\nrename the availability at the top to ‚ÄúWeekly Availability‚Äù and remove the numbers because that was a bit confusing (might have to fork the syncfusion calendar or add in an option to hide them).\n\nTo Do For Today ¬ß\n\n Finish Englang Exercises 2-12#englang üî∫ englang üî∫\n Start watching Physics Videos#physics physics\n Fix Username Issue#programming programming\n Fix date pickers for post creation#programming programming\n Fix the translation layer for rending from quill delta#programming programming\n"},"notes/Daily-Notes/Mon-July-24th-2023":{"title":"Mon July 24th 2023","links":["tags/algo","tasks/Keep-working-on-Algorithmics-SAT"],"tags":["algo"],"content":"Today is much better than the weekend, twas very depressing.\n\n Keep working on Algorithmics SAT#algo algo\n"},"notes/Daily-Notes/Sat-July-8th-2023":{"title":"Sat July 8th 2023","links":["tasks/Setup-Obsidian-how-I-like"],"tags":[],"content":"Starting to use Daily Notes! ¬ß\n\n Setup Obsidian how I like Setup Obsidian how I like\n"},"notes/Daily-Notes/Sun-July-30th-2023":{"title":"Sun July 30th 2023","links":[],"tags":[],"content":"School leadership!\nPersonal brand is about how I genuinely find it really fun and enjoyable to help other people and school leadership is an opportunity to make a wider impact and have others realise their abilities\n\ntalk about student mental health\nconnection with other campuses\nconnection with many facets of the school, bring together communities\nyear levels working more with each other, after covid only gotten to know own year level, personally only gotten much closer to year level below me this year, could try to have more of that, maybe a buddy system with year 12s and 7s\n"},"notes/Daily-Notes/Thu-November-23rd-2023":{"title":"Thu November 23rd 2023","links":[],"tags":[],"content":"Spec exam today!\nProve that Var(aX)=a2Var(X)."},"notes/Daily-Notes/Tue-August-15th-2023":{"title":"Tue August 15th 2023","links":[],"tags":[],"content":"Ms. Parfett for letter of recommendation"},"notes/Daily-Notes/Tue-July-11th-2023":{"title":"Tue July 11th 2023","links":["tags/programming","tasks/Create-PR-for-theme-fix","tasks/Make-is-possible-to-render-Delta","tags/methods","tasks/Do-some-Maths-homework","tasks/Start-working-on-schedule-view"],"tags":["programming","methods"],"content":"New day! I made a good amount of progress on the Aporia Network last night, and I was able to get Google Meets links generating using the Google Calendar API!! :D\nToday I have a Dusty rehearsal from 10am to 4pm, so I‚Äôll probably just be programming while I‚Äôm doing that üëç\n\n Create PR for theme fix#programming programming\n Make is possible to render Delta#programming programming\n Do some Maths homework#methods methods\n Start working on schedule view#programming programming\n\nFor Dusty, I got assigned Eden Kane as well, which is a short talking role during the start of Scene 12. Basically, Dusty is just trying to go out to dinner with this guy but the paparazzi is relentless, but she‚Äôs spinning up this story that they‚Äôre dating even though they‚Äôre not. Check it out on the script when we get to it."},"notes/Daily-Notes/Tue-July-18th-2023":{"title":"Tue July 18th 2023","links":["httpslms.vsvonline.vic.edu.aumodquizreview.phpattempt=654551&cmid=259933"],"tags":[],"content":"First day of school today! I really need to do algo üò≠\nFor englang: there‚Äôs a SAC which is a 1 outcome essay in week 8 monday and a formative practice essay in week 5.\n\n Email Neil if you dont find an answer to the quiz q4 [[.tasks/Email Neil if you dont find an answer to the quiz q4]]\n"},"notes/Daily-Notes/Tue-October-24th-2023":{"title":"Tue October 24th 2023","links":[],"tags":[],"content":"All human beings are born free and equal in dignity and rights. They are endowed with reason and conscience and should act towards one another in a spirit of brotherhood.\nEvri man mo woman i bon fri mo ikwol long respek mo ol raet. Oli gat risen mo tingting mo oli mas tritim wanwan long olgeta olsem ol brata mo sista.\nEvery man and women are born free and equal in respect and all rights. They have reason and conscience (think) and they must treat individuals with (altogether) (as) all brother and sister"},"notes/Daily-Notes/Wed-August-16th-2023":{"title":"Wed August 16th 2023","links":[],"tags":[],"content":"Hi Everyone! My name‚Äôs Garv and I‚Äôd like to be your House Captain for 2024, because how bad can I be? I‚Äôve asked that question to myself a lot recently and I think it‚Äôs a question that embodies Langley: how bad can I possibly be?\nIt‚Äôs kind of crazy that I‚Äôm standing here right now, it felt like just yesterday that I was in Year 7, watching our soon to be House Captain, Steven, come and stand here with a guitar for his rendition of Baby by Justin Bieber. I asked him later why he wanted to be house captain, and he said ‚Äúwell, how bad could it really be?‚Äù\nWhen I first joined the house, the sheer choice was overwhelming. There was so much to do, so much possibility, so I ended up doing what came naturally, I signed up to everything that I could, just to give it a shot. How bad can I be? Well, the answer is quite very bad, but honestly it didn‚Äôt matter, I was having a blast while doing it. So many things just fell flat on their face, I think 90% of the things I‚Äôve tried have just failed completely, but I kept going because it‚Äôs what felt natural to me.\nWhen I imagine Langley House, I think of one word. Perseverance. We‚Äôre the loudest and proudest house, and we‚Äôll give anything a shot, because at the end of the day, how bad can we be?? I know that I and all my fellow Langleyites will give it their all, that‚Äôs just what we do. I want to be house captain because it feels natural to me, a natural continuation of how much I‚Äôve received from this community and how much I wanna give back. I love this house, I love making an impact, and I love just giving things a shot. So why not? Give me a shot, because really, how bad can I be?"},"notes/Daily-Notes/Wed-July-12th-2023":{"title":"Wed July 12th 2023","links":[],"tags":[],"content":"Another day of app development.\nIn the morning I had a quick call with Guddi Masi and Advaith, which was really good and I got to show them the app so far. It‚Äôs 1:18pm right now, and I‚Äôve mostly spent the day refactoring code and trying to make it a bit neater.\nAt the Dusty rehearsal, Ms. Mellington also gave me the role of the Guardsman in Scene 18. He‚Äôs kind of dim witted, and Zara‚Äôs character Peg is explaining to him why Paul McCartney is coming to the party, but he doesn‚Äôt really understand. Check your photos for what you gotta do!"},"notes/Daily-Notes/Wed-July-19th-2023":{"title":"Wed July 19th 2023","links":["tags/englang","tasks/Finish-Englang-Essay"],"tags":["englang"],"content":"Hello!\n\n Finish Englang Essay#englang englang\n"},"notes/School-Subjects/Algorithmics/ADT-Terminology":{"title":"ADT Terminology","links":["tags/algo","tags/card"],"tags":["algo","card"],"content":"#algo\nList#card ¬ß\nA¬†list¬†is a collection of similar items, in no particular order. In the traditional use of lists as ADTs in algorithms and coding languages, only the first and last item of a list may be viewed, updated and deleted. However, this is not strictly implemented in all coding languages, including Snap! and Snap/Edgy. Unlike mathematical sets, ADT lists can have repeated values.\n\nArray#card ¬ß\nAn¬†array¬†is a collection of similar items in a¬†fixed length, non-expandable structure of items that are accessible by index position.\n\nStack#card ¬ß\nA stack is a collection of similar items where item access is restricted for viewing (top/peek), adding (push) and deleting (pop) at one end of the stack only, referred to as the¬†top of the stack. Items are accessed in order Last In First Out (LIFO).\n\nQueue#card ¬ß\nA¬†queue¬†is a collection of similar items where item access is restricted for viewing and deleting (dequeuing) from the front of the queue, while new items can only be added (enqueued) to the back of the queue. Items are accessed in the order First In First Out (FIFO).\n\nPriority Queue#card ¬ß\nA¬†priority queue¬†is a collection of similar items where each item is assigned a ranking or priority that determines its importance or urgency. Access is restricted for viewing and deleting from the front of the priority queue. New items, when added, move forward in the priority queue according to the priority ranking given to the item.\n\nPriority queues can be¬†minimum ranking, where the smallest priority item goes further to the front of the priority queue, or they can be¬†maximum ranking, where the largest priority item goes further to the front of the priority queue.\nDictionary#card ¬ß\nA¬†dictionary, also known as an¬†associated array, is an information structure of &lt;key, value&gt; pairs where the ‚Äòkey‚Äô is used to access the ‚Äòvalue‚Äô items, which give more detailed information related to the ‚Äòkey‚Äô.\n\nList/Array Signatures#card ¬ß\n![List Signature.png](List Signature.png)\n"},"notes/School-Subjects/Algorithmics/Algorithmics":{"title":"Algorithmics","links":["tags/algo","tags/subject","notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-1/3.1-HW-Graph-Worksheet.pdf","notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-1/Task-3","notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-1/Goat-Cabbage-Wolf-Hunter","notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-2/Writing-Pseudocode","notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-2/Sweet-Treats-Pseudocode","notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-2/Locker-Door-Problem","notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-4/Graphs-as-ADTs","notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-4/Bridge-Crossing-Problem","notes/School-Subjects/Algorithmics/Glossary"],"tags":["algo","subject"],"content":"#algo#subject\nUnit 1 ¬ß\n\nWeek 1: Complete 3 Tasks (here‚Äôs Task 3)\n\nModelled Goat Cabbage Wolf Hunter\n\n\nWeek 2: Introduction to Pseudocode with Sweet Treats\n\nAlso modelled Locker Door Problem\n\n\nIntroduction to ADTs.\nWeek 3:\n\nLesson 1:\n\nGraphs as ADTs\nBridge Crossing Problem\n\n\nWeek 4:\n\nKey Graph Terminology\n\n\n\n\n"},"notes/School-Subjects/Algorithmics/Garv's-Algorithmics-Summary-Sheet":{"title":"Garv's Algorithmics Summary Sheet","links":[],"tags":[],"content":"Prim‚Äôs Algorithm ¬ß\nProof of Correctness ¬ß\n\nProve that Prim‚Äôs Algorithm always generates the MST for any given graph G.\n\nBase Case ¬ß\nWhen the algorithm starts, the tree generated must be a subtree of the MST because only one node is in the tree.\nInductive Step ¬ß\nAssume that at step i, the tree generated is a subtree of the MST. At step i+1, partition the nodes into two sets, those in the tree already as S and those not as S‚Ä≤. The edge added must be the shortest between S and S‚Ä≤ because any other edge will increase the cost of the MST. This is exactly what Prim‚Äôs choose and therefore, the tree generated is still a subgraph of the MST.\nThis assumption holds until all nodes are included in the MST. Thus, by mathematical induction, Prim‚Äôs algorithm always generates the MST for any given graph G.\nDijkstra‚Äôs Algorithm ¬ß\nPseudocode ¬ß\nfunction reconstruct(pred: dict, x: node):\n\tpath = []\n\tprev = x\n\twhile prev != null:\n\t\tpath.add(prev) to front of list\n\t\tprev = pred[prev]\n\t\n\treturn path\n\nAlgorithm dijkstras(s: node, x: node, G: graph):\n\t// s is the source node, x is the destination node\n\t\n\tfor node n in G:\n\t\tdist[n] = inf\n\t\tpred[n] = null\n\t\t\n\tdist[u] = 0\n\tQ = MinPrioQueue based on dist values of nodes\n\t\n\twhile Q is not empty:\n\t\tu = top(Q)\n\t\tQ = dequeue(Q)\n\t\t\n\t\tif u = x:\n\t\t\treturn reconstruct(pred, x)\n\t\t\n\t\tfor each unvisited neighbour v of u:\n\t\t\ttempDist = dist[u] + weight(u,v)\n\t\t\tif tempDist &lt; dist[v]:\n\t\t\t\tdist[v] = tempDist\n\t\t\t\tpred[v] = u\n\t\n\treturn reconstruct(pred, x)\n\nProof of Correctness ¬ß\nLet Q be a set of vertices whose shortest distances have been finalised by Dijkstra‚Äôs and let s be the source node.\n\nProve that Dijkstra‚Äôs Algorithm always finds the shortest path from the node s to every other node for any given graph G, provided that G has no negative edge weights.\n\nBase Case ¬ß\nWhen the algorithm starts, the distance from the source node to itself is zero, which is the shortest distance possible assuming no negative edge weights. Thus, the algorithm holds for the base case.\nInductive Step ¬ß\nIt must be proved that Dijkstra‚Äôs holds true for all vertices not Q. Consider the step in Dijkstra‚Äôs algorithm where the node v is added to Q via the edge (u,v) where u‚ààQ.\nAssume for the sake of contradiction that a shorter path to v exists via some other path. The path must then take the form s,‚ãØ,w,x,‚ãØ,v, where w is in Q and x is not in Q. Since there are no negative weights, the cost of the path x,‚ãØ,v is ‚â•0. When selecting a vertex to finalise, Dijkstra‚Äôs selects the non-finalised vertex with the shortest path. As such, Costs,‚ãØ,w,x‚Äã‚â•Costs,‚ãØ,u,v‚Äã because the node v is selected by the algorithm via (u,v). Therefore, Costs,‚ãØ,w,x‚Äã+Costx,‚ãØ,v‚Äã‚â•Costs,‚ãØ,u,v‚Äã which contradicts the above assumption that a shorter path exists. Hence, Dijkstra‚Äôs algorithm correctly finds the shortest distance to the node v via the edge (u,v).\nThus, by mathematical induction, Dijkstra‚Äôs algorithm correctly calculates the shortest distance from the node s to all other nodes in the graph.\nBellman-Ford Algorithm ¬ß\nProof of Correctness ¬ß\n\nProve that the Bellman-Ford Algorithm always finds the shortest path from the node s to every other node for any given graph G, provided that G has no negative cycles.\n\nBase Case ¬ß\nAt the start this must be true, because only the node s is marked as 0 distance.\nInductive Step ¬ß\nAssume that at step i, the shortest path from s to any node n steps away are correct. At the step i+1, all edges are checked to see if it can improve the shortest path distance to any node. Therefore, at the end of iteration, all shortest paths of length i+1 are correct.\nThus, by mathematical induction, the shortest path distance to all nodes are correctly stored by the step ‚à£V‚à£‚àí1 and above, and hence Bellman-Ford correctly finds the shortest path distances.\nFloyd-Warshall Algorithm ¬ß\nPseudocode ¬ß\nAlgorithm floydWarshall(G: graph):\n\tV = number of vertices in graph G\n\tdist = V * V array of minimum distances\n\tfor each vertex v\n\t\tdist[v][v] = 0\n\tfor each edge (u,v):\n\t\tdist[u][v] = weight(u,v)\n\tfor k from 1 to V:\n\t\tfor i from 1 to V:\n\t\t\tfor j from 1 to V:\n\t\t\t\tif dist[i][j] &gt; dist[i][k] + dist[k][j]:\n\t\t\t\t\tdist[i][j] = dist[i][k] + dist[k][j]\n\treturn dist\n\n0/1 Knapsack Problem ¬ß\nPseudocode ¬ß\nAlgorithm knapsack(P: list, W: list, m: int, n: int):\n\t// P is an array of profits e.g. [2, 3, 6, 9] for n = 4\n\t// m is the capacity and n is the number of items\n\tadd 0 to the front of P and W\n\tV = n + 1 by m + 1 matrix\n\t\n\tfor i from 0 to n:\n\t\tfor w from 0 to m:\n\t\t\tif i = 0 or m = 0:\n\t\t\t\tV[i, w] = 0\n\t\t\telse:\n\t\t\t\tV[i, w] = max(V[i - 1, w], V[i - 1, w - W[i]] + P[i])\n\t\n\treturn max(V)\n\nIf the items to keep are to be returned, replace return max(V) with the following:\ni = n and j = m\nkeep = list of 0s of length n + 1\nwhile i&gt;0 and j&gt;0:\n\tif V[i, j] = V[i - 1, j]:\n\t\t// don&#039;t keep the item\n\t\tkeep[i] = 0\n\t\ti = i - 1\n\telse:\n\t\t// keep the item\n\t\tkeep[i] = 1\n\t\ti = i - 1\n\t\tj = j - W[i]\n\nremove first element from keep\nreturn keep\n\nChange-Making Problem ¬ß\nPseudocode ¬ß\nAlgorithm changeMaker(amount: int, coins: list):\n\tlet dp be array of size amount + 1\n\tdp[0] = 0\n\tfor a from 1 to amount:\n\t\tdp[a] = inf\n\t\tfor c in coins:\n\t\t\tif a-c &gt;= 0:\n\t\t\t\tdp[a] = min(dp[a], dp[a-c] + 1)\n\tif dp[amount] != inf:\n\t\treturn dp[amount]\n\telse:\n\t\treturn -1\n\nFibonacci ¬ß\nPseudocode ¬ß\nAlgorithm fibonacci(n: int):\n\tfib = [1, 1]\n\tfor i from 2 to n:\n\t\tfib[i] = fib[i-1] + fib[i-1]\n\treturn fib[n]\n\nQuicksort ¬ß\nPseudocode ¬ß\nAlgorithm quicksort(L: array&lt;int&gt;, a: int, b: int):\n\tP = L[b]\n\ti = a - 1\n\tfor j from a to b - 1:\n\t\tif L[j] &lt; P:\n\t\ti = i + 1\n\t\tSwap L[i] and L[j]\n\tSwap L[b] and L[i + 1]\n\tquicksort(L, a, i)\n\tquicksort(L, i + 2, b)\n\nMergesort ¬ß\nPseudocode ¬ß\nAlgorithm mergesort(a: array):\n\tlet n be the side of a\n\tif n = 1:\n\t\treturn a\n\t\n\tm = n // 2\n\t\n\tarr1 = a from 0 to m\n\tarr2 = a from m + 1 to n\n\t\n\tarr1 = mergesort(a)\n\tarr2 = mergesort(b)\n\t\n\tmerge = []\n\t\n\twhile arr1 and arr2 both have elements:\n\t\tif arr1[0] &gt; arr2[0]:\n\t\t\tmerge.append(arr2[0])\n\t\t\tremove first element from arr2\n\t\telse:\n\t\t\tmerge.append(arr1[0])\n\t\t\tremove first element from arr1\n\t\n\tif arr1 is empty:\n\t\tadd the rest of arr2 to the end of merge\n\telse:\n\t\tadd the rest of arr1 to the end of merge\n\t\n\treturn merge\n"},"notes/School-Subjects/Algorithmics/Glossary":{"title":"Glossary","links":["tags/algo","tags/card"],"tags":["algo","card"],"content":"#algo\nHow do you notate a graph?#card ¬ß\nA **graph **G=(V,E) is a set of vertices V(G), a set of edges E(G), and a relation that associates two vertices via an edge.\n\nAdjacent Nodes#card ¬ß\nTwo vertices v and w in graph G are¬†adjacent, denoted v‚àíw, if there is an edge between them.\n\nIncident#card ¬ß\nIf the vertex v is an endpoint of the edge e, then e and v are¬†incident.\n\nDegree#card ¬ß\nThe¬†degree¬†d(v) of a vertex v is the number of edges incident to it, counting loops twice.\n\nPath#card ¬ß\nA path is a trail in which neither vertices nor edges are repeated. A path is also a trail, thus it is also an open walk.\nThe length of a path is the number of edges, or the sum of the weights of the edges.\n\nHere 6-&gt;8-&gt;3-&gt;1-&gt;2-&gt;4 is a Path\n\nComplete Graph#card ¬ß\nThe¬†complete graph is the graph (‚Äôn‚Äô vertices) in which every pair of vertices are adjacent.\nSince each node is connected to every other node by an edge, each node has a degree of n‚àí1 and there are 2n(n‚àí1)‚Äã edges.\n![Connected Graph.png](Connected Graph.png)\n\nBipartite Graphs#card ¬ß\nA bipartite graph, also called a bigraph, is¬†a set of graph vertices decomposed into two disjoint sets such that no two graph vertices within the same set are adjacent.\n\nThis graph is bipartite because none of the red nodes connect to other nodes.\n\nAdjacency Matrix#card ¬ß\nThe¬†adjacency matrix¬†A of a graph G with n vertices is the n√ón matrix with rows and columns indexed by the vertices of G, where the number in the ith row and jth column of A is the number of edges between the ith and jth vertex, counting loops twice.\n\n\nWalk#card ¬ß\nA walk is going from any node to another node, and is the most general definition of this process for a graph.\n\n\nTrail#card ¬ß\nA¬†trail¬†is a walk with no repeated edge.\n\nOath#card ¬ß\nA¬†oath¬†is a walk with no repeated vertex.\n\nCircuit#card ¬ß\nA¬†circuit¬†is a trail whose first and last vertices are the same.\n\nCycle#card ¬ß\nA¬†cycle¬†is a circuit with no repeated vertex other than the first and last vertex.\n![Cycle Diagram.png](Cycle Diagram.png)\n\nLength#card ¬ß\nThe length of a walk, trail, path, circuit, or cycle in a graph is the number of edges in it (counting repeated edges multiple times).\n\nConnected#card ¬ß\nA graph G is¬†connected¬†if, for every pair of vertices in G, there exists a path between them.\n\nSubgraph#card ¬ß\nA¬†subgraph¬†H of a graph G is a graph such that V (H) is a subset of V (G) and E(H) is a subset of E(G).\n\nEulerian Circuit#card ¬ß\nA¬†Eulerian circuit¬†of a graph G is a circuit which contains every edge of G.\n\nHamiltonian Cycle#card ¬ß\nA¬†Hamiltonian cycle¬†of a graph G is a cycle which contains every vertex of G.\n\nNeighbourhood#card ¬ß\nThe¬†neighbourhood¬†of a vertex v is the set of vertices adjacent to v.\n\nTree#card ¬ß\nA¬†tree¬†is a connected graph with no cycles.\n\nIn any tree, ‚à£E‚à£=‚à£V‚à£‚àí1\n\nOrder#card ¬ß\nNumber of vertices or nodes, ‚à£V‚à£.\nSize#card ¬ß\nNumber of edges of a graph, ‚à£E‚à£\nLeaf#card ¬ß\nA¬†leaf¬†of a tree is a vertex of degree 1.\n\nSpanning Subgraph#card ¬ß\nA subgraph that is obtained only by edge deletions, so it therefore contains all the vertices of the original graph.\n\nDistance#card ¬ß\nThe¬†distance¬†between two vertices v and w is the length of the shortest path between them.\n\nForest#card ¬ß\nA¬†forest¬†is a graph with no cycles. (and it only wouldn‚Äôt be connected if there are multiple trees within the forest)\n\nDiameter#card ¬ß\nThe longest shortest path from any node to another. This means that is the maximum distance to get from any node to another.\n\nThe diameter here would be 3!\n\nRadius#card ¬ß\nThe radius of a graph is the minimum distance you can take to get to any other node from a central node. For example, in this graph, C can get to any other node in 2 moves, so the radius would be 2.\n![Radius Diagram.png](Radius Diagram.png)\n\nEccentricity#card ¬ß\nThe eccentricity is of a vertex is the maximum distance between the vertex and any other vertex. Below is a graph with each node labelled with its eccentricity.\n\n\nDigraph#card ¬ß\nA directed graph, or digraph, is a graph where each edge has a direction.\n\nA digraph is strongly connected if there is a directed path from every vertex to every other vertex in the graph.\n\nDAGs#card ¬ß\nA directed graph that is acyclic (contains no cycles) is known as a DAG. All trees are DAGs with the added restriction that each child only has one parent.\n\nAlgorithm#card ¬ß\nAn algorithm is a step-by-step process that describes how to solve a problem and/or complete a task, and which will always give the correct result.¬†\nAlgorithms are often expressed using a loosely defined language called¬†pseudocode, which is a hybrid language combining standard English with structures used in coding/programming languages."},"notes/School-Subjects/Algorithmics/Graph-Algorithms":{"title":"Graph Algorithms","links":["tags/algo","tags/card"],"tags":["algo","card"],"content":"#algo\nBreadth First Search (BFS)#card ¬ß\nBFS is a graph traversal algorithm that visits all neighbours of a source node, and keeps visiting neighbours of neighbours until the entire graph is traversed.\nBFS algorithm step-by-step\n\nAdd the initial node to the¬†queue¬†and mark it as¬†seen.\nRemove the next element from the¬†queue¬†and call it¬†current.\nGet all neighbours of the¬†current¬†node that are not yet marked as¬†seen.\nStore all these neighbours into the¬†queue¬†and mark them all as¬†seen.\nRepeat steps¬†2 - 4¬†until the¬†queue¬†becomes empty.\n\nDepth First Search (DFS)#card ¬ß\nDFS is a graph traversal algorithm that chooses any single neighbour node for each discovered node and proceeds searching from it. This produces long branches, because searching from other neighbours is only carried out once a branch has been fully explored.\n\nDesign Pattern: Decrease &amp; Conquer ‚àµ grows MST by cheapest edge possible that does not make a cycle\nDFS algorithm step-by-step\n\n\nAdd the initial node to the¬†stack.\nRemove the next element from the¬†stack¬†and call it¬†current.\nIf the¬†current¬†node was¬†seen¬†then skip it (go to step¬†6).\nOtherwise mark the¬†current¬†node as¬†seen.\nGet all neighbours of the¬†current¬†node and add all of them to the¬†stack.\nRepeat steps¬†2 - 5¬†until the¬†stack¬†becomes empty.\nDifference from BFS\n\n\nWe use a¬†stack¬†instead of the¬†queue¬†for storing nodes.\nTypically we do not check whether a node was¬†seen¬†when storing neighbours in the stack¬†‚Äì instead we perform this checking when retrieving the node from it.\n\n\nApplications of DFS and BFS#card ¬ß\n\nDFS and BFS will both give information about whether one node is connected to another via any path in a graph.\nIf the graph¬†is¬†connected, BFS will visit all of its nodes.\nThe traversal tree built by BFS represents the shortest paths from the initial vertex to any other for an unweighted graph.\nDFS is unsuitable for searching shortest paths for unweighted graphs.\n\n\nGraph Colouring#card ¬ß\nGraph colouring or vertex colouring is the process of colouring a graph such that no adjacent vertices have the same colour. A k-colouring of a graph uses k colours, and the chromatic number is the minimum value of k for which a k colouring exists.\nApplications are generally to resolve conflicts, where certain objects cannot be next to each other or certain events cannot run at the same time.\nThese generally end up being optimal resource allocation problems.\n\nDetecting Cycles#card ¬ß\nDFS is used to detect cycles! With a small modification to DFS to maintain a list of visited nodes as well as processed nodes, DFS can detect cycles, and if a we visit a node we have already visited, a cycle is detected.\n\nTopological Sorting#card ¬ß\nThe DFS order of the processed list is the topological sorting, normally run from a source node.\nOne problem that can be solved by divide and conquer is topological sorting.¬†Topological sorting¬†is the ordering of information according to its dependencies and is typically represented by a directed graph showing the order of progress for a particular system.\n\nShortest Path in Unweighted Graphs#card ¬ß\nBFS is used to find the shortest path in unweighted graphs from one node to another. By rippling out in layers from the starting node, it can find the first path to the end node.\n\nSpanning Tree#card ¬ß\nA¬†spanning tree¬†is a connected graph that has no circuits or cycles and which includes all the vertices or nodes of a graph.\nA¬†minimum spanning tree¬†(MST) is a spanning tree for a weighted graph whose edges add up to the smallest possible value.\n\nPrim‚Äôs Algorithm#card ¬ß\nPrim‚Äôs Algorithm is a greedy algorithm used for finding the MST in weighted undirected graphs.\n\nDesign Pattern: Marks each processed node and reduces problem sizer by one node in each iteration until all nodes processed\nPrim‚Äôs algorithm in plain English\n\n\nBegin at any vertex.\nSelect the¬†cheapest¬†(minimum-weight)¬†edge emanating from the vertex.\nLook at edges coming from the vertices selected so far: select the¬†cheapest¬†edge; if the edge forms a circuit, discard it and select the next cheapest.\nRepeat until all vertices have been selected.\nDouble-check by repeating the process with a different starting vertex.\n\n\nDijkstra‚Äôs Algorithm#card ¬ß\nDijkstra‚Äôs algorithm finds the shortest path from the starting location to any other location, not just the desired destination. The algorithm works on weighted graphs and weighted digraphs,¬†where no negative weight cycles exist.\nDijkstra‚Äôs algorithm is a¬†greedy¬†algorithm¬†‚Äì that is, one that starts at a given source node in a weighted graph and expands all possible paths from this node using the weights on the edges to all the immediate neighbours. It then repeats this process from the cheapest-cost neighbour at this point in the algorithm.¬†\nAs it calculates the shortest path, it marks nodes that have been explored and expanded to their immediate neighbours as ‚Äòvisited‚Äô until all the nodes in the graph have been explored, processed, expanded and visited.\nWhen all nodes have been processed, the shortest path from the source node will have been calculated for all the other nodes in the graph.\nWhile there are unvisited vertices do\n  find the vertex (V) with the smallest distance in the unvisited vertices list\n  remove V from the unvisited vertices list\n  for each neighbour (N) of vertex V do\n    thisDist:=distance to V plus the weight of the edge V-N\n    if thisDist &lt; distance to N then\n      A shorter path to N has been found\n      Update the shortest path to N distance to N := thisDist\n      set the shortest path predecessor to N as V\n^1684293406156\n\n    End if\n  End do\nEnd do\n\nBellman-Ford Algorithm#card ¬ß\nBellman-Ford, like Dijkstra‚Äôs uses relaxation to find the shortest path, but it can also detect that a negative cycle exists. It will not be able to find the shortest path if this cycle exists. This being said, Bellman-Ford works on graphs with negative edge weights, but not negative cycles.\nUnlike Dijkstra‚Äôs algorithm, the Bellman-Ford algorithm is not greedy and does not use a priority queue to process the edges.\n\nDijkstra‚Äôs vs Bellman-Ford vs Floyd-Warshall#card ¬ß\n\nDijkstra‚Äôs: shortest path from one node to all nodes\nBellman-Ford: shortest path from one node to all nodes, negative edges allowed\nFloyd-Warshall‚Äôs Shortest Path: shortest path between all pairs of vertices, negative edges allowedNegative cycles are not allowed in any of these algorithms, because shortest path doesn‚Äôt make sense for negative cycles.\n"},"notes/School-Subjects/Algorithmics/Halting-Proof":{"title":"Halting Proof","links":[],"tags":[],"content":"Let H(a,i) be function that tells if a halts given i as an input.\nLet H+(a,i) be the function that does the opposite.\nWhat will the output of H+(H,H) be?\ndef H(algo: function, input: string):\n\treturn will algo halt with input\n \ndef H+(algo: H(a, i)):\n\tif H(algo, input) == true:\n\t\trepeat forever/don&#039;t halt\n\telse:\n\t\tterminate/halt\n \nprint(H+(H)) // should be a syntax error for datatype\ndef addnum():\n\treturn 5 * int\n \naddnum(addnum)\nf(g) = |the minimum value of g|\nf(f) = 0\n\ng(x) = f(x)+limx-&gt; 0\ng(x) = x"},"notes/School-Subjects/Algorithmics/SAT/Garv's-SAT--Friendship-Network":{"title":"Algorithmics SAT - Friendship Network","links":[],"tags":[],"content":"The general problem of planning trips with friends can be made more specific by considering scenarios for hangouts. In this particular scenario, my friends have decided that we want to travel in one big travel party and I will start and end my day at my house, picking up all my friends along the way. This form of hangout is quite common with my friends, where we pick up people along the way to get to a final destination.\nThe algorithm will find the quickest route to pick up all my friends, go to our desired location(s), and drop them all off before I go back to my own house. It will then return to me the traversal path, the time taken, and my cost for transport throughout the day.\nInformation to Consider ¬ß\nThe following is key information to consider when modelling the real life problem. This will be done by representing the problem with an undirected network/graph, as all public transport methods go both ways, just at different times depending on the transport method.\nNode Representation ¬ß\nNodes represent key landmarks such as train stations, bus stops or a tourist attraction.\nEdge Representation ¬ß\nEdges represent a route (train, bus, tram, walking, etc) from one location to another\nWeight Representation ¬ß\nThe edge weights will represent:\n\nthe time taken to travel from one house to the other\nthe financial cost of the route, with buses being more expensive than trains, which are more expensive than walking, etc. These can be interchanged to prioritise the certain attribute, such as time or money being of higher importance in the algorithm.\n\nAdditional Information Modelled Outside Graph ¬ß\nThe following would be modelled as dictionaries:\n\nThe arrival time/timetable of buses and trains\nThe cost of changing lines\nAttributes of each friend, such as name, home, the time they wake up, the amount of time they take to get ready, and who is friends with whom or to what degree.\nProximity to all friends‚Äô houses (by walking), which would be a dictionary for each node separately. This information could be used to add further complications to make the model reflect real life more closely, such as different friends being ready earlier than others or requiring a certain number of ‚Äúclose friends‚Äù (by threshold) to be within the travel party at all times.\n\nAbstract Data Types ¬ß\nI have selected a number of stations, bus stops and locations which I feel are relevant to my friend group.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPropertyStored asNotesKey LandmarksNodeLandmark NameNode AttributeRouteEdgeRoute NameEdge AttributeTransport Method/LineEdge ColourTime or CostEdge WeightThese can be interchanged to prioritise different aspects. Distance is more relevant than time, but cost may be important as well.Time/Cost of Changing LinesNode attribute ‚Äúinterchange_cost‚Äù &amp; ‚Äúinterchange_time‚ÄùTrain and Bus TimetableDictionary: Dict¬´String: Array¬´Dict¬´String: Int or String¬ª¬ª¬ªKeys would be each line (bus or train), and the values would be arrays of dictionaries with what node they are at, arrival times and departure times.Attributes of Each FriendDictionary: Dict¬´String: Dynamic¬ªThis will be a json style nested dictionary that has various attributes about each friend, such as waking up time, other close friends and other relevant informationProximity to Friends‚Äô HousesNode Attribute: Dict¬´String: Float¬ªProximity of all houses as an attribute for each node, which has keys as friends‚Äô names and values as the distance or time to their house\nPossible Graph ¬ß\n{ height=360px }\nFinal Graph ¬ß\n{ height=360px }\nSignatures ¬ß\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunction NameSignatureadd_landmark[name, timetable, latlong_coordinates] -&gt; nodeadd_route[start_node, end_node, travel_method, time, line?] -&gt; edgeadd_line[colour, zone, timetable] -&gt; dictionaryadd_friend[name, latlong_coordinates] -&gt; dictionarysetup_graph[landmarks, routes, friends, timetable] -&gt; graphlatlong_distance[coord1, coord2] -&gt; floating point numbercalculate_nodes[friend_data, node_data] -&gt; dictionary&lt;string, node or float&gt;calculate_prices[line_data, hamiltonian_path, concession, holiday] -&gt; floatdist[start, end, current_time] -&gt; floatfetch_djk[start, end, graph, current_time] -&gt; dictionary with cost and pathdijkstras[start, end, graph, current_time] -&gt; cost and pathheld_karp[start, end, visit, current_time] -&gt; cost and pathFunction signatures can also be found within the main.py Python file as comments within the code\nAlgorithm Selection ¬ß\nWhile simplifying my problem, I found that starting and ending my day at my house while picking up all my friends along the way is simply an applied version of finding the shortest hamiltonian circuit. In other words, the shortest cost circuit that will visit every node that is needed to be visited to pick up my friends.\nWhile researching into how to solve this, I found that this was a classic example of the travelling salesman problem, which turns out to be an NP-hard problem. This means that there currently exists no exact solution to the problem in polynomial time, and the best I can currently do is the Held‚ÄìKarp algorithm, which has a time complexity of O(n22n) which is not ideal at all in terms of efficiency, but will have to be sufficient for the use cases of this project.\nNode Selection Algorithm ¬ß\nBefore we can find the shortest circuit that visits a set of nodes, we need to know what nodes to visit in the first place!\nEach node, which is part of the public transport network, can be assigned latitude and longitude coordinates, and these can be compared with the coordinates of each of my friends‚Äô houses to determine the shortest distance they would need to walk to reach a transport hub that is represented as a node on our graph.\nThe process of finding the nodes can then ‚à¥ be represented as the following informal steps:\n\nGet the latitude and longitude coordinates of all transport hubs and friends‚Äô houses.\nLoop over all friends and transport hubs, comparing the distance of each to find the closest transport hub to each friend.\nFinally store each friends‚Äô closest transport hub and distance into their respective dictionary entries.\n\nThe question still remains though: how can we find the distance between two lat/long coordinates? The answer is the haversine formula!\nThe Haversine Formula ¬ß\nThe haversine formula determines the distance between two points on a sphere given their latitude and longitude coordinates. Using the distance formula (y2‚Äã‚àíy1‚Äã)2+(x2‚Äã‚àíx1‚Äã)2‚Äã may be sufficient in terms of finding the closest transport hub, but the distances it provides only work on a flat cartesian plane, not spheres like the earth, distances which could be used for later computation such as time taken to walk to the transport hubs.\nThe haversine formula can be rearranged given that the Earth‚Äôs radius is 6371km to give us the following equation (with d representing the distance between two locations):\nŒîlat=lat1‚Äã‚àílat2‚Äã\nŒîlong=long1‚àílong2‚Äã\nR=6371\na¬†=¬†sin2(2Œîlat‚Äã)¬†+¬†cos(lat1‚Äã)cos(lat2‚Äã)sin2(2Œîlong‚Äã)\nc¬†=¬†2atan2(a‚Äã,¬†1‚àía‚Äã)\nd¬†=¬†R√óc\nIt is somewhat long on not the cleanest formula, but it should be more than sufficient in our code.\nPseudocode ¬ß\nFinally we can use the informal steps above to construct the following pseudocode:\ndistance_dict: dictionary = {}\n\nfunction calculate_nodes (\n\tfriend_data: dictionary,\n\tnode_data: dictionary\n):\n\tfor friend in friend_data:\n\t\thome: tuple = friend[&#039;home&#039;]\n\t\t// initial min vals that will be set to smallest iterated distance\n\t\tmin: float = infinity\n\t\tmin_node: node = null\n\t\t\n\t\tfor node in node_data:\n\t\t\tlocation: tuple = node[&#039;coordinates&#039;]\n\t\t\t// find real life distance (functional abstraction)\n\t\t\tdistance: float = latlong_distance(home, location)\n\t\t\tif distance &lt; min:\n\t\t\t\tmin = distance\n\t\t\t\tmin_node = node\n\t\t\n\t\tdistance_dict[friend][&#039;min_node&#039;] = min_node\n\t\tdistance_dict[friend][&#039;distance&#039;] = min\nend function\n\nThis combines the haversine formula and simple iteration to find the minimum distance node for each and stores it into a dictionary. When translated to Python, the above code looks like this:\ndef lat_long_distance(coord1, coord2):\n    # assign lat/long from coords\n    lat1 = coord1[0]\n    long1 = coord1[1]\n    lat2 = coord2[0]\n    long2 = coord2[1]\n \n    # radius of earth\n    r = 6371\n \n    # equation definitions from haversine formula\n    phi_1 = math.radians(lat1)\n    phi_2 = math.radians(lat2)\n \n    delta_phi = math.radians(lat2 - lat1)\n    delta_lambda = math.radians(long2 - long1)\n \n    a = math.sin(delta_phi / 2.0) ** 2 + math.cos(phi_1) * math.cos(phi_2) * math.sin(delta_lambda / 2.0) ** 2\n \n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n \n    # distance in kilometers\n    d = r * c\n \n    return d\n \n \ndef calculate_nodes(friend_data, node_data):\n    distance_dict = {}\n    for friend in friend_data:\n        friend_home = friend_data[friend][&#039;home&#039;]\n        # initial min vals that will be set to smallest iterated distance\n        min_dist = float(&#039;inf&#039;)\n        closest_node = None\n \n        for node in node_data:\n            location = node_data[node]\n            distance = lat_long_distance(friend_home, location)\n            if distance &lt; min_dist:\n                min_dist = distance\n                closest_node = node\n \n        distance_dict[friend] = {}\n        distance_dict[friend][&#039;closest_node&#039;] = closest_node\n        distance_dict[friend][&#039;distance&#039;] = min_dist\n    return distance_dict\nThe output of this code on our data set is as follows:\n{\n    &#039;Garv&#039;: {&#039;min_node&#039;: &#039;Brandon Park&#039;, &#039;distance&#039;: 0.4320651871428905},\n    &#039;Grace&#039;: {&#039;min_node&#039;: &#039;Caulfield&#039;, &#039;distance&#039;: 3.317303898425856},\n    &#039;Sophie&#039;: {&#039;min_node&#039;: &#039;Camberwell&#039;, &#039;distance&#039;: 10.093829041341555},\n    &#039;Zimo&#039;: {&#039;min_node&#039;: &#039;CGS WH&#039;, &#039;distance&#039;: 1.0463628559819804},\n    &#039;Emma&#039;: {&#039;min_node&#039;: &#039;Wheelers Hill Library&#039;, &#039;distance&#039;: 2.316823113596007},\n    &#039;Sabrina&#039;: {&#039;min_node&#039;: &#039;CGS WH&#039;, &#039;distance&#039;: 1.0361159593717744},\n    &#039;Audrey&#039;: {&#039;min_node&#039;: &#039;CGS WH&#039;, &#039;distance&#039;: 6.99331705920331},\n    &#039;Eric&#039;: {&#039;min_node&#039;: &#039;Glen Waverley&#039;, &#039;distance&#039;: 2.591823985420863},\n    &#039;Isabella&#039;: {&#039;min_node&#039;: &#039;CGS WH&#039;, &#039;distance&#039;: 2.048436485663766},\n    &#039;Josh&#039;: {&#039;min_node&#039;: &#039;CGS WH&#039;, &#039;distance&#039;: 0.656799522332077},\n    &#039;Molly&#039;: {&#039;min_node&#039;: &#039;Wheelers Hill Library&#039;, &#039;distance&#039;: 7.559508844793643},\n    &#039;Avery&#039;: {&#039;min_node&#039;: &#039;Mount Waverley&#039;, &#039;distance&#039;: 6.312529532145972},\n    &#039;Sammy&#039;: {&#039;min_node&#039;: &#039;Brandon Park&#039;, &#039;distance&#039;: 3.408577759087159},\n    &#039;Natsuki&#039;: {&#039;min_node&#039;: &#039;CGS WH&#039;, &#039;distance&#039;: 6.419493747390275},\n    &#039;Liam&#039;: {&#039;min_node&#039;: &#039;Mount Waverley&#039;, &#039;distance&#039;: 0.8078481833574709},\n    &#039;Nick&#039;: {&#039;min_node&#039;: &#039;Glen Waverley&#039;, &#039;distance&#039;: 1.3699143560496139},\n    &#039;Will&#039;: {&#039;min_node&#039;: &#039;Wheelers Hill Library&#039;, &#039;distance&#039;: 6.404888550878483},\n    &#039;Bella&#039;: {&#039;min_node&#039;: &#039;Wheelers Hill Library&#039;, &#039;distance&#039;: 0.7161158445537555}\n}\n\nIf it takes any of my friends‚Äô more than 20 minutes to walk to their transport location, I‚Äôd probably want a little warning advising me to consider adding closer transport hubs, because that seems like an awfully long time to walk! This can be done by considering the average human walking speed of 5.1km/h. Dividing their distance to transport hubs by this constant should give a good approximation of walking time.\nThis gives the following list of friends that it would be too long for, and we can consider expanding our graph for better results:\nWarning! These 11 friends have to walk more than 20 minutes in order to get to their transport hub. Possibly consider adding hubs closer to their houses:  Grace (39.03), Sophie (118.75), Emma (27.26), Audrey (82.27), Eric (30.49), Isabella (24.1), Molly (88.94), Avery (74.27), Sammy (40.1), Natsuki (75.52) and Will (75.35)\n\nEvaluation of Solution ¬ß\nThe solution above works alright for short distances, but slightly breaks apart the further you have to go. This is because humans in the real world have to walk across set designated pathways that the algorithm is not aware of, which is simply calculating the direct distance, which could be walking directly through houses or shopping centres. As such, the distances and times taken for walking are very much approximations in this model that could be further refined by a path finding algorithm that has an awareness of roads and pathways, but as that is an immense amount of data, this approximation will have to suffice for the purposes of this SAT.\nFare Cost Calculation Algorithm ¬ß\nAs well as the time taken to pick up all my friends, it would be useful for the algorithm to tell me how much the trip costs in ride fairs. PTV uses a ‚Äúzoning system‚Äù that charges different for the zones you are in. It also charges a set rate for under 2 hours of travel, and a seperate ‚Äúdaily rate‚Äù for any more than that:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 hourZone 1 + 2Zone 2Full Fare$4.60$3.10Concession$2.30$1.55\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDailyZone 1 + 2Zone 2Full Fare$9.20$6.20Concession$4.60$3.10\nThere are also caps on public holidays and weekends set to 6.70forfull‚àífareusersand3.35 to concession users. Zone 0 can be used to denote the free zone as well, or transport methods such as walking or cycling that have no associated cost.\nThis can be setup into the following conditional statements in pseudocode to calculate fare prices:\nfunction calculate_prices (\n\tline_data: dictionary,\n\thamiltonian_path: dictionary,\n\tconcession: boolean,\n\tholiday: boolean\n):\n\tzones: set = {}\n\t// add all traversed zones into a set to see which zones were visited\n\tfor node in hamiltonian_path[&#039;path&#039;]:\n\t\tzones.add(line_data[node[&#039;line&#039;]][&#039;zone&#039;])\n\t\t\n\tmoney = 0\n\t\n\t// if it took us 2 hours or less\n\tif hamiltonian_path[&#039;time&#039;] &lt;= 120:\n\t\t// 2 hour bracket\n\t\tif zones has 1 and 2:\n\t\t\tif concession:\n\t\t\t\tmoney = 2.30\n\t\t\telse:\n\t\t\t\tmoney = 4.60\n\t\telse if zones has 2:\n\t\t\t// just zone 2\n\t\t\tif concession:\n\t\t\t\tmoney = 1.55\n\t\t\telse:\n\t\t\t\tmoney = 3.10\n\telse:\n\t\t// daily fare bracket\n\t\tif zones has 1 and 2:\n\t\t\tif concession:\n\t\t\t\tmoney = 4.60\n\t\t\telse:\n\t\t\t\tmoney = 9.20\n\t\telse if zones has 2:\n\t\t\t// just zone 2\n\t\t\tif concession:\n\t\t\t\tmoney = 3.10\n\t\t\telse:\n\t\t\t\tmoney = 6.20\n\t\n\t// if it is a weekend or a holiday\t\t\t\n\tif holiday:\n\t\tif concession and money &gt; 3.35:\n\t\t\tmoney = 3.35\n\t\telse if money &gt; 6.70:\n\t\t\tmoney = 6.70\n\t\n\treturn money\nend function\n\nHeld-Karp Algorithm ¬ß\nThe Held-Karp algorithm is a method for finding the exact shortest hamiltonian circuit in the exponential time complexity of O(n22n), which is much better than if we to brute force it, which would have a complexity of O(n!).\nThe Travelling Salesman problem does not allow us to be greedy, because for us to choose the best choice at any moment, we have to be able to discard all other solutions. TSP is too complex for this, as going down any node may lead to a shorter solution later on. Because of this, solving for the TSP has to use the decrease and conquer principle to make our problem smaller piece by piece, which can be done by recursion or using dynamic programming if the results of operations are saved.\nHeld-Karp works by utilising the the following information.\nLet A= starting vertex\nLet B= ending vertex\nLet S={P,Q,R} or any other vertices to be visited along the way.\nLet C‚ààS (random node in S)\nWe ‚à¥ know that the minimum cost of going from A to B while visiting all nodes in the set S can be split up into the following two parts:\n\nGoing from A to C (a random node in S) while visiting all nodes in the set S besides C\nGoing from C to B directly\nEssentially, this goes through the set S and makes any node C the last node, giving us the same problem with a smaller set. This then allows us to identify that the problem is recursive, as the larger path can be split up into smaller and smaller sub-paths by the above logic, until we reach a base case of S having length 0, where we can then just calculate the direct distance.\n\nTo reiterate more formally: Costmin‚Äã¬†A‚ÜíB¬†whilst¬†visiting¬†all¬†nodes¬†in¬†S = min(Cost¬†A‚ÜíC¬†visiting¬†everything¬†else¬†in¬†S+dCB‚Äã). As such, we can find the smallest cost hamiltonian path by gradually building larger and larger subpaths from the minimum cost to the next node in S, using dynamic programming to combine the subpaths to form the larger hamiltonian path.\nThis logic leads to the following pseudocode:\nfunction held_karp (\n    start: node,\n    end: node,\n    visit: set&lt;node&gt;\n):\n\t// base case: if no visit set then we can just return direct distance\n    if visit.size = 0:\n        return dist(start, end)\n    else:\n        min = infinity\n        // find the minimum subpath\n        For node C in set S:\n\t        // uses property described above to split larger path into smaller subpath, and solves recursively\n\t        sub_path = held_carp(start, C, (set \\ C))\n\t        cost = sub_path + dist(C, end)\n\t        if cost &lt; min:\n\t            min = cost\n\t    return min\nend function\n\nAfter being implemented in Python (with a slight modification to return the path as well), this pseudocode looks like this:\ndef held_karp(start, end, visit):\n    if type(visit) is not set:\n        print(&quot;Error: visit must be a set of nodes&quot;)\n        return {&#039;cost&#039;: float(&#039;inf&#039;), &#039;path&#039;: None}\n    if len(visit) == 0:\n        return {&#039;cost&#039;: dist(start, end), &#039;path&#039;: [start, end]}\n    else:\n        minimum = {&#039;cost&#039;: float(&#039;inf&#039;)}\n        for rand_node in visit:\n            sub_path = held_karp(start, rand_node, visit.difference({rand_node}))\n            cost = dist(rand_node, end) + sub_path[&#039;cost&#039;]\n            if cost &lt; minimum[&#039;cost&#039;]:\n                minimum = {&#039;cost&#039;: cost, &#039;path&#039;: sub_path[&#039;path&#039;] + [end]}\n        return minimum\nThe Infinite Distance Problem ¬ß\nThe problem with this implementation is that it currently only works with complete graphs, where the distance between any two given nodes will not be infinity. This becomes clear if we try and find the cost of going from Oakleigh to Melbourne Central while visiting Caulfield along the way. The pseudocode would choose Caulfield as the value for C, as it is the only node in the set. The issue is at line 12, as the algorithm would try and get the distance between Caulfield and Melbourne Central, but as there is no edge between these two nodes, it will return ‚àû.\nThis can be solved by using Dijkstra‚Äôs Algorithm, instead of the dist function, which will instead find the shortest path (and ‚à¥ distance) between any two given nodes. (the justification of this specific algorithm selection is evaluated and challenged here)\nAfter this modification, our hybrid algorithm works great!\nLet&#039;s say I have 5 friends, they live closest to the following nodes: Caulfield, Mount Waverley, Glen Waverley, Melbourne Central and Chadstone\n\nThe following would be the fastest path to go from my house (Brandon Park) to all my friends&#039; and back:\n\n{&#039;cost&#039;: 182, &#039;path&#039;: [&#039;Brandon Park&#039;, &#039;Wheelers Hill Library&#039;, &#039;CGS WH&#039;, &#039;Glen Waverley&#039;, &#039;Mount Waverley&#039;, &#039;Richmond&#039;, &#039;Parliament&#039;, &#039;Melbourne Central&#039;, &#039;Flinders Street&#039;, &#039;Caulfield&#039;, &#039;Chadstone&#039;, &#039;Oakleigh&#039;, &#039;Brandon Park&#039;]}\n\nDijkstra‚Äôs Algorithm ¬ß\nDijkstra‚Äôs Algorithm is a method for finding the shortest path between any two given nodes in a weighted graph, given that the weights are non-negative. If some of the weights were negative, the Bellman-Ford Algorithm could also be used to find the shortest path between two vertices, but as this is not the case for our model (a method of transport cannot take you negative time to get somewhere), Dijkstra‚Äôs Algorithm is preferred for simplicity.\nDijkstra‚Äôs Algorithm is a greedy algorithm, which actually finds the distance between a node and every other node on the graph. It does this based on the notion that if there were a shorter path than any sub-path, it would replace that sub-path to make the whole path shorter. More simply, shortest paths must be composed of shortest paths, which allows Dijkstra‚Äôs to be greedy, always selecting the shortest path from ‚Äúvisited‚Äù nodes, using the principle of relaxation to gradually replace estimates with more accurate values.\nDijkstra‚Äôs Algorithm follows the logic outlined by the following pseudocode:\nfunction dijkstras (\n    start: node,\n    end: node,\n    graph: graph\n):\n    // Set all node distance to infinity\n    for node in graph:\n        distance[node] = infinity\n        predecessor[node] = null\n        unexplored_list.add(node)\n    \n    // starting distance has to be 0\n    distance[start] = 0\n    \n    // while more to still explore\n    while unexplored_list is not empty:\n        min_node = unexplored node with min cost\n        unexplored_list.remove(min_node)\n    \n\t    // go through every neighbour and relax\n        for each neighbour of min_node:\n            current_dist = distance[min_node] + dist(min_node, neighbour)\n            // a shorter path has been found to the neighbour -&gt; relax value\n            if current_dist &lt; distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n    \n    return distance[end]\nend function\n\nAfter being implemented in Python (with a slight modification to return the path as well), the pseudocode looks like this:\ndef dijkstra(start, end):\n    # set all nodes to infinity with no predecessor\n    distance = {node: float(&#039;inf&#039;) for node in g.nodes()}\n    predecessor = {node: None for node in g.nodes()}\n    unexplored = list(g.nodes())\n \n    distance[start] = 0\n \n    while len(unexplored) &gt; 0:\n        min_node = min(unexplored, key=lambda node: distance[node])\n        unexplored.remove(min_node)\n \n        for neighbour in g.neighbors(min_node):\n            current_dist = distance[min_node] + dist(min_node, neighbour)\n            # a shorter path has been found to the neighbour -&gt; relax value\n            if current_dist &lt; distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n \n    # reconstructs the path\n    path = [end]\n    while path[0] != start:\n        path.insert(0, predecessor[path[0]])\n \n    return {&#039;cost&#039;: distance[end], &#039;path&#039;: path}\nConsidering Train/Bus Arrival Times &amp; Switching Lines ¬ß\nEvidently, trains do not leave immediately when you get to the station, and neither do buses. The algorithm thus far assumes no waiting time during transit, and as anyone who has used public transport would know, this is not realistic.\nAs such, the arrival time of trains and buses needs to be considered. This also has the added benefit of factoring in the time it takes to switch lines, as this time is lost waiting for another train or bus.\nAll the algorithms above eventually call the dist function to get the direct distance between two nodes, which in and of itself is an abstraction of a distance matrix. By taking the input of the current time, the dist function can consider how long one must wait for a bus/train to arrive at the node, and modify the edge weights according, returning a larger cost for edges that require long wait times.\nThe following dist function takes the above into consideration:\nfunction dist (\n\tstart: node,\n\tend: node,\n\tcurrent_time: datetime\n):\t\n\t// if the start and end node are the same, it takes no time to get there\n\tif start = end:\n\t\treturn 0\n\telse if edges = null:\n\t\t// if no edge exists between nodes\n\t\treturn infinity\n\t\n\tedges = edge_lookup_matrix[start][end]\n\tdistances = []\n\t\n\t// go over each possible edge between nodes (multiple possible)\n\tfor edge in edges:\n\t\tline = edge.line\n\t\t// next time bus/train will be at node (functional abstraction)\n\t\tnext_time = soonest_time_at_node(timetable, line, start, current_time)\n\t\twait_time = next_time - current_time\n\t\tdistances.add(edge.weight + wait_time)\n\t\n\treturn min(distances)\nend function\n\nAfter implementing this function, an additional problem is introduced: how can the algorithms that are dependant on dist be aware of the current time?\nImplementing Current Time in Dijkstra‚Äôs ¬ß\nThe process for keeping track of the current time for Dijkstra‚Äôs is relatively simple: it will just be the given time of day inputed into Dijkstra‚Äôs + n amount of minutes, where n is the distance to the min_node. As such line 19 from the pseudocode above simply needs to be changed to the following, along with a new input of current_time\ncurrent_dist = distance[min_node] + dist(min_node, neighbour, current_time + to_minutes(distance[min_node]))\n\nThis works because distance in our algorithm is analogous to minutes, and since the dist function returns the correct distance initially and stores it into the distance array, subsequent calls will be using the correct distance from distance[min_node] along with the correct distance from the dist function. This informal argument by mathematical induction demonstrates the correctness of this modification, which seems to work well when tested within the algorithm.\nImplementing Current Time in Held-Karp ¬ß\nFactoring in the current time into Held-Karp follows the same recursive nature as the algorithm itself. First we can change the base case to work with the new Dijkstra‚Äôs Algorithm outlined above:\nif visit.size = 0:\n\tdjk = dijkstras(start, end, current_time)\n\treturn djk[&#039;cost&#039;]\n\nNow that our base case is returning a cost with the current time factored in, we need to make the sub path on line 11 of the original algorithm also factor in the current time. The current time when the sub_path is created will always be the current time at the start node, which we defined as the time inputed into Held-Karp at initialisation. As such, the line is changed to the following:\nsub_path = held_carp(start, C, (set \\ C), current_time)\n\nFinally, the only other change needs to be made on line 12. Previously, we replaced the dist function here with dijkstras to solve the Infinite Distance Problem, but Dijkstra‚Äôs also requires the input of time. As the starting node here is C, or the randomly selected node, the current time for this function call would have to be the time when we are at C. This can simply be found by treating the distance of sub_path as minutes which are added to the current time, as the sub_path ends at the same random node C. As such, line 12 can be changed to the following:\ndjk = dijkstras(C, end, current_time + toMinutes(sub_path[&#039;cost&#039;]))\ncost = sub_path[&#039;cost&#039;] + djk[&#039;cost&#039;]\n\nThis leaves us with the a sound implementation of Held-Karp factoring in time, demonstrated by the following pseudocode:\nfunction held_karp (\n    start: node,\n    end: node,\n    visit: set&lt;node&gt;,\n    current_time: datetime\n):\n    if visit.size = 0:\n    \tdjk = dijkstras(start, end, current_time)\n\t\treturn djk[&#039;cost&#039;]\n    else:\n        min = infinity\n        For node C in set S:\n\t        sub_path = held_carp(start, C, (set \\ C), current_time)\n\t        djk = dijkstras(C, end, current_time + toMinutes(sub_path[&#039;cost&#039;]))\n\t        cost = sub_path[&#039;cost&#039;] + djk[&#039;cost&#039;]\n\t        if cost &lt; min:\n\t            min = cost\n\t    return min\nend function\n\nThis works because of a similar principle to the informal argument for the modified Dijkstra‚Äôs correctness: it works for the base case (because Dijkstra‚Äôs works), and it also must work for the k+1 case, because the time being inputed into the functions is always the time at the starting nodes. It then ‚à¥ works for all cases, which seems to also be true when used in practice.\nDijkstra‚Äôs Algorithm vs Floyd Warshall‚Äôs Shortest Path Algorithm ¬ß\nThe problem that using Dijkstra‚Äôs was attempting to solve was that Held-Karp treats the distance between two unconnected vertices as ‚àû, as demonstrated here.\nThere are 3 main shortest path algorithms covered in Unit 3:\n\nDijkstra‚Äôs Algorithm:\n\nShortest path from one node to all nodes\nNegative edges not allowed\nReturns both path and cost\n\n\nBellman-Ford Algorithm:\n\nShortest path from one node to all nodes\nNegative edges allowed\nReturns both path and cost\n\n\nFloyd-Warshall‚Äôs Shortest Path Algorithm:\n\nShortest path between all pairs of vertices\nNegative edges allowed\nReturns only cost\n\n\n\nAs we can see, to be able to output the traversal path, we need both the cost and the path, so Floyd-Warshall‚Äôs was initially discarded because it did not do so, even if it meant that the less desirable solution of running Dijkstra‚Äôs from every source node had to be used, calculating the shortest path to every other node each time.\nThe most optimal solution would be an algorithm that returns both the cost and the traversal order of the shortest path between all pairs of vertices, as this operation is carried out many times by Held-Karp.\nImplementing Floyd-Warshall‚Äôs Shortest Path with the modification of a predecessor matrix (similar to Bellman-Ford and Dijkstra‚Äôs) was attempted, but this requires additional recursive computation to reconstruct the path, making it not ideal in terms of efficiency.\nAn alternative solution, Johnson‚Äôs Algorithm, is one that gives us the exact output we want: the shortest path and cost between all vertex pairs. The algorithm works by first running Bellman-Ford to account for negative edge weights (not a problem for this SAT) and then runs Dijkstra‚Äôs from every source node to construct a matrix and paths for each. Surprisingly, this algorithm is comparable to the efficiency of running just normal Floyd-Warshall‚Äôs, and can even be faster in some cases.\nAs such, the only modification that needs to be made is that instead of calling Dijkstra‚Äôs every time a vertex pair distance and path is needed, the whole distance matrix can be constructed at once, so subsequent calls only take O(1) time instead. This can be achieved using dynamic programming, by caching the output of Dijkstra‚Äôs whenever it is invoked, so we are only running the algorithm as many times as we need to.\nOptimisations ¬ß\nThe optimisations below were created after the following base case:\nLet&#039;s say I have 9 friends, they live closest to the following nodes: {&#039;Mount Waverley&#039;, &#039;Melbourne Central&#039;, &#039;Chadstone&#039;, &#039;CGS WH&#039;, &#039;Parliament&#039;, &#039;Wheelers Hill Library&#039;, &#039;Flinders Street&#039;, &#039;Brighton Beach&#039;, &#039;Camberwell&#039;}\nThe following would be the fastest path to go from my house (Brandon Park) to all my friends&#039; and back:\n{&#039;cost&#039;: 262, &#039;path&#039;: [&#039;Brandon Park&#039;, &#039;Wheelers Hill Library&#039;, &#039;CGS WH&#039;, &#039;Glen Waverley&#039;, &#039;Mount Waverley&#039;, &#039;Richmond&#039;, &#039;Camberwell&#039;, &#039;Richmond&#039;, &#039;Parliament&#039;, &#039;Melbourne Central&#039;, &#039;Flinders Street&#039;, &#039;Brighton Beach&#039;, &#039;Flinders Street&#039;, &#039;Caulfield&#039;, &#039;Chadstone&#039;, &#039;Oakleigh&#039;, &#039;Brandon Park&#039;]}\n\nIt took 47.3621 seconds to run.\n\nAs seen, running the above Held-Karp + Dijkstra‚Äôs combination took about 50 seconds to calculate the minimal cost path for 9 nodes. The following is a table for n¬†vs¬†t, with an approximate line of best fit of y‚âàa√óbx where a=8.1017√ó10‚àí8 and b=9.3505:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn (no. nodes)t (execution time in seconds, 4dp)y (line of best fit, 4dp)00.00010.000010.00020.000020.00020.000030.00160.000140.00830.000650.01320.005860.10900.054170.56740.506384.71934.7343944.268844.2680\nAnything above 7 nodes takes far too long, and calculating the entire hamiltonian circuit would take 5 weeks 1 day 14 hours 56 mins and 39 secs based on the line of best fit, so the following optimisations have been utilised.\nCaching Dijkstra‚Äôs Output ¬ß\nWhen replacing the dist function with Dijkstra‚Äôs Algorithm, a certain time compromise was made. dist has a time complexity of O(1), simply fetching the distance from the distance matrix, but Dijkstra‚Äôs Algorithm is relatively slower at O(ElogV) where E is the number of edges and V the number of vertices. For our sample graph above, with E=27 and V=15, O(ElogV)‚âà31.75. This makes using Dijkstra‚Äôs roughly 31 times slower than dist as it is called every time.\nTo avoid this, we can cache the results of Dijkstra‚Äôs Algorithm to avoid running the same calculation multiple times. This can be done with the following pseudocode:\ncached_djk = dictionary of node -&gt; dict\n\nfunction fetch_djk (\n    start: node,\n    end: node,\n):\n    if cached_djk[start] does not exists:\n        cached_djk[start] = dijkstras(start)\n    \n    djk = cached_djk[start]\n    # reconstructs the path  \n    path = [end] as queue\n    while path.back != start:\n        path.enqueue(djk[&#039;predecessors&#039;][path.back])\n    \n    return {\n        &#039;distance&#039;: djk[&#039;distances&#039;][end],\n        &#039;path&#039;: path\n    }\nend function\n\nIn this case, dijkstras would need to be modified to return the distance and predecessor rather than just distance[end].\nAfter being implemented in Python, cached_djk resembles the following:\ndef fetch_djk(start, end):\n    if start not in cached_djk:\n        cached_djk[start] = dijkstra(start)\n \n    djk = cached_djk[start]\n    # reconstructs the path\n    path = [end]\n    while path[0] != start:\n        path.insert(0, djk[&#039;predecessors&#039;][path[0]])\n \n    return {&#039;cost&#039;: djk[&#039;distances&#039;][end], &#039;path&#039;: path}\nUpdate: Caching After Timetable Considerations ¬ß\nThe above pseudocode for fetch_djk breaks once considerations of train/bus arrival times are added, because for example, the time it takes to travel from Glen Waverley to Melbourne Central at 7am is not necessarily the same as the same trip at 9pm. Above, the cached_djk dictionary only takes the starting node into consideration, so the pseudocode has to be modified to the following to us an ‚Äòid‚Äô like system for the paths.\ncached_djk = dictionary of node -&gt; dict\n\nfunction fetch_djk (\n    start: node,\n    end: node,\n    current_time: datetime,\n):\n\tname = start + &#039;@&#039; + current_time\n\t\n    if cached_djk[name] does not exists:\n        cached_djk[name] = dijkstras(start)\n    \n    djk = cached_djk[name]\n    # reconstructs the path  \n    path = [end] as queue\n    while path.back != start:\n        path.enqueue(djk[&#039;predecessors&#039;][path.back])\n    \n    return {\n        &#039;distance&#039;: djk[&#039;distances&#039;][end],\n        &#039;path&#039;: path\n    }\nend function\n\nAs such we can have a more specific key in our dictionary. This does have the disadvantage of having less reusable paths (running at 7 nodes was about 4 times slower than below), but at least the result isn‚Äôt nondeterministic!\nPerformance Improvement ¬ß\nAs expected by the theoretical time savings calculated above, this optimisation makes Held-Karp roughly 31 times faster. The base case from above, which took 44 - 47 seconds before the optimisation now only takes about 1.25 seconds.\nLet&#039;s say I have 9 friends, they live closest to the following nodes: {&#039;Parliament&#039;, &#039;Melbourne Central&#039;, &#039;Chadstone&#039;, &#039;Camberwell&#039;, &#039;Flinders Street&#039;, &#039;Brighton Beach&#039;, &#039;Mount Waverley&#039;, &#039;CGS WH&#039;, &#039;Wheelers Hill Library&#039;}\nThe following would be the fastest path to go from my house (Brandon Park) to all my friends&#039; and back:\n{&#039;cost&#039;: 262, &#039;path&#039;: [&#039;Brandon Park&#039;, &#039;Wheelers Hill Library&#039;, &#039;CGS WH&#039;, &#039;Glen Waverley&#039;, &#039;Mount Waverley&#039;, &#039;Richmond&#039;, &#039;Camberwell&#039;, &#039;Richmond&#039;, &#039;Parliament&#039;, &#039;Melbourne Central&#039;, &#039;Flinders Street&#039;, &#039;Brighton Beach&#039;, &#039;Flinders Street&#039;, &#039;Caulfield&#039;, &#039;Chadstone&#039;, &#039;Oakleigh&#039;, &#039;Brandon Park&#039;]}\n\nIt took 1.2799 seconds to run.\n\nThe n¬†vs¬†t table now looks like this, with an approximate line of best fit of y‚âàa√óbx where a=1.4002√ó10‚àí9 and b=10.1876:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn (no. nodes)t (execution time in seconds, 4dp)y (line of best fit, 4dp)00.00010.000010.00010.000020.00010.000030.00010.000040.00010.000050.00050.000260.00600.001670.02870.015980.21480.162591.60551.65511017.455516.862011171.6719171.7832121750.10651750.0590\nWe can see that this line of best fit is relatively accurate, and if we extend it to run for 14 nodes (our hamiltonian circuit), it would take a total of about 2 days 2 hours 27 mins and 14 secs to compute it all.\nJustification of Solution ¬ß\nThroughout this report, each individual algorithm has been challenged and justified for it‚Äôs suitability and effectiveness at solving their individual problems. To evaluate the overall suitability of the combined algorithms, we can refer back to our original problem:\n\nI‚Äôve been finding it hard to plan hangouts with my friends, and I want a solution that will plan a trip using the Victorian public transport network so that can find the quickest route to pick up all of my friends and we can all come back to my house.\n\nIn reality, this is a relatively niche use case, as most friends could just travel on their own, but given that I want to pick up all my friends along the way, this solution its suitability and fitness for purpose well.\nBelow is the output of the solution when I (Garv, with a concession card) leave my house at 8:30am , on a Saturday:\nI have 18 friends and they live closest to the following 7 nodes:\nGrace lives 3.317km from Caulfield\nSophie lives 10.094km from Camberwell\nZimo lives 1.046km from CGS WH\nEmma lives 2.317km from Wheelers Hill Library\nSabrina lives 1.036km from CGS WH\nAudrey lives 6.993km from CGS WH\nEric lives 2.592km from Glen Waverley\nIsabella lives 2.048km from CGS WH\nJosh lives 0.657km from CGS WH\nMolly lives 7.56km from Wheelers Hill Library\nAvery lives 6.313km from Mount Waverley\nSammy lives 3.409km from Brandon Park\nNatsuki lives 6.419km from CGS WH\nLiam lives 0.808km from Mount Waverley\nNick lives 1.37km from Glen Waverley\nWill lives 6.405km from Wheelers Hill Library\nBella lives 0.716km from Wheelers Hill Library\nYou (Garv) live 0.432km from Brandon Park\n\nWarning! These 11 friends have to walk more than 20 minutes in order to get to their transport hub. Possibly consider adding hubs closer to their houses:  Grace (39.03), Sophie (118.75), Emma (27.26), Audrey (82.27), Eric (30.49), Isabella (24.1), Molly (88.94), Avery (74.27), Sammy (40.1), Natsuki (75.52) and Will (75.35)\n\nThe trip would cost you $3.35 and would take you 266.17 minutes, taking the following route: \nFrom Brandon Park (Garv, Sammy) to Wheelers Hill Library (Emma, Molly, Will, Bella) to CGS WH (Zimo, Sabrina, Audrey, Isabella, Josh, Natsuki) to Glen Waverley (Eric, Nick) to Mount Waverley (Avery, Liam) to Richmond to Flinders Street to Caulfield (Grace) to Flinders Street to Richmond to Camberwell (Sophie) to Richmond to Oakleigh and back to Brandon Park.\n\nIt took 0.8578 seconds to run.\n\nThe correctness of this being the quickest route was presented as informal arguments via mathematical induction throughout the report, relying on modifications to the Held-Karp Algorithm to model features of the real world scenario and provide us with an answer to our problem. As can be seen above, the solution suitably provides the fastest route, which friends will be picked up at which nodes, the time it would take for the traversal to occur and the overall cost of the trip. This satisfactorily answers the initial problem and is fit for the purpose of planning real life trips that would involve picking up all my friends to visit my house.\nFinal Code ¬ß\nThe final Python implementation of the code can be found here on Trinket. Below is the final main thread in structured pseudocode that invokes all the modules described throughout the report.\nfunction main(\n\tfriends: dictionary,\n\tlandmarks: dictionary,\n\troutes: dictionary,\n\ttimetable: dictionary\n):\n\t// global variable declarations\n\tconcession: bool = Ask the user &quot;Do you posses a concession card?&quot;\n\tholiday: bool = Ask the user &quot;Is today a weekend or a holiday?&quot;\n\tuser_name: string = Ask the user to select a friend from friends dictionary\n\tselected_time = Ask the user what time they are leaving\n\t\n\tcached_djk: dictionary = empty dictionary\n\tedge_lookup_matrix: matrix = |V| x |V| matrix that stores a list of edges in each entry\n\t\n\t// get distance of all friends from landmarks\n\tfriend_distances: dictionary = calculate_nodes(friends, landmarks)\n\tvisit_set: set = set of all closest nodes from friend_distances\n\tpeople_at_nodes: dictionary = all friends sorted into keys of which nodes they are closest to, from visit_set\n\t\n\thome: string = closest node of user_name\n\t\n\tprint all friends, where they live closest to and how far away\n\t\n\tprint out friends that would take more than 20 minutes to walk (average human walking speed is 5.1 km/h)\n\t\n\thamiltonian_path = held_karp(home, home, visit_set, selected_time)\n\t\n\tprint how much the trip would cost and how long it would take\n\t\n\tprint the path of the hamiltonian_path\nend function\n"},"notes/School-Subjects/Algorithmics/SAT/Modified-Held-Karp-Time-Complexity-Analysis":{"title":"Modified Held-Karp Time Complexity Analysis","links":[],"tags":[],"content":"Modified Held-Karp Time Complexity ¬ß\nNow that we have an established cost function, we can attempt to evaluate Tn‚Äã in terms of d(n). To reiterate:\nTn‚Äã={n(Tn‚àí1‚Äã+d(n))d(n)‚Äãn&gt;0n=0‚Äã\nd(n)=2LR+21‚ÄãL3+21‚ÄãL2+L\nKeeping this in terms of d(n), we can create a table to see how this recurrence relation gets bigger as n increases.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnTn‚Äã0d(n)12d(n)26d(n)321d(n)488d(n)5445d(n)\nThe working for this table is shown below, but you can easily keep going to follow the pattern for higher values of n:\nn=0: Tn‚Äã=d(n)\nn=1: Tn‚Äã=1(T0‚Äã+d(n))=2d(n)\nn=2: Tn‚Äã=2(T1‚Äã+d(n))=6d(n)\nn=3: Tn‚Äã=3(T2‚Äã+d(n))=21d(n)\nn=4: Tn‚Äã=4(T3‚Äã+d(n))=88d(n)\nn=5: Tn‚Äã=5(T4‚Äã+d(n))=445d(n)\nRecurrence Relation ¬ß\nJust looking at the coefficients for a second, we have the following recurrence relation:\nTn‚Äã=n(Tn‚àí1‚Äã+1),¬†T0‚Äã=1\nIt is easy to see that this recurrence relation implies that the running time for the algorithm is factorial. After all, the recurrence relation for n! is Tn‚Äã=n(Tn‚àí1‚Äã),¬†T0‚Äã=1.\nAttempting to Find an Explicit Formula ¬ß\nNow clearly it is of interest to solve this recurrence relation and find a non-recursive formula, and here we run into a bit of an issue. If the relation were a linear recurrence with constant coefficients or a typical divide-and conquer recurrence, it would likely be solvable by well-known methods such as telescoping or the Master Theorem, but this is not the case.\nTheorem 1 ¬ß\nWhile trying to find a way to solve this recurrence relation, I arrived at the conjecture that Tn‚Äã=n!+‚àëi=0n‚àí1‚Äãi!n!‚Äã, so let us try to prove it.\n\nFor n‚ààN, the number of operations used to solve an n-sized visit set TSP by the above algorithm (ignoring the cost function) satisfied the formula: Tn‚Äã=n!+‚àëi=0n‚àí1‚Äãi!n!‚Äã.\n\nFirst let us work with the RHS to rearrange it a bit into a more convenient form:\nRHS\n=n!+‚àëi=0n‚àí1‚Äãi!n!‚Äã\n=n!+0!n!‚Äã+1!n!‚Äã+2!n!‚Äã+‚ãØ+(n‚àí2)!n!‚Äã+(n‚àí1)!n!‚Äã\n=n!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(n‚àí2)!1‚Äã+(n‚àí1)!1‚Äã)\nBase Case ¬ß\nWhen n=0, the base case of the recurrence relation says that T0‚Äã=1. The above formula matches that with T0‚Äã=0!√ó(1+0)=1, ‚à¥ base case is true.\nInduction Step ¬ß\nPick an arbitrary k‚ààN. Assume that the theorem holds for any TSP with a visit set of size k. Thus, it is assumed that Tk‚Äã=k!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã).\nProof by induction requires showing the following:\nTk+1‚Äã=(k+1)!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí1)!1‚Äã+k!1‚Äã).\nNext, we can combine the recurrence above with the induction hypothesis as follows:\nLHS\n=Tk+1‚Äã\n=Tk‚Äã(k+1)+(k+1) (from recurrence relation)\n=[k!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã)](k+1)+(k+1)\n=(k+1)!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã)+(k+1)\n=(k+1)!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã)+(k+1)√ó(k+1)!(k+1)!‚Äã\n=(k+1)!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã+(k+1)!k+1‚Äã)\n=(k+1)!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã+k!1‚Äã)\n=RHS\nThus Tn‚Äã=n!+‚àëi=0n‚àí1‚Äãi!n!‚Äã by the principle of mathematical induction.\nTheorem 2 ¬ß\nLooking all over the web for this, the only place I could find any reference to this sequence is here, which provides us with the relation Tn‚Äã=n!+‚åäe√ón!‚åã‚àí1 for the coefficients. This can be rearranged to Tn‚Äã=‚åän!(e+1)‚àí1‚åã, but just to be sure that this works for every case, we should probably prove it too.\n\nFor n‚ààZ+, the number of operations used to solve an n-sized visit set TSP by the above algorithm (ignoring the cost function) satisfied the formula: Tn‚Äã=‚åän!(e+1)‚àí1‚åã.\n\nCase 1 ¬ß\nThis is the case where n=1. As seen above, T1‚Äã=2 and the proposed formula predicts that T1‚Äã=‚åä1!(e+1)‚àí1‚åã=‚åäe+1‚àí1‚åã=‚åäe‚åã=2. Thus, the base case holds.\nCase 2 ¬ß\nThis is the case where n&gt;1. Because of the floor function, if it can be shown that the following difference is small enough, it will probably be possible to prove that this case works as well.\nLet¬†¬†rn‚Äã=n!(e+1)‚àí1‚àíTn‚Äã\nLemma 1 ¬ß\n\nWhen n&gt;1, the following must be true: rn‚Äã=n+11‚Äã+(n+1)(n+2)1‚Äã+(n+1)(n+2)(n+3)1‚Äã+‚ãØ\n\nThis sum looks like it might be related to the power series for ex at x=1. We already know the power series for ex, a proof for which can be found here:\nex=0!1‚Äã+1!x‚Äã+2!x2‚Äã+3!x3‚Äã+‚ãØ\nIt therefore follows that:\ne=e1=0!1‚Äã+1!1‚Äã+2!1‚Äã+3!1‚Äã+‚ãØ\nSince we know that Tn‚Äã=n!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(n‚àí2)!1‚Äã+(n‚àí1)!1‚Äã) from the first theorem, we can sub both the power series for e and this fact into our definition of rn‚Äã:\nrn‚Äã\n=n!(e+1)‚àí1‚àíTn‚Äã (by definition)\n=n!(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ)‚àí1‚àíTn‚Äã (power series for e)\n=n!(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ)‚àí1‚àín!√ó(1+0!1‚Äã+1!1‚Äã+‚ãØ+(n‚àí2)!1‚Äã+(n‚àí1)!1‚Äã)\n=n!√ó(n!1‚Äã+(n+1)!1‚Äã+(n+2)!1‚Äã+‚ãØ)‚àí1\n=(1+n+11‚Äã+(n+1)(n+2)1‚Äã+‚ãØ)‚àí1\n=n+11‚Äã+(n+1)(n+2)1‚Äã+(n+1)(n+2)(n+3)1‚Äã+‚ãØ\n‚à¥ The lemma is true.\nLemma 2 ¬ß\n\nWhen n&gt;1, it is true that rn‚Äã&lt;n+11‚Äã+(n+1)21‚Äã+(n+1)31‚Äã+‚ãØ=n1‚Äã\n\nThis is easily proven using the first lemma:\nrn‚Äã\n=n+11‚Äã+(n+1)(n+2)1‚Äã+(n+1)(n+2)(n+3)1‚Äã+‚ãØ (Lemma 1)\n&lt;n+11‚Äã+(n+1)(n+1)1‚Äã+(n+1)(n+1)(n+1)1‚Äã+‚ãØ\n=n+11‚Äã+(n+1)21‚Äã+(n+1)31‚Äã+‚ãØ\nThis upper bound above is in the form of an infinite geometric series with ratio n+11‚Äã, so the usual formula of S‚àû‚Äã=1‚àíra‚Äã can be used: rn‚Äã&lt;1‚àín+11‚Äãn+11‚Äã‚Äã=n1‚Äã.\n‚à¥ The lemma is true.\nLemma 3 ¬ß\n\nIf n&gt;1, 0&lt;rn‚Äã&lt;1 must hold true.\n\nFrom Lemma 1, it is clear that rn‚Äã is positive ‚à¥0&lt;rn‚Äã.\nThen, by Lemma 2, the following must hold: rn‚Äã&lt;n1‚Äã‚â§21‚Äã&lt;1. ‚à¥rn‚Äã&lt;1.\n‚à¥ The lemma is true.\nConclusion ¬ß\nThus, the proof for this theorem is complete for the case n&gt;1:\nBy the definition of rn‚Äã, it must be true that Tn‚Äã+rn‚Äã=n!(e+1)‚àí1. Since the recurrence relation set up Tn‚Äã as integer and 0&lt;rn‚Äã&lt;1 by Lemma 3, it must hold that ‚åän!(e+1)‚àí1‚åã=‚åäTn‚Äã+rn‚Äã‚åã=Tn‚Äã.\nTime Complexity ¬ß\nNow that we have proved this works for the coefficients of the cost function, we have the formula of T(n)=d(n)‚åän!(e+1)‚àí1‚åã.The floor function here is just to deal with the difference of rn‚Äã so that we can get an integer output. Subbing in our known time complexity of d(n), we get a final Big O of O(‚åän!(e+1)‚åã(2LR+L3)) for the original implementation of our modified Held-Karp with no caching of its own Dijkstra‚Äôs outputs. Note that it should already have been obvious that the running time for this algorithm would be in factorial time from the recurrence relation itself, even before finding an explicit formula.\nWe have already verified that this is correct given that the recurrence relation is correct, but we can also do so by general intuition . If we look back at Part 1, we can get the time taken to run the unoptimised modified Held-Karp on our data with different n values. (2LR+L3) should be a constant for any particular predefined graph, meaning that if our Big O time complexity is correct then execution¬†time‚àù‚åän!(e+1)‚åã1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn‚åän!(e+1)‚åãexecution¬†time‚Äã53√ó10‚àí564√ó10‚àí573√ó10‚àí583√ó10‚àí593√ó10‚àí5\nAs we can see, this proportionality is fairly constant, so it would probably be safe to assume that the worst-case time complexity for the unoptimised modified Held-Karp algorithm would be O(‚åän!(e+1)‚åã(2LR+L3)), or at least something pretty close to it.\nFootnotes ¬ß\n\n\nNote that n&lt;5 would be rather unreliable due to the decimal inaccuracy of my recorded execution times (4dp) ‚Ü©\n\n\n"},"notes/School-Subjects/Algorithmics/SAT/Optimisations-(saved-for-Unit-4)":{"title":"Optimisations (saved for Unit 4)","links":[],"tags":[],"content":"Caching Held-Karp‚Äôs Output ¬ß\nThe same principle as above can be applied to the Held-Karp algorithm. Although it is a harder task to make Held-Karp iterative, the result of computations can be stored rather than calling held_karp every time. As above, this can be done with an intermediary function, fetch_hk which only runs held_karp if the value hasn‚Äôt already been stored.\nThe pseudocode for this process is relatively simple:\ncached_hk = dictionary of list -&gt; dict\n\nfunction fetch_hk (\n\tstart: node, \n\tend: node,\n\tvisit: set of nodes \n):\n\tif cached_hk[[start, end, visit]] does not exists:\n\t\tcached_hk[[start, end, visit]] = held_karp(start, end, visit)\n\treturn cached_hk[[start, end, visit]]\nend function\n\nAfter being implemented in Python, fetch_hk resembles the following:\ndef fetch_hk(start, end, visit):\n    key = frozenset([start, end, frozenset(visit)])\n    if key not in cached_hk:\n        cached_hk[key] = held_karp(start, end, visit)\n    return cached_hk[key]\nPerformance Improvement ¬ß\nThough this is a somewhat minor change, the improvements are drastic, with the entire hamiltonian circuit being calculated in less than a second. The n¬†vs¬†t table now looks like this, with an approximate line of best fit of y‚âàa√óbx where a=0.00000544325 and b=2.36503:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn (no. nodes)t (execution time in seconds, 4dp)y (line of best fit, 4dp)00.00010.000010.00010.000020.00010.000030.00010.000140.00010.000250.00020.000460.00050.001070.00120.002380.00300.005390.00810.0126100.02100.0298110.05200.0705120.20510.1667130.50610.3942140.82460.9323152.22842.2050\nEvidently this is significantly better, with Held-Karp at 12 nodes being about 8,533 times faster than without this optimisation. Across a couple tests, the b value of the line of best fit seems to hover around 2.1‚àí2.3, which indicates that we‚Äôre nearing the limits of our optimisations. The theoretical average time complexity of Held-Karp is O(2nn2), and it is unknown if any algorithm exists to solve TSP in a time complexity of less than base 2. As such, the closer we get to base 2, the more ‚Äúperfectly‚Äù we have optimised our algorithm, and as of now we‚Äôre pretty close.\n// this is saved code to be put back in later (optimisation)\n    cached_djk = {}\n    cached_hk = {}\n    \ndef fetch_djk(start, end):\n    &quot;&quot;&quot;\n    Fetches Dijkstra&#039;s Shortest Path Algorithm.\n \n    :param start: start node\n    :type start: str\n \n    :param end: end node\n    :type end: str\n \n    :return: The shortest distance between two nodes along with the path.\n    :rtype: dict[str, float | list[str]]\n    &quot;&quot;&quot;\n \n    global cached_djk\n    if start not in cached_djk:\n        cached_djk[start] = dijkstra(start)\n \n    djk = cached_djk[start]\n    # reconstructs the path\n    path = [end]\n    while path[0] != start:\n        path.insert(0, djk[&#039;predecessors&#039;][path[0]])\n \n    return {&#039;cost&#039;: djk[&#039;distances&#039;][end], &#039;path&#039;: path}\n \ndef fetch_hk(start, end, visit):\n    key = frozenset([start, end, frozenset(visit)])\n    if key not in cached_hk:\n        cached_hk[key] = held_karp(start, end, visit)\n    return cached_hk[key]\n    \ndef dijkstra(start):\n    &quot;&quot;&quot;\n    Dijkstra&#039;s Shortest Path Algorithm.\n \n    :param start: start node\n    :type start: str\n \n    :return: The distance dictionary and the predecessor dictionary.\n    :rtype: dict\n    &quot;&quot;&quot;\n \n    # set all nodes to infinity with no predecessor\n    distance = {node: float(&#039;inf&#039;) for node in g.nodes()}\n    predecessor = {node: None for node in g.nodes()}\n    unexplored = list(g.nodes())\n \n    distance[start] = 0\n \n    while len(unexplored) &gt; 0:\n        min_node = min(unexplored, key=lambda node: distance[node])\n        unexplored.remove(min_node)\n \n        for neighbour in g.neighbors(min_node):\n            current_dist = distance[min_node] + dist(min_node, neighbour)\n            # a shorter path has been found to the neighbour ‚à¥ relax value\n            if current_dist &lt; distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n \n    return {&#039;distances&#039;: distance, &#039;predecessors&#039;: predecessor}\npandoc &quot;Garv&#039;s SAT- Friendship Network.md&quot; -o &quot;Garv&#039;s SAT- Friendship Network.pdf&quot; --from markdown --toc --listings -H setup.tex\n"},"notes/School-Subjects/Algorithmics/SAT/Part-2/Algorithmics-SAT-Part-2":{"title":"Algorithmics SAT - Friendship Network Part 2","links":[],"tags":[],"content":"This section of the Algorithmics SAT focuses on a time complexity analysis of the solution in order to establish the efficiency of the algorithm and feasibility in the real world.\nThroughout the analysis, note the following variables are used as shorthand:\nLet F= number of friends\nLet L= number of landmarks\nLet R= number of routes\nTime Complexity Analysis ¬ß\nExpected Time Complexity ¬ß\nAs explained in Part 1 of the SAT, the algorithm in essence boils down to an applied version of the Held‚ÄìKarp algorithm, which has an optimal worst case time complexity of O(n22n). Hence, it would make sense for our combination of Held-Karp and Dijkstra‚Äôs to result in a time complexity slightly larger.\nCall Tree ¬ß\n\nAs we can see, the main function calls a few distinct processes 1:\n\n\nFirst it creates the edge lookup matrix, which is abstracted in the pseudocode. This Big O time is derived from the Pythonic implementation of the lookup matrix as follows 2:\nedge_lookup_matrix = {frozenset({edge[&#039;from&#039;], edge[&#039;to&#039;]}): [] for edge in edges}  \nfor edge in edges:  \n\tedge_lookup_matrix[frozenset({edge[&#039;from&#039;], edge[&#039;to&#039;]})].append(edge)\nEvidently, this loops over each edge in edges twice, resulting in a linear time complexity of O(2R)\n\n\nIt then calls calculate_nodes with an input of both friends and landmarks, the output of which is used to create our visit_set. This Big O time is derived from the fact that calculate_nodes is simply a nested for-loop, iterating over each friend and every landmark, resulting in a worst case time complexity of O(F√óL).\n\n\nIt now uses the output of calculate_nodes (stored as friend_distances) to create a set of nodes we need to visit, which is abstracted in the pseudocode. This Big O time is derived from the Pythonic implementation of the set as follows:\nvisit_set = set(val[&#039;closest_node&#039;] for key, val in friend_distances.items())\nEvidently, this loops over each friend once, resulting in a linear time complexity of O(F)\n\n\nSimilar to the above implementation, the main function now creates people_at_nodes to create a dictionary of nodes and which people are closest to that node, with a similar O(F) as above.\n\n\nVarious other print statements are called, all with O(F) time to display information about each friend.\n\n\nFinally, after all this prep is done, held_karp is called to find the shortest hamiltonian path of the graph.\n\n\nAs we can see from this process and the call tree above, there are 3 main elements that contribute to the time complexity of our algorithm besides held_karp:\n\n\ncalculate_nodes which contributes F√óL to our time.\n\n\nCalculating the edge_lookup_matrix, which contributes 2R to our time complexity but simply turns into R when considering the asymptotic complexity.\n\n\nCalculating the visit_set, people_at_nodes and two other print calls. This contributes 4F where 4 accounts for these 4 processes but could be any other arbitrary constant, as this simply turns into F when considering the asymptotic time complexity.\n\n\nIf we let the time complexity of held_karp be represented by HK(n) where n denotes the calculated size of the visit_set, our current time complexity of the main function can be represented as O(HK(n)+FL+R+F).\nHeld-Karp Time Complexity ¬ß\nFiguring out the time complexity of the other processes in our algorithm was relatively easy; we can simply look at their pseudocode implementation (or what they would be if they are abstracted) and look at the general number of operations. Held-Karp on the other hand is a bit harder as it is a recursive algorithm, making direct analysis a bit more troublesome. To begin, we can try to represent the modified Held-Karp algorithm as a recurrence relation to aid in mathematical analysis.\nTo recap, Held-Karp3 works by utilising the fact that every subpath of a path of minimum distance is itself of minimum distance. This means that we can reduce the length of S by one each time by finding the minimum distance/path between C and B while running Held-Karp again on the set S without C, but as C as the new value for B.\nAs stated in part 1, this logic can be represented recursively as the following:\nLet¬†CostA‚ÜíB,¬†S‚Äã=The¬†minimum¬†cost¬†of¬†a¬†cycle¬†free¬†path¬†from¬†A¬†to¬†B¬†that¬†visits¬†all¬†the¬†vertices¬†of¬†S.\nLet¬†dA,B‚Äã=The¬†minimum¬†cost¬†of¬†travelling¬†from¬†A¬†to¬†B,¬†as¬†outputted¬†by¬†Dijkstra‚Äôs.\n‚à¥CostA‚ÜíB,¬†S‚Äã=min(CostA‚ÜíC,¬†S‚àí{B}‚Äã+dCB‚Äã)\nWe can then turn this into a recurrence relation for Big O, where n is the size of the set S and d(n) is the cost function, which in our case is Dijkstra‚Äôs:\nTn‚Äã={n(Tn‚àí1‚Äã+d(n))d(n)‚Äãn&gt;0n=0‚Äã\nNow that we have a recurrence relation for Held-Karp in terms of the cost of running Dijkstra‚Äôs, the next logical step is to find the number of operations required to run Dijkstra‚Äôs every time (which would be in the worst case scenario where none of our previous calculations are reused).\nDijkstra‚Äôs Time Complexity ¬ß\nWe can analyse Dijkstra‚Äôs step by step by viewing all the elements of the pseudocode and evaluating them separately and then add them up together at the end:\n\n\nWe can see that initial loop runs for every node, or L times, as each node represents a landmark.\n\n\nIn the main while loop, we iterate over every node in the graph, making the while loop run L times as well.\n\n\nTo find the min_node, the pseudocode iterates over every single node in the unexplored_list. As this list decreases by one each time, the total cost of finding the min_node can be represented as L+(L‚àí1)+(L‚àí2)+‚ãØ+1+0. This resembles the triangular numbers, and hence we can also represent the total min_node cost as 2L(L+1)‚Äã.\n\n\nThe nested for loop inside the while loop is a bit trickier as it covers all neighbours of the current min_node. As we have established that every single node in the graph will be the min_node at some point, we can use the graph below as an example for how many times this loop would occur.\nOver here, we can see that A has 2 neighbours, B has 2 neighbours, C has 1 neighbour and D has 1 neighbour. This makes it evident that the amount of times this inner for loop will run is actually just the sum of the degrees of the graph, and by the handshaking lemma, this is simply equal to twice the number of edges in the graph. Hence, the total amount of times this loop will run is 2R.\n\n\n\nFinally, inside this for loop, we call the dist function. As is evident from the pseudocode, this function uses the edge_lookup_matrix and goes over the edges between two nodes. In most practical cases, this will simply be one or two edges if multiple bus or train lines go across the same nodes. The soonest_time_at_node function is also an abstraction the next available bus/train time given any time at a particular node, which can possibly be implemented into a dictionary to be done in constant time. Due to these two factors, when looking at the asymptotic behaviour, this can be simplified to O(1).\n\n\nNow that we have considered all parts of our implementation of Dijkstra‚Äôs, we can combine it to get a single cost function: d(n)=L+L(2L(L+1)‚Äã+2R)=2LR+21‚ÄãL3+21‚ÄãL2+L. Considering the behaviour of this function asymptotically, we can see that it would have a time complexity of O(2LR+L3), which is far from ideal and can be improved significantly (Dijkstra‚Äôs can supposedly be done in O(L+RlogL) with a min-priority queue).\nModified Held-Karp Time Complexity ¬ß\nNow that we have an established cost function, we can attempt to evaluate Tn‚Äã in terms of d(n). To reiterate:\nTn‚Äã={n(Tn‚àí1‚Äã+d(n))d(n)‚Äãn&gt;0n=0‚Äã\nd(n)=2LR+21‚ÄãL3+21‚ÄãL2+L\nKeeping this in terms of d(n), we can create a table to see how this recurrence relation gets bigger as n increases.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnTn‚Äã0d(n)12d(n)26d(n)321d(n)488d(n)5445d(n)\nThe working for this table is shown below, but you can easily keep going to follow the pattern for higher values of n:\nn=0: Tn‚Äã=d(n)\nn=1: Tn‚Äã=1(T0‚Äã+d(n))=2d(n)\nn=2: Tn‚Äã=2(T1‚Äã+d(n))=6d(n)\nn=3: Tn‚Äã=3(T2‚Äã+d(n))=21d(n)\nn=4: Tn‚Äã=4(T3‚Äã+d(n))=88d(n)\nn=5: Tn‚Äã=5(T4‚Äã+d(n))=445d(n)\nRecurrence Relation ¬ß\nJust looking at the coefficients for a second, we have the following recurrence relation:\nTn‚Äã=n(Tn‚àí1‚Äã+1),¬†T0‚Äã=1\nIt is easy to see that this recurrence relation implies that the running time for the algorithm is factorial. After all, the recurrence relation for n! is Tn‚Äã=n(Tn‚àí1‚Äã),¬†T0‚Äã=1.\nAttempting to Find an Explicit Formula ¬ß\nNow clearly it is of interest to solve this recurrence relation and find a non-recursive formula, and here we run into a bit of an issue. If the relation were a linear recurrence with constant coefficients or a typical divide-and conquer recurrence, it would likely be solvable by well-known methods such as telescoping or the Master Theorem, but this is not the case.\nTheorem 1 ¬ß\nWhile trying to find a way to solve this recurrence relation, I arrived at the conjecture that Tn‚Äã=n!+‚àëi=0n‚àí1‚Äãi!n!‚Äã, so let us try to prove it.\n\nFor n‚ààN, the number of operations used to solve an n-sized visit set TSP by the above algorithm (ignoring the cost function) satisfied the formula: Tn‚Äã=n!+‚àëi=0n‚àí1‚Äãi!n!‚Äã.\n\nFirst let us work with the RHS to rearrange it a bit into a more convenient form:\nRHS\n=n!+‚àëi=0n‚àí1‚Äãi!n!‚Äã\n=n!+0!n!‚Äã+1!n!‚Äã+2!n!‚Äã+‚ãØ+(n‚àí2)!n!‚Äã+(n‚àí1)!n!‚Äã\n=n!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(n‚àí2)!1‚Äã+(n‚àí1)!1‚Äã)\nBase Case ¬ß\nWhen n=0, the base case of the recurrence relation says that T0‚Äã=1. The above formula matches that with T0‚Äã=0!√ó(1+0)=1, ‚à¥ base case is true.\nInduction Step ¬ß\nPick an arbitrary k‚ààN. Assume that the theorem holds for any TSP with a visit set of size k. Thus, it is assumed that Tk‚Äã=k!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã).\nProof by induction requires showing the following:\nTk+1‚Äã=(k+1)!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí1)!1‚Äã+k!1‚Äã).\nNext, we can combine the recurrence above with the induction hypothesis as follows:\nLHS\n=Tk+1‚Äã\n=Tk‚Äã(k+1)+(k+1) (from recurrence relation)\n=[k!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã)](k+1)+(k+1)\n=(k+1)!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã)+(k+1)\n=(k+1)!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã)+(k+1)√ó(k+1)!(k+1)!‚Äã\n=(k+1)!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã+(k+1)!k+1‚Äã)\n=(k+1)!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(k‚àí2)!1‚Äã+(k‚àí1)!1‚Äã+k!1‚Äã)\n=RHS\nThus Tn‚Äã=n!+‚àëi=0n‚àí1‚Äãi!n!‚Äã by the principle of mathematical induction.\nTheorem 2 ¬ß\nLooking all over the web for this, the only place I could find any reference to this sequence is here, which provides us with the relation Tn‚Äã=n!+‚åäe√ón!‚åã‚àí1 for the coefficients. This can be rearranged to Tn‚Äã=‚åän!(e+1)‚àí1‚åã, but just to be sure that this works for every case, we should probably prove it too.\n\nFor n‚ààZ+, the number of operations used to solve an n-sized visit set TSP by the above algorithm (ignoring the cost function) satisfied the formula: Tn‚Äã=‚åän!(e+1)‚àí1‚åã.\n\nCase 1 ¬ß\nThis is the case where n=1. As seen above, T1‚Äã=2 and the proposed formula predicts that T1‚Äã=‚åä1!(e+1)‚àí1‚åã=‚åäe+1‚àí1‚åã=‚åäe‚åã=2. Thus, the base case holds.\nCase 2 ¬ß\nThis is the case where n&gt;1. Because of the floor function, if it can be shown that the following difference is small enough, it will probably be possible to prove that this case works as well.\nLet¬†¬†rn‚Äã=n!(e+1)‚àí1‚àíTn‚Äã\nLemma 1 ¬ß\n\nWhen n&gt;1, the following must be true: rn‚Äã=n+11‚Äã+(n+1)(n+2)1‚Äã+(n+1)(n+2)(n+3)1‚Äã+‚ãØ\n\nThis sum looks like it might be related to the power series for ex at x=1. We already know the power series for ex, a proof for which can be found here:\nex=0!1‚Äã+1!x‚Äã+2!x2‚Äã+3!x3‚Äã+‚ãØ\nIt therefore follows that:\ne=e1=0!1‚Äã+1!1‚Äã+2!1‚Äã+3!1‚Äã+‚ãØ\nSince we know that Tn‚Äã=n!√ó(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ+(n‚àí2)!1‚Äã+(n‚àí1)!1‚Äã) from the first theorem, we can sub both the power series for e and this fact into our definition of rn‚Äã:\nrn‚Äã\n=n!(e+1)‚àí1‚àíTn‚Äã (by definition)\n=n!(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ)‚àí1‚àíTn‚Äã (power series for e)\n=n!(1+0!1‚Äã+1!1‚Äã+2!1‚Äã+‚ãØ)‚àí1‚àín!√ó(1+0!1‚Äã+1!1‚Äã+‚ãØ+(n‚àí2)!1‚Äã+(n‚àí1)!1‚Äã)\n=n!√ó(n!1‚Äã+(n+1)!1‚Äã+(n+2)!1‚Äã+‚ãØ)‚àí1\n=(1+n+11‚Äã+(n+1)(n+2)1‚Äã+‚ãØ)‚àí1\n=n+11‚Äã+(n+1)(n+2)1‚Äã+(n+1)(n+2)(n+3)1‚Äã+‚ãØ\n‚à¥ The lemma is true.\nLemma 2 ¬ß\n\nWhen n&gt;1, it is true that rn‚Äã&lt;n+11‚Äã+(n+1)21‚Äã+(n+1)31‚Äã+‚ãØ=n1‚Äã\n\nThis is easily proven using the first lemma:\nrn‚Äã\n=n+11‚Äã+(n+1)(n+2)1‚Äã+(n+1)(n+2)(n+3)1‚Äã+‚ãØ (Lemma 1)\n&lt;n+11‚Äã+(n+1)(n+1)1‚Äã+(n+1)(n+1)(n+1)1‚Äã+‚ãØ\n=n+11‚Äã+(n+1)21‚Äã+(n+1)31‚Äã+‚ãØ\nThis upper bound above is in the form of an infinite geometric series with ratio n+11‚Äã, so the usual formula of S‚àû‚Äã=1‚àíra‚Äã can be used: rn‚Äã&lt;1‚àín+11‚Äãn+11‚Äã‚Äã=n1‚Äã.\n‚à¥ The lemma is true.\nLemma 3 ¬ß\n\nIf n&gt;1, 0&lt;rn‚Äã&lt;1 must hold true.\n\nFrom Lemma 1, it is clear that rn‚Äã is positive ‚à¥0&lt;rn‚Äã.\nThen, by Lemma 2, the following must hold: rn‚Äã&lt;n1‚Äã‚â§21‚Äã&lt;1. ‚à¥rn‚Äã&lt;1.\n‚à¥ The lemma is true.\nConclusion ¬ß\nThus, the proof for this theorem is complete for the case n&gt;1:\nBy the definition of rn‚Äã, it must be true that Tn‚Äã+rn‚Äã=n!(e+1)‚àí1. Since the recurrence relation set up Tn‚Äã as integer and 0&lt;rn‚Äã&lt;1 by Lemma 3, it must hold that ‚åän!(e+1)‚àí1‚åã=‚åäTn‚Äã+rn‚Äã‚åã=Tn‚Äã.\nTime Complexity ¬ß\nNow that we have proved this works for the coefficients of the cost function, we have the formula of T(n)=d(n)‚åän!(e+1)‚àí1‚åã.The floor function here is just to deal with the difference of rn‚Äã so that we can get an integer output. Subbing in our known time complexity of d(n), we get a final Big O of O(‚åän!(e+1)‚åã(2LR+L3)) for the original implementation of our modified Held-Karp with no caching of its own Dijkstra‚Äôs outputs. Note that it should already have been obvious that the running time for this algorithm would be in factorial time from the recurrence relation itself, even before finding an explicit formula.\nWe have already verified that this is correct given that the recurrence relation is correct, but we can also do so by general intuition . If we look back at Part 1, we can get the time taken to run the unoptimised modified Held-Karp on our data with different n values. (2LR+L3) should be a constant for any particular predefined graph, meaning that if our Big O time complexity is correct then execution¬†time‚àù‚åän!(e+1)‚åã4.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn‚åän!(e+1)‚åãexecution¬†time‚Äã53√ó10‚àí564√ó10‚àí573√ó10‚àí583√ó10‚àí593√ó10‚àí5\nAs we can see, this proportionality is fairly constant, so it would probably be safe to assume that the worst-case time complexity for the unoptimised modified Held-Karp algorithm would be O(‚åän!(e+1)‚åã(2LR+L3)), or at least something pretty close to it.\nOptimised Modified Held-Karp Time Complexity ¬ß\nAs was established in part 1, this factorial time complexity is not nearly sufficient enough for real world applications. Not only is it simply worse than brute forcing it, it makes it so calculating the Hamiltonian path with just my own friend group takes a ludicrous amount of time.\nOne optimisation that was made in Part 1 was the caching of Dijkstra‚Äôs outputs, so that once Dijkstra‚Äôs is called from one starting node, all subsequent calls to Dijkstra‚Äôs will be done in O(1) time. This means that the full Dijkstra‚Äôs algorithm will only be called a maximum of once for every node in the graph, and then all subsequent calls will just use the cache. Since the time complexity for our Dijkstra‚Äôs implementation is currently O(2LR+L3), we can simply multiply this by the amount of nodes (L) to get the worst case scenario for how long Dijkstra‚Äôs takes.\nThis transforms our time complexity of O(‚åän!(e+1)‚åã(2LR+L3)) into O(‚åän!(e+1)‚åã+L(2LR+L3)), which doesn‚Äôt look like that much of a difference, but it means that when looking at the asymptotic time as n‚Üí‚àû, we can remove the whole second term as it becomes a constant if we are not considering increasing the amount of landmarks and routes, which is much better than multiplying by this value instead.\nAs n‚Üí‚àû, not only does the 2nd term become negligible as explained above, but the floor function also doesn‚Äôt make a difference because it is simply for making the output an integer number of operations. As such, it is safe to conclude that the implemented algorithm runs in factorial time for an increasing size of the visit_set.\nIn conclusion, the final algorithm from part one has a time complexity of O(‚åän!(e+1)‚åã+L(2LR+L3)), which means that the algorithm runs in factorial time.\nConsequences of Time Complexity ¬ß\nAs detailed in the previous section, the final time complexity of the algorithm so far is O(‚åän!(e+1)‚åã+L(2LR+L3)). This isn‚Äôt very ideal, because simply brute forcing it would likely lead to a better worst case time complexity than the current algorithm.\nLet‚Äôs quickly take the example of the time complexities of our two algorithms, the one with cached Dijkstra‚Äôs values and the one without. The graph/input data detailed in Part 1 has 15 landmarks, 26 routes and a visit_set of size 7. For these values, the unoptimised algorithm would take 77,864,700 time units and the algorithm with Dijkstra‚Äôs caching would take 81,065 time units. This is over 960 times faster in the worst case scenario, but as shown in part 1, about 31 times faster in the average case. Below is a discussion on the real world consequences of this time performance difference, as well as how practical this algorithm is for real world use cases.\nRevisiting Problem Requirements ¬ß\nThis algorithm was made to solve the general problem of planning trips with friends, but more specifically the scenario where my friends decided that we want to travel in one big travel party and I am to start and end my day at my house, picking up all my friends along the way. In other words, this algorithm is designed for the real world use case of finding the shortest circuit that picks up all my friends as we travel.\nLet us consider some requirements for this real world use case. By my own general estimates, most people would only have about 5 to 10 close friends that they would travel like this with. Similarly, most people live relatively close to their friends, so the case of 15 landmarks (or train stations/buses) and 26 routes (or train/bus lines) is realistic. As shown in Part 1, below is the real world performance as n‚àà[0,12] and L=15,¬†R=26.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn (size of visit_set)t (execution time in seconds, 4dp)00.000110.000120.000130.000140.000150.000560.006070.028780.214891.60551017.455511171.6719121750.1065\nPresuming most people‚Äôs friends live somewhat close to each other, even in the case where we have 10 close friends that we want to hang out with, most of them probably share ‚Äúpickup points‚Äù which reduces the size of the visit_set. For example, the current input data has 18 friends but a visit set of size 7! This means that in almost every case n&lt;10, and if people were using this in a mapping application like Google Maps for example to have certain pickup points along the way, this would most likely be fine, returning a result in a couple seconds at worst.\nThe problems start arising when this problem is scaled up more. As the algorithm is in factorial time, it scales rather terribly and has minimal improvements over brute force, if any improvements at all. The algorithm more generally is a solution for TSP with a graph that is not necessarily complete, and this can be applied to a lot more real life applications than just houses of friends. For example, if the person starting the trip was a truck driver for a logistics company rather than me, and the pickup points were necessary delivery points rather than the closest meeting points for friends, we would have a completely different scale in which the algorithm would perform very poorly. Not only would these pickup points be across a much larger distance, meaning the value of R will likely be much higher, but there are potentially many more pickup/dropoff points in a day than the previous scenario, causing both L and n to be greatly larger. Simply put, a factorial time complexity of O(‚åän!(e+1)‚åã+L(2LR+L3)) just does not scale very well for many other practical use cases besides the one explored, and even then, if the party of friends was sufficiently large, the algorithm would crawl to a halt. Looking at the example above, with just 12 pickup points the algorithm ground to a staggering half an hour of required time when tested on my machine.\nDue to the fact that most users are not willing to wait more than a couple seconds for a result, the practical input sizes are n&lt;10, L‚â§15, R‚â§30. These values are taken from the input values that produced the table above while considering the time complexity of the algorithm. This is not a very big scope of possible use cases, and therefore optimisations are most definitely needed. Although this algorithm as of now is suitable to the problem‚Äôs requirements, it very quickly falls apart for a ‚Äúpower user‚Äù or anyone else that has a different use-case in mind. Another possible alternative is using ‚Äúapproximate‚Äù solutions that have a better time complexity which may not provide the most optimal solution, but will most definitely scale better for a variety of use cases.\nTo conclude, this algorithm‚Äôs time complexity directly influences how practically it can be used in the real world to solve the problem it is intended to solve. Users of a program as such would expect a result within seconds at most, and the practical input sizes are therefore restricted to those described above.\nAppendix ¬ß\nPossible Optimisations ¬ß\nIt is also worth quickly noting the possible optimisations the findings of the report above lead to.\n\n\nThe current implementation of Dijkstra‚Äôs is far from optimal: the current algorithm has a cubic time complexity but with a a min priority queue this can supposedly be reduced to O(L+RlogL).\n\n\nThe abstraction of soonest_time_at_node can be implemented as a dictionary that is accessed in constant time but is currently implemented as two for loops that makes the dist function more complex than necessary.\n\n\nThe biggest optimisation needed is the caching of the Held-Karp outputs, meaning that subpaths are calculated once only, and all subsequent subpaths will be read in O(1) time (basically dynamic programming by definition). This should probably help the factorial time complexity, though it might be hindered by the fact that a different starting time means that the whole subpath is different which decreases how effective this optimisation is.\n\n\nFinally, it may be worth considering approximate solutions. This being said, the scope of the problem to solve does just fit into the practical input sizes that the algorithm allows, but definitely limits its usefulness and real world use cases. In many times, the best solution is not needed, just a relatively good one.\n\n\nAlgorithm Pseudocode ¬ß\nThe following is the final pseudocode reiterated from Part 1, namely for convenience while analysing, since multiple modifications were made to the initial pseudocode.\nLet A= starting vertex\nLet B= ending vertex\nLet S={P,Q,R} or any other vertices to be visited along the way.\nLet C‚ààS (random node in S)\nMain Function ¬ß\nfunction main(\n\tfriends: dictionary,\n\tlandmarks: dictionary,\n\troutes: dictionary,\n\ttimetable: dictionary\n):\n\t// global variable declarations\n\tconcession: bool = Ask the user &quot;Do you posses a concession card?&quot;\n\tholiday: bool = Ask the user &quot;Is today a weekend or a holiday?&quot;\n\tuser_name: string = Ask the user to select a friend from friends dictionary\n\tselected_time = Ask the user what time they are leaving\n\t\n\tcached_djk: dictionary = empty dictionary\n\tedge_lookup_matrix: matrix = |V| x |V| matrix that stores a list of edges in each entry\n\t\n\t// get distance of all friends from landmarks\n\tfriend_distances: dictionary = calculate_nodes(friends, landmarks)\n\tvisit_set: set = set of all closest nodes from friend_distances\n\tpeople_at_nodes: dictionary = all friends sorted into keys of which nodes they are closest to, from visit_set\n\t\n\thome: string = closest node of user_name\n\t\n\tprint all friends, where they live closest to and how far away\n\t\n\tprint out friends that would take more than 20 minutes to walk (average human walking speed is 5.1 km/h)\n\t\n\thamiltonian_path = held_karp(home, home, visit_set, selected_time)\n\t\n\tprint how much the trip would cost and how long it would take\n\t\n\tprint the path of the hamiltonian_path\nend function\n\nCalculate Nodes ¬ß\nfunction calculate_nodes (\n\tfriend_data: dictionary,\n\tnode_data: dictionary\n):\n\tfor friend in friend_data:\n\t\thome: tuple = friend[&#039;home&#039;]\n\t\t// initial min vals that will be set to smallest iterated distance\n\t\tmin: float = infinity\n\t\tmin_node: node = null\n\t\t\n\t\tfor node in node_data:\n\t\t\tlocation: tuple = node[&#039;coordinates&#039;]\n\t\t\t// find real life distance (functional abstraction)\n\t\t\tdistance: float = latlong_distance(home, location)\n\t\t\tif distance &lt; min:\n\t\t\t\tmin = distance\n\t\t\t\tmin_node = node\n\t\t\n\t\tdistance_dict[friend][&#039;min_node&#039;] = min_node\n\t\tdistance_dict[friend][&#039;distance&#039;] = min\nend function\n\nHeld-Karp ¬ß\nfunction held_karp (\n    start: node,\n    end: node,\n    visit: set&lt;node&gt;,\n    current_time: datetime\n):\n    if visit.size = 0:\n    \tdjk = dijkstras(start, end, current_time)\n\t\treturn djk[&#039;cost&#039;]\n    else:\n        min = infinity\n        For node C in set S:\n\t        sub_path = held_karp(start, C, (set \\ C), current_time)\n\t        djk = dijkstras(C, end, current_time + toMinutes(sub_path[&#039;cost&#039;]))\n\t        cost = sub_path[&#039;cost&#039;] + djk[&#039;cost&#039;]\n\t        if cost &lt; min:\n\t            min = cost\n\t    return min\nend function\n\nDijkstra‚Äôs ¬ß\nfunction dijkstras (\n    start: node,\n    end: node,\n    current_time: datetime\n):\n    // Set all node distance to infinity\n    for node in graph:\n        distance[node] = infinity\n        predecessor[node] = null\n        unexplored_list.add(node)\n    \n    // starting distance has to be 0\n    distance[start] = 0\n    \n    // while more to still explore\n    while unexplored_list is not empty:\n        min_node = unexplored node with min cost\n        unexplored_list.remove(min_node)\n    \n\t    // go through every neighbour and relax\n        for each neighbour of min_node:\n            current_dist = distance[min_node] + dist(min_node, neighbour, current_time + to_minutes(distance[min_node]))\n            // a shorter path has been found to the neighbour -&gt; relax value\n            if current_dist &lt; distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n    \n    return distance[end]\nend function\n\nDistance Function ¬ß\nfunction dist (\n\tstart: node,\n\tend: node,\n\tcurrent_time: datetime\n):\t\n\t// if the start and end node are the same, it takes no time to get there\n\tif start = end:\n\t\treturn 0\n\telse if edges = null:\n\t\t// if no edge exists between nodes\n\t\treturn infinity\n\t\n\tedges = edge_lookup_matrix[start][end]\n\tdistances = []\n\t\n\t// go over each possible edge between nodes (multiple possible)\n\tfor edge in edges:\n\t\tline = edge.line\n\t\t// next time bus/train will be at node (functional abstraction)\n\t\tnext_time = soonest_time_at_node(timetable, line, start, current_time)\n\t\twait_time = next_time - current_time\n\t\tdistances.add(edge.weight + wait_time)\n\t\n\treturn min(distances)\nend function\n\nFootnotes ¬ß\n\n\nThis analysis is done assuming that the time complexity of accessing a dictionary, list or array element is O(1), as these basic pseudocode elements are generally done in constant time. ‚Ü©\n\n\nDue to the nature of functional abstraction, the implementation of creating the edge_lookup_matrix is not specified in the pseudocode. Although it is referred to as a lookup matrix of size ‚à£V‚à£√ó‚à£V‚à£ which would have a quadratic time complexity, the pseudocode has actually been implemented as a dictionary in O(2R) time, which is a bit more efficient. Nonetheless, even if it was changed to O(L2), it would make minimal difference to the final asymptotic time complexity. ‚Ü©\n\n\nThe following variables will be used as shorthand throughout the analysis.\nLet A= starting vertex\nLet B= ending vertex\nLet S={P,Q,R} or any other vertices to be visited along the way.\nLet n = the length of the visit set S.\nLet C‚ààS (random node in S), and to clarify: CÓÄ†=A,B as S does not include them ‚Ü©\n\n\nNote that n&lt;5 would be rather unreliable due to the decimal inaccuracy of my recorded execution times (4dp) ‚Ü©\n\n\n"},"notes/School-Subjects/Algorithmics/SAT/Part-3/Algorithmics-SAT-Part-3":{"title":"Algorithmics SAT - Friendship Network Part 3","links":[],"tags":[],"content":"This section of the Algorithmics SAT focuses improving the original data model and algorithm to solve the original problem more efficiently and effectively.\nThroughout the analysis, note the following variables are used as shorthand:\nLet F= number of friends\nLet L= number of landmarks\nLet R= number of routes\n\\newpage\nSuggested Improvements ¬ß\nFrom Part 2, there were various possible optimisations that became evident from the time complexity analysis. These read as follows:\n\n\nThe current implementation of Dijkstra‚Äôs is far from optimal: the current algorithm has a cubic time complexity but with a min priority queue this can supposedly be reduced to O(L+RlogL).\n\n\nThe abstraction of soonest_time_at_node can be implemented as a dictionary that is accessed in constant time but is currently implemented as two for loops that makes the dist function more complex than necessary.\n\n\nThe biggest optimisation needed is the caching of the Held-Karp outputs, meaning that subpaths are calculated once only, and all subsequent subpaths will be read in O(1) time (basically dynamic programming by definition). This should probably help the factorial time complexity, though it might be hindered by the fact that a different starting time means that the whole sub-path is different which decreases how effective this optimisation is.\n\n\nFinally, it may be worth considering approximate solutions. This being said, the scope of the problem to solve does just fit into the practical input sizes that the algorithm allows, but definitely limits its usefulness and real world use cases. In many times, the best solution is not needed, just a relatively good one.\n\n\nThe first three can be implemented and compared relatively easily, so they will be the focus of this section.\nImproving Dijkstra‚Äôs Implementation ¬ß\nAs stated above, the current implementation of Dijkstra‚Äôs is na√Øve because each iteration of the while loop requires a scan over all edges to find the one with the minimum distance, but the relatively small change of using a heap as a min priority queue allows us to find the edge with minimum distance faster. In terms of the pseudocode, this just means turning unexplored_list into a min priority queue, where the priority is based on the distance to the node.\nNote that even though the unexplored_list simply appears as a priority queue in the pseudocode, for this change to be beneficial the priority queue data structure must itself be implemented efficiently, using something like a heap.\nSee the modified version of Dijkstra‚Äôs for the pseudocode.\nHeaps ¬ß\nIn most implementations (such as the Python implementation we will be testing with), the inner workings of how a min priority queue works will be abstracted and hence doesn‚Äôt need to be worried about. Nonetheless, it is worth exploring how they are actually implemented, a popular method being min heaps!\nA heap is a special tree-based data structure in which the tree is a complete binary tree. In other words, each node has exactly two children and every level will be completely filled, except possibly the deepest level. In a min heap, the parent nodes are always smaller than their children, meaning that the root node is the very smallest element.\nInterestingly, since there are no gaps in the tree, the heap can actually be stored simply as an array with additional logic for adding and removing from the priority queue.\n\nInsertion ¬ß\nWhen inserting an element, it goes in the next empty spot looking top to bottom, left to right. If that‚Äôs not where the element should actually go, we can ‚Äúbubble it up‚Äù until it is, meaning that we can swap that element with its parent node repeatedly until it has gone up the tree enough to be in the correct position. Since it is a binary tree, we can do this in O(logn) time.\nDeletion ¬ß\nSince we would want to remove the smallest node, this would of course be the root node. Removing the root node would create an empty spot, so when we remove the root, we instead fill that with the last element added. Similar to above, since this element might not be in the right spot, we take that element and ‚Äúbubble it down‚Äù until it is, this time swapping with the smaller of the two children repeatedly. Similar to above, we can do this in O(logn) time.\nImprovement ¬ß\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisit Set SizeInitial Algorithm (s)Improved Dijkstra‚Äôs (s)81.40381.284293.97183.9315\nAll times are the average of 10 trials. Evidently, the improvement is slight, if any improvement at all.\nImproving Distance Function ¬ß\nTo find the soonest_time_at_node, the original Pythonic implementation was using a nested for loop to find when the next train/bus would arrive. This is thoroughly inefficient, namely due to the amount of times that the dist function is called, meaning that there would be a lot of overlap. This could be improved using dynamic programming, but since there is a fixed amount of time in a day (24 hours), it doesn‚Äôt actually take that long to precompute this waiting time and store it along with the rest of our data. The pseudocode for this function is below:\ntime_data = dictionary of dictionaries\n\nfor line in line_data:\n    for start_node in line_data[line][&#039;timetable&#039;]:\n        for current_time in every minute of a day:\n            // calculate next time at node\n            for arrival_time at start_node:\n                if arrival_time &gt;= current_time and is first:\n                    next_time = arrival_time\n            \n            wait_time = next_time - current_time\n            add wait_time to time_date\n\nThis produces a rather large dictionary of wait times, but the change to O(1) time complexity pays off, even if space complexity is sacrificed.\nImprovement ¬ß\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisit Set SizeInitial Algorithm (s)Improved Dijkstra‚Äôs (s)Improved Dist (s)81.40381.28420.274693.97183.93152.21231027.888124.4954\nAll times are the average of 10 trials and improvements are cumulative. The improvement seems quite large for smaller visit set sizes, but evidently this does not influence the Big O much as limn‚Üí‚àû.\nImproving Held-Karp Implementation ¬ß\nMaybe the biggest flaw in the initial algorithm is that Held-Karp did not use dynamic programming. Due to the way Held-Karp works (explained previously), there are many overlapping problems and without the caching of these outputs, they will be calculated repeatedly unnecessarily. Since this main function is what contributes to the majority of the time complexity, improving it should make the algorithm scale better.\nAs we did with Dijkstra‚Äôs in Part 1, caching can be done with an intermediary function, fetch_hk, which only runs held_karp if the value hasn‚Äôt already been stored.\nThe pseudocode for this process is relatively simple and can be found below.\nImprovement ¬ß\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisit Set SizeInitial Algorithm (s)Improved Dijkstra‚Äôs (s)Improved Dist (s)Improved Held-Karp (s)81.40381.28420.27460.026493.97183.93152.21230.05791027.888124.49540.1460110.2339120.5172131.2122142.8075\nAll times are the average of 10 trials and improvements are cumulative. The improvement from this change is much better than the previous changes, likely changing our Big O time from factorial to exponential, as seen by the roughly doubling running times. This can be verified by creating a line of best fit from the data above, which works out to be t(n)‚âàan‚àíb where a=2.29792 and b=12.7609. This has an R2 value of 0.9996, which provides us with a relatively high confidence that the new algorithm has Œò(2n). According to this line of best fit, n=20 would take about 7 minutes and 53 seconds, while n=30 would take almost 3 weeks.\nIt is worth noting that although this does improve the time complexity by a large factor, the cache also takes up a lot of space, making the space complexity worse. This tradeoff is quite good in most cases since modern devices have plenty of memory and storage, but in the case that space complexity is a constraint, this may be an unideal optimisation.\n\\newpage\nPracticalities of an Exact Algorithm ¬ß\nThough the algorithm has seen a dramatic improvement from factorial time to likely exponential time, it still maintains a lot of the issues that the previous version possessed. Namely, because exponential time still does not scale very well, the practical input size for n is still very limited, changing from about n‚â§9 to n‚â§14.\nAs stated in Part 2, this is mostly sufficient for the specific use case of the problem outlined in most cases since the amount of friends people would hang out with in this fashion is intrinsically small, as it only applies itself to close friends. Because of this, even if someone does have a large amount of close friends, it is unlikely that the visit set that gets computed is larger than 14 (the current input data has 18 friends but a visit set of size 7). As such, for the practical cases of this specific problem, the exact algorithm is sufficient, and also works for adjacent scenarios such as mapping applications (Google Maps, etc.) wanting to have certain pickup points along the way.\nThe algorithm begins to become impractical once the problem is scaled up more as a general solution for the TSP. For example, if a truck driver for a logistics company wanted an optimal route given a list of pickup points, this would very quickly surpass the practical limit of n‚â§14, and the graph would be much larger as well. In wider applications like this, using an exact algorithm is simply not useful, and we would rather want paths that have a ‚Äúsmall enough‚Äù cost but have a feasible time complexity. This is where we get into the realm of approximate algorithms.\nTractability ¬ß\nIt is important to note that the problem that was initially described can simply be generalised as the Travelling Salesman Problem, which is famously NP-Hard meaning that there is no known polynomial time solution for the problem.\nDue to the fact that our final exact algorithm implementation had its execution time double every time n was increased by 1, it is safe to assume that the algorithm runs in exponential time at best, meaning that it is still considerably intractable for large inputs due to the exponential growth.\nFrom this, it is clear that the problem does not become tractable based on the above implementation, and it will be hard to make an exact algorithm that is much faster. This is why approximate algorithms are worth considering, namely those that have performance guarantees of worst cases that are within a certain factor of the minimal cost solution. They provide a trade-off between speed and optimality, and while they make the problem more tractable than exact algorithms, they do not make it completely tractable due to their approximate nature and how they do not always produce the optimal solution.\nApproximate/Heuristic Algorithms ¬ß\nThe general idea of most approximation algorithms is we can start with an initial candidate solution and then keep making changes to see if we can get better. The initial candidate solution need not be good, but it would certainly help produce results closer to the global optimum after a certain amount of iterations.\nOne of the most intuitive ideas to generate an initial candidate solution would be to visit the closest node in the visit set from any given node, and this can more formally be described as the Nearest Neighbour Heuristic.\nNearest Neighbour Heuristic ¬ß\nThe Nearest Neighbour (NN) algorithm is a greedy (and somewhat na√Øve) approach where the closest unvisited city is selected as the next destination. This method produces a reasonably short route, but usually not the optimal one. The informal steps of this approximate algorithm are listed below:\n\n\nMark every vertex as unvisited.\n\n\nSet the starting vertex as the current vertex u, marking it as visited.\n\n\nFind the shortest outgoing edge from u to an unvisited vertex v.\n\n\nSet v as the current vertex u and mark it as visited.\n\n\nIf all vertices have been visited, terminate, if not, go to step 3.\n\n\nThis is a very simple algorithm, but as is the case with most greedy approaches, it can quite easily miss shorter routes. For this specific use case step 3 may cause a few issues in terms of time complexity, as unlike the normal TSP, our graph is not complete. This means that at this step, we would need to run Dijkstra‚Äôs at every single node in the graph and then sort them to find the shortest path, which is inefficient.\nTo make this slightly faster we could simply choose the first unvisited node in the visit set to go to, but that would still require Dijkstra‚Äôs to run at every node to find a path, meaning that only the time spent sorting would be saved (which is minimal since Dijkstra‚Äôs will already have them sorted from the min heap). The problem with this approach is that it will produce a less optimal solution, causing the algorithm to have to spend a longer amount of time improving the solution in the simulated annealing phase. This means that it is a bit of a tradeoff, and for now the shortest node will be chosen.\nTo avoid using Dijkstra‚Äôs at all, it is worth considering candidate solutions based on the MST, such as those created by Christofides‚Äô Algorithm, which may turn out to be faster. This can be further considered to optimise the algorithm, but for simplicity‚Äôs sake, the NN Heuristic will be continued with.\nBelow is the pseudocode to generate an initial candidate solution. Note that in this pseudocode, fetch_djk only has the input of the starting node and visit set and returns the path to the closest node in the visit set, so it is a slightly modified version of the fetch_djk outlined above.\n// creates a canditate solution using the NN Heuristic\nfunction canditate_solution (\n    start: node, \n    end: node,\n    visit: set of nodes,\n    current_time: datetime,\n):\n    path = [start]\n    current_vertex = start\n    cost = 0\n    \n    while len(visit) != 0:\n        closest_node = fetch_djk(current_vertex, visit, current_time)\n        path.add(closest_node)\n        cost += closest_node.cost\n        visit.remove(closest_node)\n        current_vertex = closest_node\n    \n    // go back to the end node\n    closest_node = fetch_djk(current_vertex, end, current_time)\n    path.add(closest_node)\n    cost += closest_node.cost\n    \n    return {&#039;path&#039;: path, &#039;cost&#039;: cost}\nend function\n\nPairwise Exchange ¬ß\nOnce we have an initial candidate solution that has a reasonable cost for the traversal, a natural question to ask is ‚Äúhow can we make it better?‚Äù More specifically, it is worth considering how we could make modifications to generate a better solution.\nOne way to do this is random swapping, where we randomly pick two cities in the current tour order, and swap them. The goal is to see if these random swaps will ever create a lower cost tour, and if they do, we can accept the new solution. This is a form of the Hill Climbing heuristic, where we keep moving around the sample space to see if we can improve our solution at all.\nA slightly more sophisticated technique than randomly swapping the nodes is a method called Pairwise Exchange or 2-opt. The main idea is that we can select any two edges and reconfigure them in the only other way possible with the hopes that this may result in a lower cost tour.\n\n{ height=360px }\nFor example, in the diagram above, it can be seen that the pairs b‚àíe and c‚àíf cross over each other, so the edges can be swapped so that they do not.\nMore simply, when imagined as a one dimensional array, this could be viewed as the following transformation where we simply reversed the order of the path e‚Üîd‚Üîc:\n\na‚Üîb‚Üîe‚Üîd‚Üîc‚Üîf‚Üîg\na‚Üîb‚Üîc‚Üîd‚Üîe‚Üîf‚Üîg\n\nIn essence, this ‚Äúuntangles‚Äù our candidate solution and can go through all the possible edge combinations much faster than simply randomly switching nodes (which has a much lower chance of being any better).\nIt is worth noting that the 2-opt technique (where 2 edges are selected and reconfigured) can actually be extended to any number of edges, known as k-opt for k edges. It might be worth working with a larger amount of edges (3-opt for example), but for simplicity‚Äôs sake, 2-opt will the one continued with.\nThe above notion of reversing the order of a certain path can be expanded upon to develop our pseudocode. The informal steps for this process are listed below:\nLet u and v be the first vertices of the edges that are to be swapped.\nLet tour be an array of vertices that defines our candidate path.\n\nAdd all vertices up to and including u in order.\nAdd all vertices after u up to and including v in reverse order.\nAdd all vertices after v in order.\n\nIn the example above, u would have been b and v would have been c.\nThis basic logic can be combined with the Hill Climbing Heuristic to provide a simple way to improve the initial candidate solution. Here, the calculate_cost function would simply add up the cost of traversing the graph in the input order, using Dijkstra‚Äôs at every vertex.\nfunction pairwise_swap (\n    u: integer,\n    v: integer,\n    path: path of nodes\n):\n    new_tour = []\n    \n    for i in [0, u]:\n        new_tour.add(path[i])\n    for i in [v, u):\n        new_tour.add(path[i])\n    for i in (v, len(path)]:\n        new_tour.add(path[i])\n    \n    return new_tour\nend function\n\nfunction calculate_cost (\n    path: path of nodes,\n    current_time: datetime\n):\n    cost = 0\n    time = current_time\n    \n    for i from 0 to len(path) - 1:\n        djk = fetch_djk(path[i], path[i + 1], current_time)\n        cost += djk[&#039;cost&#039;]\n        time += djk[&#039;cost&#039;] number of minutes\n    \n    return cost\nend function\n\nfunction hill_climbing (\n    candidate: path of nodes,\n    current_time: datetime,\n    fail_count: int = 0\n):\n    if fail_count &lt; 200:\n        cost = calculate_cost(candidate, current_time)\n        u = random number from 1 to len(candidate) - 1 inclusive\n        v = random number from u to len(candidate) - 1 inclusive\n        \n        new_tour = pairwise_swap(u, v, candidate)\n        new_cost = calculate_cost(new_tour, current_time)\n        \n        if new_cost  accept\n            return hill_climbing(new_tour, current_time, 0)\n        else:\n            // new cost is worse -&gt; go again\n            return hill_climbing(candidate, current_time, fail_count + 1)\n    else:\n        return candidate\nend functionNote that the above range of  and  values has been chosen to prevent them from referring to the start or end of the tour, since in our particular use case we would like to force the tour to start and end at particular locationsSimulated AnnealingOne of the problems with the above solution is that it will quite easily get stuck on a local minimum. Demonstrated by the graph below, the Hill Climbing Heuristic is blind to anything besides its local vicinity. As such, there may be an overall better solution, but not one that can be achieved by constantly improving the current candidate solution. In other words, sometimes things have to get worse before they get better, especially for the TSP.Currently, once the Hill Climbing algorithm is implemented in Python, it produces a somewhat suboptimal result. It is hardcoded to terminate after it has had 200 consecutive iterations that have seen no improvement. Sometimes, it can terminate on a relatively good result, but in other cases it gets stuck on much more sub-par candidates. This can be demonstrated by the two paths bellow, both of which the Hill Climbing algorithm terminated on.The cost has been improved from 234.0 to 227.0\n[&#039;Brandon Park&#039;, &#039;Oakleigh&#039;, &#039;Wheelers Hill Library&#039;, &#039;CGS WH&#039;, &#039;Chadstone&#039;, &#039;Caulfield&#039;, &#039;Flinders Street&#039;, &#039;Camberwell&#039;, &#039;Parliament&#039;, &#039;Melbourne Central&#039;, &#039;Brighton Beach&#039;, &#039;Richmond&#039;, &#039;Mount Waverley&#039;, &#039;Glen Waverley&#039;, &#039;Brandon Park&#039;]The cost has been improved from 277.0 to 270.0\n[&#039;Brandon Park&#039;, &#039;CGS WH&#039;, &#039;Glen Waverley&#039;, &#039;Mount Waverley&#039;, &#039;Camberwell&#039;, &#039;Chadstone&#039;, &#039;Caulfield&#039;, &#039;Brighton Beach&#039;, &#039;Flinders Street&#039;, &#039;Melbourne Central&#039;, &#039;Parliament&#039;, &#039;Richmond&#039;, &#039;Oakleigh&#039;, &#039;Wheelers Hill Library&#039;, &#039;Brandon Park&#039;]Simulated Annealing is a concept that builds off of this idea of possibly selecting a worse solution to hopefully get to the global optimum. Namely, it tries to explore as much of the search space as possible at the start (by being more likely to select worse candidates) and then gradually reduces this chance so that it can converge on a better solution. The logic behind this is quite similar to Hill Climbing:Start with a candidate solution, from a previous algorithm or just a random tour.Modify this candidate by trying to apply some tour improvements, in this case 2-opt.Decide whether to accept the new solution or stay with the old one.The key difference here is step 3. In both algorithms, if the new tour&#039;s cost is lower than the previous one, we will always accept it. If the cost is more than the current solution, with some probability, we will actually accept the higher cost solution but this probability will decrease over time.How this probability is determined is mostly based on a parameter called the &quot;Temperature&quot; . At the start we will initialise this to a high value, and a higher temperature means we are more likely to select a worse solution. Any  will work, but we want to gradually reduce our temperature over time, so that it can influence some probability function.There are usually three main types of temperature reduction functions, where  is the factor by which the temperature is scaled after  iterations:Linear Reduction Rule: Geometric Reduction Rule: Slow-Decrease Rule[^1]: [^1]: This rule is not often used, but  is a different constant that we&#039;ll get to later.Each of these reduction rules decreases the temperature at a different rate, so they may be better for different use cases. For now, we will settle upon the Geometric Reduction Rule (as it is the most common).Starting at the initial temperature, the algorithm will loop through  iterations and then decrease the temperature according to the selected temperature reduction function at the end of every iteration. This loop will stop once the terminating condition is reached, generally some low cutoff temperature where we have determined an acceptable amount of the search space has been explored. Finally, within each iteration, we will use our temperature, the old cost and the new cost to determine whether we accept the new solution or not. This follows the formula below where :To demonstrate, if the new cost is less than or equal to the old cost, the new cost will always be accepted. If on the other hand the new cost is greater, then we might pick it based on the formula shown above. This equation is inspired by the formula for the energy released by metal particles as they cool down from thermodynamics: . This process is known as annealing, hence the name of the algorithm! Borrowing this equation from physics turns out to be quite elegant, giving us a probability distribution known as the Boltzman distribution.It is worth noting the different parameters that can be tuned, and the effectiveness of the algorithm depends on the choice of these parameters: - Normalising ConstantThe choice of this constant is dependent on the expected variation in the performance measure over the search space, If the chosen value of  is higher, the probability of accepting a solution is supposedly also higher in later iterations. In our use case, we can simply play around with this number and see if it changes anything! - Initial TemperatureThis is simply the temperature we start with, and should be relatively close to one so that we accept a lot of new solutions at the start. For now, we will set . - Temperature Scaling FactorAs explained above, depending on the temperature reduction function chosen,  will reduce it at a different rate. Low  values restrict the search space faster, so we can choose  for now.The number of iterations before the temperature is updated can also be played around with, for now this will be set to 5. Also, the cutoff terminating temperature can also be set to allow the algorithm to search for longer.The above should demonstrate the main weakness of simulated annealing: there are a lot of tunable parameters that vastly influence the performance of the algorithm. If our input data is very sparse, the algorithm may perform much worse for certain use cases. Nonetheless, it is most definitely an improvement over the Hill Climbing algorithm as it does not increase time complexity or space complexity, but it does provide a more accurate output.Below is the pseudocode that summarises the above discussion:function acceptance_probability (\n    old_cost: number,\n    new_cost: number,\n    beta: number,\n    temp: number\n):\n    c = new_cost - old_cost\n    \n    if c  min_temp:\n        for n from 1 to temp_change:\n            u = random number from 1 to len(candidate) - 1 inclusive\n            v = random number from u to len(candidate) - 1 inclusive\n            \n            new_tour = pairwise_swap(u, v, candidate)\n            new_cost = calculate_cost(new_tour, current_time)\n            \n            ap = acceptance_probability(old_cost, new_cost, beta, temp)\n            \n            if ap &gt; random float from 0 to 1:\n                candidate = new_tour\n                old_cost = new_cost\n            \n        temp *= alpha\n        \n    return candidate\nend functionNormalising FunctionSomething that may have become apparent when viewing the above examples is how the paths generated by this approximate solution are somehow much shorter than those generated by Held-Karp. This is due to the fact that the implementation of Held-Karp is not restricted to only visiting each node once, whereas the approximate algorithms are. Due to this, we get some interesting behaviour that needs to be accounted for.[&#039;Brandon Park&#039;, &#039;Oakleigh&#039;, &#039;CGS WH&#039;, &#039;Wheelers Hill Library&#039;, &#039;Caulfield&#039;, &#039;Flinders Street&#039;, &#039;Melbourne Central&#039;, &#039;Parliament&#039;, &#039;Glen Waverley&#039;, &#039;Chadstone&#039;, &#039;Brighton Beach&#039;, &#039;Camberwell&#039;, &#039;Mount Waverley&#039;, &#039;Richmond&#039;, &#039;Brandon Park&#039;]The above is a path generated by the Hill Climbing algorithm. The issue to note is that it advises the user to go from Glen Waverley to Chadstone, but there is no edge between them for this to happen. Since the algorithms have been using Dijkstra&#039;s to go to any other node, it has in essence been treating our tour as a complete graph, even though it is not. As such, the edges in between these locations need to be added in again.This is quite simple to do, and is similar to the calculate_cost, except the paths are added instead of the costs.function normalise_path (\n    path: path of nodes,\n    current_time: datetime\n):\n    return_path = []\n    time = current_time\n    \n    for i from 0 to len(path) - 1:\n        djk = fetch_djk(path[i], path[i + 1], current_time)\n        time += djk[&#039;cost&#039;] number of minutes\n        // this is to prevent the last and first item double up\n        return_path += everything in djk[&#039;path&#039;] except last item\n    \n    return_route.add(last item in route)\n    \n    return cost\nend function\\newpageFinal SolutionThe problem these algorithms were set out to solve is a specific application of the TSP: how could the shortest closed walk be found that picks up all my friends as we travel around the city?The initial approach to solve this problem used the concepts of dynamic programming to recursively split up the larger problem into smaller overlapping subproblems. Unfortunately, because the number of subpaths increases exponentially as the size of the visit set increased, it was demonstrated that even though an exact algorithm may provide an optimal solution, intractable problems like the TSP may require a better time complexity in a trade-off for accuracy.The approaches for the approximate solutions have followed two main phases:Generate a possible candidate solution.Improve the candidate using some optimisation algorithm.The Nearest Neighbour heuristic was used to generate the initial candidate, simply travelling to the closest node remaining in the visit set until a closed walk has been achieved. This was then later improved upon by processing this candidate through both the Hill Climbing and Simulated Annealing algorithms.In regard to the performance of Simulated Annealing (SA) vs Hill Climbing (HC), it seems that the output of the former is heavily dependent on the parameters set. Whereas HC produced results in a relatively large range, SA could be tuned to consistently provide the same &quot;good&quot; results every time or if the parameters were not optimal, a completely rubbish result every time.For example, with  and the 5 iterations before updating the temperature, SA consistently produced a hamiltonian path that would take 254 minutes to traverse. HC was more inconsistent, outputting 274 initially, 281 next and struck gold with the last try with 237. Surprisingly though, the difference between Hill Climbing and Simulated Annealing doesn&#039;t seem to be vast for this particular input graph, and SA can simply be viewed as a more tunable and adjustable version of HC to be able to produce a more consistent result.When this was changed to simply be the visit set that the friends reside at, the output for both HC and SA was as follows:Final candidate cost is 143.0\nFinal candidate path is [&#039;Brandon Park&#039;, &#039;Wheelers Hill Library&#039;, &#039;CGS WH&#039;, &#039;Glen Waverley&#039;, &#039;Mount Waverley&#039;, &#039;Richmond&#039;, &#039;Camberwell&#039;, &#039;Richmond&#039;, &#039;Flinders Street&#039;, &#039;Caulfield&#039;, &#039;Oakleigh&#039;, &#039;Brandon Park&#039;]Nonetheless, neither of them are able to find the true optimal path that Held-Karp creates:Final candidate cost is 130.0\nFinal candidate path is [&#039;Brandon Park&#039;, &#039;Wheelers Hill Library&#039;, &#039;CGS WH&#039;, &#039;Glen Waverley&#039;, &#039;Mount Waverley&#039;, &#039;Richmond&#039;, &#039;Flinders Street&#039;, &#039;Caulfield&#039;, &#039;Oakleigh&#039;, &#039;Richmond&#039;, &#039;Camberwell&#039;, &#039;Richmond&#039;, &#039;Oakleigh&#039;, &#039;Brandon Park&#039;]This could simply be because 2-opt does not provide the required permutations to be able to reach the optimal path, but still demonstrates the required tradeoff between approximate solutions and exact algorithms, a tradeoff of time vs accuracy.Comparison of SolutionsDesign FeaturesAs discussed above, Held-Karp (the exact algorithm) used the principle of dynamic programming to split the larger problem into instances of the similar overlapping subproblems that can be solved recursively. By utilising the fact that every subpath of a path of minimum distance is itself of minimum distance, we can recursively reduce the size of the visit set by one and solve for the smaller cases. In this case, due to the TSP&#039;s intractability, this only decreases the time complexity from factorial to exponential, saving time by ensuring that subpaths are not re-calculated.On the other hand, the combination of algorithms that produce the approximate solutions operate based off a variety of design principles.The initial candidate solution generated by the NN Heuristic uses a greedy design pattern to find a possible path. This design pattern does not work with many problems (including the TSP) because sometimes things have to get worse for an overall better result.Demonstrated above, the greedy design feature would select &quot;3&quot; as it is the best option visible at the time, but will end up selecting a far worse solution that could easily be avoided with some intuition for what comes afterwards.Nonetheless, the greedy design pattern in the NN heuristic generally produces a somewhat viable candidate, that is then improved upon by certain Generate and Test algorithms.One such algorithm is Hill Climbing, which refers to a type of local search optimisation technique that provides an iterative way to make incremental changes to a candidate and proceed if an improvement has been found.Simulated Annealing expands upon this idea by using a probabilistic technique to decide if we accept an incremental change or not. Both these local search algorithms allow for an exploration of adjacent solutions that help find an improved solution in a tractable way.The difference between the two approaches and their design patterns lies between the intended output. The dynamic programming approach guarantees a correct output, but since the requirements are slightly different for the approximate algorithms, a wider range of design techniques are available (such as using random probability or the Generate and Test pattern) that can get us closer to a better solution, even if it produces a non-deterministic non-optimal result.CoherenceOverall, Held-Karp is far more of a consistent and logical solution. Since the exact algorithm is inherently deterministic, it is always guaranteed to produce the same optimal result consistently. ¬†In contrast, the NN algorithm&#039;s performance can vary widely depending on the arrangement of nodes and both the optimisation algorithms use probability to pick  and  values. Simulated annealing is also non-deterministic ( probabilistic), meaning that it is nowhere near as consistent as Held-Karp. That being said, Simulated Annealing does seem to converge consistently on the same or similar local optima based on its input parameters, so we can render it more coherent than Hill Climbing but much less so than Held-Karp.The influence of this difference in consistency between the two approaches on the real world applications is key to deciding which approach is better. Exact algorithms would be preferred in scenarios where predictability and repeatability are crucial. For example, in scientific research studies on geographical data that is static, the superior coherence of Held-Karp would mean that the study is repeatable and verifiable by peers. On the other hand, the lower consistency of SA and HC are not necessarily disadvantageous in real world applications, because they can provide more flexibility and adaptability. Instead of providing only one solution, they provide many good candidates that the user can consider between. This flexibility would be ideal for larger operations such as a logistics company, where the clients and pickup points are very actively changing, and alternative routes need to be provided in case the algorithm does not account for real world disturbances such as road closures.Fitness for ProblemIn terms of fitness for the problem, it would be safe to say that the exact algorithm would be preferred for the initial problem described. Even though Held-Karp would have a larger space complexity (due to all the subpaths that need to be stored), a typical user&#039;s phone will have plenty of storage such that space should not be too much of an issue. The inefficient time complexity of the algorithm mostly relates to how it scales to larger visit set sizes, anything below  is barely noticeable to the typical user. Since most people will not be intending to travel in this fashion with such a large number of friends, it would likely be preferred to use the exact algorithm as it provides the optimal solution. This being said, Held-Karp is somewhat inflexible, especially when it comes to frequently changing data. As it only provides one path and one path only, it could be a bit of an issue when it does not account for certain data such as a bus replacement (very common around Victoria). As such, it might be best to use a combination of both in an application, defaulting to the modified Held-Karp but switching over to the approximate algorithms once  or more solutions are requested.Efficiency &amp; Time ComplexityAs established above, the improved Held-Karp algorithm maintains an exponential time complexity, similar enough to  that we can use this simplified version to come to more clear conclusions. Going through the pseudocode for the approximate algorithms, the algorithm to find a candidate solution is run first. In this case, this would be the Nearest Neighbour heuristic, which runs the following code for every node in the visit set (of size )closest_node = fetch_djk(current_vertex, visit, current_time)\npath.add(closest_node)\ncost += closest_node.cost\nvisit.remove(closest_node)\ncurrent_vertex = closest_nodeSince it runs Dijkstra&#039;s at every node, our time complexity for NN will just be . If we presume that the above optimisations for Dijkstra were effective then this would be at  (the generally accepted time complexity for Dijkstra&#039;s using min heaps), but even if this was not the case, we would have a time complexity of . This provides an NN time complexity of .In terms of Hill Climbing, during every iteration , the algorithm runs the following pseudocode:cost = calculate_cost(candidate, current_time)\nu = random number from 1 to len(candidate) - 1 inclusive\nv = random number from u to len(candidate) - 1 inclusive\n\nnew_tour = pairwise_swap(u, v, candidate)\nnew_cost = calculate_cost(new_tour, current_time)\n\nif new_cost  accept\n    Go again with the new tour\nelse:\n    // new cost is worse -&gt; go again\n    Go again with the same tourFirst, the cost of the candidate is evaluated. This requires us to run Dijkstra&#039;s on each node in the visit set again, but since the output of Dijkstra&#039;s is cached, this would actually only take  time. Next, a pairwise swap is done, which adds every node in the visit set to a new array in a differing order which is also in  time. Finally, the cost is calculated again, leaving us with a final total of . Overall, this means that this process is done in linear time for  iterations, leaving a final time complexity of . Simulated Annealing has the exact same time complexity as Hill Climbing because the only major difference is if a candidate solution is accepted or not and this is done in  time because the time complexity of selecting a random number is .This leaves us with a final time complexity of  = . Tractability &amp; ImplicationsAs discussed above, the time complexity for the exact algorithm is effectively  and the time complexity for the approximate algorithms is  where  is the size of the visit set,  is the number of landmarks in the graph overall and  is the amount of times that the optimisation algorithm will iterate.  will typically be a constant and can therefore be ignored and for the same input graph (this assumption was made for the simplification of Held-Karp too)  will be constant as well.In effect, this means that for the same input graph, the time complexities we are looking at are  vs  as the visit set size increases by a constant factor. The vast difference between these two time complexities shows how easily approximate solutions can be derived in polynomial time, which helps make this problem more tractable. Namely, this demonstrates that the problem of finding a solution to the TSP within a set factor of the optimal solution is a tractable one, even if finding the actual optimal solution is not.This has many implications for the real world applications of the broader version of this problem. Though the discussion above concluded that the exact algorithm would be superior for the initial specified problem, the tradeoff of lower accuracy for an improved time complexity can be beneficial to many use-cases. Below is a list of applications that would be better suited to either type of algorithm:Exact Algorithm:An exact algorithm would be well suited to static non-changing data where time is not much of a concern but the best solution is required. In a scenario where large freeways need to be built to visit a few key cities, the geographical data remains mostly static since the overall terrain does not change suddenly, but an inefficient solution could cost millions. Similarly, in wartime where tunnels and bunker networks need to be built that connect everyone to a few key locations, a few extra kilometres could result in hundreds of lost lives. In cases like this, provided that the number of key locations is sufficiently small, users would likely not mind waiting for a more optimal output.Approximate Algorithm:As discussed previously, an approximate algorithm would be very well suited to logistics/trucking companies that have to move a lot of shipments and goods across the country fast. The nature of real world companies means that clients would appear and disappear on a daily basis, and there are always new locations to be delivered to or picked up from. Since the input graph is dynamically changing, an exact solution would be very quickly out of date and an  time complexity would be preferred over the intractable  complexity since the amount of pickup points would simply be so large.An approximate algorithm would be well suited to data routing, specifically peer to peer networks that want to connect a large group of people. For example, a P2P video conferencing call would need to find a sufficiently small closed walk to ensure that the call has minimal delay. Since the input data for this case would be constantly changing (people leaving and joining with variable bandwidths), it would need to be run very often, and an intractable solution would not suffice.This being said, most applications would be better suited to a combination of both. With a small number of nodes in the visit set, the intractability of finding an exact solution is not much of an issue, as the speeds are virtually instant anyway, but anything above about 15 to 20 nodes will render the computational time to be prohibitive. As such, for most real world applications, it makes more sense to use a combination of both the algorithms and switch over once the input size has exceeded the practical time constraints a layman user would expect. Such is the case with the initial solution, as described above.\\newpageAppendixInitial PseudocodeThe following is the final pseudocode reiterated from the previous 2 parts, namely for convenience while analysing, since multiple modifications were made to the initial pseudocode. A Python implementation of this pseudocode can be found here.Let  starting vertexLet  ending vertexLet  or any other vertices to be visited along the way.Let  (random node in )Main Functionfunction main(\n    friends: dictionary,\n    landmarks: dictionary,\n    routes: dictionary,\n    timetable: dictionary\n):\n    // global variable declarations\n    concession: bool = Ask the user &quot;Do you posses a concession card?&quot;\n    holiday: bool = Ask the user &quot;Is today a weekend or a holiday?&quot;\n    user_name: string = Ask the user to select a friend from friends dictionary\n    selected_time = Ask the user what time they are leaving\n    \n    cached_djk: dictionary = empty dictionary\n    edge_lookup_matrix: matrix = |V| x |V| matrix that stores a list of edges in each entry\n    \n    // get distance of all friends from landmarks\n    friend_distances: dictionary = calculate_nodes(friends, landmarks)\n    visit_set: set = set of all closest nodes from friend_distances\n    people_at_nodes: dictionary = all friends sorted into keys of which nodes they are closest to, from visit_set\n    \n    home: string = closest node of user_name\n    \n    print all friends, where they live closest to and how far away\n    \n    print out friends that would take more than 20 minutes to walk (average human walking speed is 5.1 km/h)\n    \n    hamiltonian_path = held_karp(home, home, visit_set, selected_time)\n    \n    print how much the trip would cost and how long it would take\n    \n    print the path of the hamiltonian_path\nend functionCalculate Nodesfunction calculate_nodes (\n    friend_data: dictionary,\n    node_data: dictionary\n):\n    for friend in friend_data:\n        home: tuple = friend[&#039;home&#039;]\n        // initial min vals that will be set to smallest iterated distance\n        min: float = infinity\n        min_node: node = null\n        \n        for node in node_data:\n            location: tuple = node[&#039;coordinates&#039;]\n            // find real life distance (functional abstraction)\n            distance: float = latlong_distance(home, location)\n            if distance &lt; min:\n                min = distance\n                min_node = node\n        \n        distance_dict[friend][&#039;min_node&#039;] = min_node\n        distance_dict[friend][&#039;distance&#039;] = min\nend functionHeld-Karpfunction held_karp (\n    start: node,\n    end: node,\n    visit: set,\n    current_time: datetime\n):\n    if visit.size = 0:\n        djk = fetch_djk(start, end, current_time)\n        return djk[&#039;cost&#039;]\n    else:\n        min = infinity\n        For node C in set S:\n            sub_path = held_karp(start, C, (set \\ C), current_time)\n            djk = fetch_djk(C, end, current_time + toMinutes(sub_path[&#039;cost&#039;]))\n            cost = sub_path[&#039;cost&#039;] + djk[&#039;cost&#039;]\n            if cost &lt; min:\n                min = cost\n        return min\nend functionDijkstra&#039;sfunction dijkstras (\n    start: node,\n    current_time: datetime\n):\n    // Set all node distance to infinity\n    for node in graph:\n        distance[node] = infinity\n        predecessor[node] = null\n        unexplored_list.add(node)\n    \n    // starting distance has to be 0\n    distance[start] = 0\n    \n    // while more to still explore\n    while unexplored_list is not empty:\n        min_node = unexplored node with min cost\n        unexplored_list.remove(min_node)\n    \n        // go through every neighbour and relax\n        for each neighbour of min_node:\n            current_dist = distance[min_node] + dist(min_node, neighbour, current_time + to_minutes(distance[min_node]))\n            // a shorter path has been found to the neighbour -&gt; relax value\n            if current_dist &lt; distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n    \n    return {\n        &#039;distances&#039;: distance,\n        &#039;predecessors&#039;: predecessor,\n    }\nend functionFetch Dijkstra&#039;s (Cached)cached_djk = dictionary of node -&gt; dict\n\nfunction fetch_djk (\n    start: node,\n    end: node,\n    current_time: datetime,\n):\n    name = start + &#039;@&#039; + current_time\n    \n    if cached_djk[name] does not exists:\n        cached_djk[name] = dijkstras(start, current_time)\n    \n    djk = cached_djk[name]\n    # reconstructs the path  \n    path = [end] as queue\n    while path.back != start:\n        path.enqueue(djk[&#039;predecessors&#039;][path.back])\n    \n    return {\n        &#039;distance&#039;: djk[&#039;distances&#039;][end],\n        &#039;path&#039;: path\n    }\nend functionDistance Functionfunction dist (\n    start: node,\n    end: node,\n    current_time: datetime\n):\t\n    // if the start and end node are the same, it takes no time to get there\n    if start = end:\n        return 0\n    else if edges = null:\n        // if no edge exists between nodes\n        return infinity\n    \n    edges = edge_lookup_matrix[start][end]\n    distances = []\n    \n    // go over each possible edge between nodes (multiple possible)\n    for edge in edges:\n        line = edge.line\n        // next time bus/train will be at node (functional abstraction)\n        next_time = soonest_time_at_node(timetable, line, start, current_time)\n        wait_time = next_time - current_time\n        distances.add(edge.weight + wait_time)\n    \n    return min(distances)\nend function\\newpageModified Exact Algorithm PseudocodeBelow is the final pseudocode for the exact algorithm, based on Held-Karp. A Python implementation of the following pseudocode can be found here.Let  starting vertexLet  ending vertexLet  or any other vertices to be visited along the way.Let  (random node in )Main Functionfunction main(\n    friends: dictionary,\n    landmarks: dictionary,\n    routes: dictionary,\n    timetable: dictionary\n):\n    // global variable declarations\n    concession: bool = Ask the user &quot;Do you posses a concession card?&quot;\n    holiday: bool = Ask the user &quot;Is today a weekend or a holiday?&quot;\n    user_name: string = Ask the user to select a friend from friends dictionary\n    selected_time = Ask the user what time they are leaving\n    \n    cached_djk: dictionary = empty dictionary\n    edge_lookup_matrix: matrix = |V| x |V| matrix that stores a list of edges in each entry\n    \n    // get distance of all friends from landmarks\n    friend_distances: dictionary = calculate_nodes(friends, landmarks)\n    visit_set: set = set of all closest nodes from friend_distances\n    people_at_nodes: dictionary = all friends sorted into keys of which nodes they are closest to, from visit_set\n    \n    home: string = closest node of user_name\n    \n    print all friends, where they live closest to and how far away\n    \n    print out friends that would take more than 20 minutes to walk (average human walking speed is 5.1 km/h)\n    \n    hamiltonian_path = fetch_hk(home, home, visit_set, selected_time)\n    \n    print how much the trip would cost and how long it would take\n    \n    print the path of the hamiltonian_path\nend functionCalculate Nodesfunction calculate_nodes (\n    friend_data: dictionary,\n    node_data: dictionary\n):\n    for friend in friend_data:\n        home: tuple = friend[&#039;home&#039;]\n        // initial min vals that will be set to smallest iterated distance\n        min: float = infinity\n        min_node: node = null\n        \n        for node in node_data:\n            location: tuple = node[&#039;coordinates&#039;]\n            // find real life distance (functional abstraction)\n            distance: float = latlong_distance(home, location)\n            if distance &lt; min:\n                min = distance\n                min_node = node\n        \n        distance_dict[friend][&#039;min_node&#039;] = min_node\n        distance_dict[friend][&#039;distance&#039;] = min\nend functionHeld-Karpfunction held_karp (\n    start: node,\n    end: node,\n    visit: set,\n    current_time: datetime\n):\n    if visit.size = 0:\n        djk = fetch_djk(start, end, current_time)\n        return djk[&#039;cost&#039;]\n    else:\n        min = infinity\n        For node C in set S:\n            sub_path = fetch_hk(start, C, (set \\ C), current_time)\n            djk = fetch_djk(C, end, current_time + toMinutes(sub_path[&#039;cost&#039;]))\n            cost = sub_path[&#039;cost&#039;] + djk[&#039;cost&#039;]\n            if cost &lt; min:\n                min = cost\n        return min\nend functionFetch Held-Karp (Cached)cached_hk = dictionary of list -&gt; dict\n\nfunction fetch_hk (\n    start: node, \n    end: node,\n    visit: set of nodes,\n    current_time: datetime,\n):\n    // unique identifier\n    name = start + &#039;-&#039; + end + visit set + &#039;@&#039; + current_time\n    if cached_hk[name] does not exists:\n        cached_hk[name] = held_karp(start, end, visit, current_time)\n    return cached_hk[name]\nend functionDijkstra&#039;sfunction dijkstras (\n    start: node,\n    current_time: datetime\n):\n    unexplored = empty min priority queue of nodes based on distance\n    \n    // Set all node distance to infinity\n    for node in graph:\n        distance[node] = infinity\n        predecessor[node] = null\n        unexplored.add(node)\n    \n    // starting distance has to be 0\n    distance[start] = 0\n    \n    // while more to still explore\n    while unexplored is not empty:\n        min_node = unexplored.minimum_node()\n        unexplored.remove(min_node)\n    \n        // go through every neighbour and relax\n        for each neighbour of min_node:\n            current_dist = distance[min_node] + dist(min_node, neighbour, current_time + to_minutes(distance[min_node]))\n            // a shorter path has been found to the neighbour -&gt; relax value\n            if current_dist &lt; distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n    \n    return {\n        &#039;distances&#039;: distance,\n        &#039;predecessors&#039;: predecessor,\n    }\nend functionFetch Dijkstra&#039;s (Cached)cached_djk = dictionary of node -&gt; dict\n\nfunction fetch_djk (\n    start: node,\n    end: node,\n    current_time: datetime,\n):\n    name = start + &#039;@&#039; + current_time\n    \n    if cached_djk[name] does not exists:\n        cached_djk[name] = dijkstras(start, current_time)\n    \n    djk = cached_djk[name]\n    # reconstructs the path  \n    path = [end] as queue\n    while path.back != start:\n        path.enqueue(djk[&#039;predecessors&#039;][path.back])\n    \n    return {\n        &#039;distance&#039;: djk[&#039;distances&#039;][end],\n        &#039;path&#039;: path\n    }\nend functionDistance Functionfunction dist (\n    start: node,\n    end: node,\n    current_time: datetime\n):\t\n    // if the start and end node are the same, it takes no time to get there\n    if start = end:\n        return 0\n    else if edges = null:\n        // if no edge exists between nodes\n        return infinity\n    \n    edges = edge_lookup_matrix[start][end]\n    distances = []\n    \n    // go over each possible edge between nodes (multiple possible)\n    for edge in edges:\n        wait_time = wait time from data (precomputed)\n        distances.add(edge.weight + wait_time)\n    \n    return min(distances)\nend function\\newpageApproximate Algorithm PseudocodeBelow is the final pseudocode for the approximate algorithm, using Simulated Annealing. A Python implementation of the following pseudocode can be found here.Let  starting vertexLet  ending vertexLet  or any other vertices to be visited along the way.Let  (random node in )Main Functionfunction main(\n    friends: dictionary,\n    landmarks: dictionary,\n    routes: dictionary,\n    timetable: dictionary\n):\n    // global variable declarations\n    concession: bool = Ask the user &quot;Do you posses a concession card?&quot;\n    holiday: bool = Ask the user &quot;Is today a weekend or a holiday?&quot;\n    user_name: string = Ask the user to select a friend from friends dictionary\n    selected_time = Ask the user what time they are leaving\n    \n    cached_djk: dictionary = empty dictionary\n    edge_lookup_matrix: matrix = |V| x |V| matrix that stores a list of edges in each entry\n    \n    // get distance of all friends from landmarks\n    friend_distances: dictionary = calculate_nodes(friends, landmarks)\n    visit_set: set = set of all closest nodes from friend_distances\n    people_at_nodes: dictionary = all friends sorted into keys of which nodes they are closest to, from visit_set\n    \n    home: string = closest node of user_name\n    \n    print all friends, where they live closest to and how far away\n    \n    print out friends that would take more than 20 minutes to walk (average human walking speed is 5.1 km/h)\n    \n    candidate = candidate_solution(home, home, visit_set, selected_time)\n    hamiltonian_path = simulated_annealing(candidate[&#039;path&#039;], selected_time)\n    // or hill_climbing(candidate[&#039;path&#039;], selected_time)\n    \n    hamiltonian_path[&#039;path&#039;] = normalise_path(hamiltonian_path[&#039;path&#039;], selected_time)\n    \n    print how much the trip would cost and how long it would take\n    \n    print the path of the hamiltonian_path\nend functionCalculate Nodesfunction calculate_nodes (\n    friend_data: dictionary,\n    node_data: dictionary\n):\n    for friend in friend_data:\n        home: tuple = friend[&#039;home&#039;]\n        // initial min vals that will be set to smallest iterated distance\n        min: float = infinity\n        min_node: node = null\n        \n        for node in node_data:\n            location: tuple = node[&#039;coordinates&#039;]\n            // find real life distance (functional abstraction)\n            distance: float = latlong_distance(home, location)\n            if distance &lt; min:\n                min = distance\n                min_node = node\n        \n        distance_dict[friend][&#039;min_node&#039;] = min_node\n        distance_dict[friend][&#039;distance&#039;] = min\nend functionCandidate Solution (NN Heuristic)// creates a canditate solution using the NN Heuristic\nfunction canditate_solution (\n    start: node, \n    end: node,\n    visit: set of nodes,\n    current_time: datetime,\n):\n    path = [start]\n    current_vertex = start\n    cost = 0\n    \n    while len(visit) != 0:\n        closest_node = fetch_djk(current_vertex, visit, current_time)\n        path.add(closest_node)\n        cost += closest_node.cost\n        visit.remove(closest_node)\n        current_vertex = closest_node\n    \n    // go back to the end node\n    closest_node = fetch_djk(current_vertex, end, current_time)\n    path.add(closest_node)\n    cost += closest_node.cost\n    \n    return {&#039;path&#039;: path, &#039;cost&#039;: cost}\nend functionPairwise Swapfunction pairwise_swap (\n    u: integer,\n    v: integer,\n    path: path of nodes\n):\n    new_tour = []\n    \n    for i in [0, u]:\n        new_tour.add(path[i])\n    for i in [v, u):\n        new_tour.add(path[i])\n    for i in (v, len(path)]:\n        new_tour.add(path[i])\n    \n    return new_tour\nend functionCalculate Costfunction calculate_cost (\n    path: path of nodes,\n    current_time: datetime\n):\n    cost = 0\n    time = current_time\n    \n    for i from 0 to len(path) - 1:\n        djk = fetch_djk(path[i], path[i + 1], current_time)\n        cost += djk[&#039;cost&#039;]\n        time += djk[&#039;cost&#039;] number of minutes\n    \n    return cost\nend functionHill Climbingfunction hill_climbing (\n    candidate: path of nodes,\n    current_time: datetime,\n    fail_count: int = 0\n):\n    if fail_count &lt; 200:\n        cost = calculate_cost(candidate, current_time)\n        u = random number from 1 to len(candidate) - 1 inclusive\n        v = random number from u to len(candidate) - 1 inclusive\n        \n        new_tour = pairwise_swap(u, v, candidate)\n        new_cost = calculate_cost(new_tour, current_time)\n        \n        if new_cost  accept\n            return hill_climbing(new_tour, current_time, 0)\n        else:\n            // new cost is worse -&gt; go again\n            return hill_climbing(candidate, current_time, fail_count + 1)\n    else:\n        return candidate\nend functionSimulated Annealingfunction simulated_annealing (\n    candidate: path of nodes,\n    current_time: datetime,\n):\n    // parameters to fiddle with\n    temp = 0.98\n    min_temp = 0.00001\n    temp_change = 5\n    beta = 1.2\n    alpha = 0.85\n    \n    old_cost = calculate_cost(candidate, current_time)\n    \n    while temp &gt; min_temp:\n        for n from 1 to temp_change:\n            u = random number from 1 to len(candidate) - 1 inclusive\n            v = random number from u to len(candidate) - 1 inclusive\n            \n            new_tour = pairwise_swap(u, v, candidate)\n            new_cost = calculate_cost(new_tour, current_time)\n            \n            ap = acceptance_probability(old_cost, new_cost, beta, temp)\n            \n            if ap &gt; random float from 0 to 1:\n                candidate = new_tour\n                old_cost = new_cost\n            \n        temp *= alpha\n        \n    return candidate\nend functionAcceptance Probabilityfunction acceptance_probability (\n    old_cost: number,\n    new_cost: number,\n    beta: number,\n    temp: number\n):\n    c = new_cost - old_cost\n    \n    if c Dijkstra&#039;sfunction dijkstras (\n    start: node,\n    current_time: datetime\n):\n    unexplored = empty min priority queue of nodes based on distance\n    \n    // Set all node distance to infinity\n    for node in graph:\n        distance[node] = infinity\n        predecessor[node] = null\n        unexplored.add(node)\n    \n    // starting distance has to be 0\n    distance[start] = 0\n    \n    // while more to still explore\n    while unexplored is not empty:\n        min_node = unexplored.minimum_node()\n        unexplored.remove(min_node)\n    \n        // go through every neighbour and relax\n        for each neighbour of min_node:\n            current_dist = distance[min_node] + dist(min_node, neighbour, current_time + to_minutes(distance[min_node]))\n            // a shorter path has been found to the neighbour -&gt; relax value\n            if current_dist &lt; distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n    \n    return {\n        &#039;distances&#039;: distance,\n        &#039;predecessors&#039;: predecessor,\n    }\nend functionFetch Dijkstra&#039;s (Cached)cached_djk = dictionary of node -&gt; dict\n\nfunction fetch_djk (\n    start: node,\n    end: node,\n    current_time: datetime,\n):\n    name = start + &#039;@&#039; + current_time\n    \n    if cached_djk[name] does not exists:\n        cached_djk[name] = dijkstras(start, current_time)\n    \n    djk = cached_djk[name]\n    # reconstructs the path  \n    path = [end] as queue\n    while path.back != start:\n        path.enqueue(djk[&#039;predecessors&#039;][path.back])\n    \n    return {\n        &#039;distance&#039;: djk[&#039;distances&#039;][end],\n        &#039;path&#039;: path\n    }\nend functionDistance Functionfunction dist (\n    start: node,\n    end: node,\n    current_time: datetime\n):\t\n    // if the start and end node are the same, it takes no time to get there\n    if start = end:\n        return 0\n    else if edges = null:\n        // if no edge exists between nodes\n        return infinity\n    \n    edges = edge_lookup_matrix[start][end]\n    distances = []\n    \n    // go over each possible edge between nodes (multiple possible)\n    for edge in edges:\n        wait_time = wait time from data (precomputed)\n        distances.add(edge.weight + wait_time)\n    \n    return min(distances)\nend functionNormalising Functionfunction normalise_path (\n    path: path of nodes,\n    current_time: datetime\n):\n    return_path = []\n    time = current_time\n    \n    for i from 0 to len(path) - 1:\n        djk = fetch_djk(path[i], path[i + 1], current_time)\n        time += djk[&#039;cost&#039;] number of minutes\n        // this is to prevent the last and first item double up\n        return_path += everything in djk[&#039;path&#039;] except last item\n    \n    return_route.add(last item in route)\n    \n    return cost\nend function\n"},"notes/School-Subjects/Algorithmics/Time-Complexity":{"title":"Time Complexity","links":[],"tags":[],"content":"Dictionaries are O(1) time"},"notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-1/Goat-Cabbage-Wolf-Hunter":{"title":"Goat Cabbage Wolf Hunter","links":[],"tags":[],"content":"\n\n                  \n                  Info \n                  \n                \nYou have 4n counters of 4 types: n wolves, n goats, n cabbages, and n hunters. The aim is to place them in a row such that no-one is in danger: no hunter is next to a wolf, no wolf is next to a goat, no goat is next to a cabbage. Also no two counters may be placed next to each other. How many ways are there to solve the puzzle?\n\nFirst you can write down the rules in the opposite way. The question defines what can‚Äôt be next to what, so we can say what can be next to what.\nG can be next to H\nH can be next to C &amp; G\nW can be next to C\nC can be next to H &amp; W\nThis can be visualised by turning each into its own node, and making arrows to what it can be next to:\nW &lt;‚Äî&gt; C &lt;‚Äî&gt; H &lt;‚Äî&gt; G\nflowchart TD\n1[Wolf] &lt;--&gt; Cabbage &lt;--&gt; Hunter &lt;--&gt; Goat\n\nEvidently from this we can see that for all n, the sequence must start at W or G, because if it does not we would not be able to have an equal amount of all counters. For example, for n = 1, we can do WCHG or GHCW. For n = 2 we can do, WCWCHGHG or GHGHCWCW, and so on, given our restriction of all counters being equal in number.\n‚à¥ We can conclude that for all n, there are two solutions, starting with either W or G\n(this ended up being quite a similar answer to Blake, great minds must think alike haha)"},"notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-1/Task-3":{"title":"Task 3","links":[],"tags":[],"content":"a) You could fill up the 3 litre jug, pour it into the 5 litre jug, fill up the 3 litre jug again, pour as much as you can into the 5 litre jug until it is full, meaning you will have 1 litre remaining in the 3 litre jug, and finally empty the 5 litre jug. This leaves you with just 1 litre in the 3 litre jug.\nb) You could probably write it out in steps\n\nFill up the 3 litre jug so it is full\nPour this amount into the 5 litre jug\nFill up the 3 litre jug so it is full\nPour water from the 3 litre jug into the 5 litre jug until the 5 litre jug is full, leaving a litre in the 3 litre jug\nEmpty the 5 litre jug\n\nc) Yes, I made a diagram and it seems to be the most efficient"},"notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-2/Locker-Door-Problem":{"title":"Locker Door Problem","links":[],"tags":[],"content":"\n\n                  \n                  Info \n                  \n                \nThere are¬†n¬†lockers in a hallway, numbered sequentially from 1 to¬†n. Initially all the locker doors are closed. You make¬†n¬†passes by the lockers, each time starting with locker 1.\nOn the¬†ith¬†path, i = 1,2,‚Ä¶n¬†you toggle the door of every¬†ith¬†locker; if the door is closed, you open it; if it is open, you close it.\nAfter the last pass, which locker doors are open and which are closed? How many of them are open?\n\nn = input(&#039;Please enter a value for n, the amount of locker doors: &#039;)  \n  \n# validate n as positive integer  \nwhile True:  \n    try:  \n        n = int(n)  \n        if n &lt;= 0:  \n            print(&#039;n must be a positive integer&#039;)  \n            n = input(&#039;Please enter a value for n, the amount of locker doors: &#039;)  \n        else:  \n            break  \n    except ValueError:  \n        print(&#039;n must be a positive integer&#039;)  \n        n = input(&#039;Please enter a value for n, the amount of locker doors: &#039;)  \n  \nprint(f&#039;\\nStarting algorithm with {n} locker doors&#039;)  \n  \ndoors = [False] * n  \n  \nfor door in range(1, n + 1):  \n    for i in range(door, n + 1, door):  \n        doors[i - 1] = not doors[i - 1]  \n  \nprint(doors)  \nprint(f&#039;There are a total of {sum(doors)} doors open at the end&#039;)"},"notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-2/Sweet-Treats-Pseudocode":{"title":"Sweet Treats Pseudocode","links":[],"tags":[],"content":"\n\n                  \n                  Info \n                  \n                \nComplete the following algorithm using pseudocode to instruct the factory‚Äôs robotic arm to sort the sweets into their individual colour buckets so that the packing process can begin.\n\nBegin sorting\nWhile sweet in tub\nGrab sweet\nCheck sweet colour\nIf colour = pink\nThen place the sweet bucket\nElse if colour = green\nThen place in the green bucket\nElse if colour = purple\nThen place in the purple bucket\nElse if colour = orange\nThen place in the orange bucket\nElse if colour = yellow\nThen place in the yellow bucket\nEnd While\nEnd sorting\n\n\n                  \n                  Info \n                  \n                \nExtend upon the algorithm you developed in Exercise 1 to allow the program to count the total number of sweets sorted and the quantity of each colour placed into the individual buckets.\n\nBegin sorting\nSet total sweets to zero\nSet pink, green, purple and yellow to zero\nWhile sweet in tub\nGrab sweet\nAdd 1 to total sweets\nCheck sweet colour\nIf colour = pink\nThen place the sweet bucket\nAdd 1 to pink count\nElse if colour = green\nThen place in the green bucket\nAdd 1 to green count\nElse if colour = purple\nThen place in the purple bucket\nAdd 1 to purple count\nElse if colour = orange\nThen place in the orange bucket\nAdd 1 to orange count\nElse if colour = yellow\nThen place in the yellow bucket\nAdd 1 to yellow count\nEnd While\nEnd sorting\n\n\n                  \n                  Info \n                  \n                \nOn a scale of 1 to 10, how likely are you to use pseudocode to help you design your next program? Justify your response.\n\nProbably like a 2, since typing in a hybrid language is generally not too useful in terms of time, since the in languages where the syntax is simple (like Python), pseudocode is almost equivalent to the syntax."},"notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-2/Writing-Pseudocode":{"title":"Writing Pseudocode","links":[],"tags":[],"content":"\n\n                  \n                  Info \n                  \n                \nWrite an algorithm in pseudocode to find the area of a shape from the list {square, rectangle, circle}.\nConsider what inputs would be required for each shape.\n\nBegin AreaShape(Inputs: shapeType, d1, d2)\nSet Area to zero\nIf (Shape is a square OR Shape is a rectangle) Then\nArea = d1 * d2\nElse if (Shape is a circle) Then\nArea = pi * d1 ^ 2\nElse\nPrint ‚Äúinvalid shape‚Äù\nEnd If\nPrint Area\n\nEnd AreaShape\n\n\n                  \n                  Info \n                  \n                \nDesign an algorithm to find all the common elements in two sorted lists of numbers. For example, for the list A {2,5,5,5} and list B {2,2,3,5,5,7} the output should be 2,5,5.\nThink about what is the maximum number of comparisons your algorithm makes if the lengths of the two given lists are¬†m¬†and¬†n, respectively?\n\nBegin InCommon(Inputs: list1, list2)\nSet CommonList to empty\nSet list1_counter to 1\nSet list2_counter to 1\n\nRepeat until (counter for list1 is larger than list length OR counter for list2 is larger than list length)\n\tIf (list1[list1_counter] is equal to list2[list2_counter]) Then\n\t\tadd list1[list1_counter] to CommonList\n\t\tIncrement both counters\n\tElse If (list1[list1_counter] &lt; list2[list2_counter]) Then\n\t\tIncrement list1_counter\n\tElse If (list1[list1_counter] &gt; list2[list2_counter]) Then\n\t\tIncrement list2_counter\n\tEnd If\nEnd Loop\nReturn CommonList\n\nEnd InCommon"},"notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-4/Bridge-Crossing-Problem":{"title":"Bridge Crossing Problem","links":["tags/algo","tags/graphtheory"],"tags":["algo","graphtheory"],"content":"#algo#graphtheory\nFour friends need to cross a bridge. They start on the same side of the bridge.\nA maximum of two people can cross at any time.\nIt is night and they have just one lamp. People that cross the bridge must carry the lamp to see the way.\nA pair must walk together at the rate of the slower person.\n\nAnn takes 1 minute to cross\nBen takes 2 minutes to cross\nCon takes 7 minutes to cross\nDora takes 10 minutes to cross\n\nIn the forum, collaborate with your classmate:\n\nRepresent the model as a graph/digraph or tree.\nDescribe using Graph Terminology the properties of each model.\n\nAs you can see from this partial tree diagram (it was too much effort to complete it üò≠), the problem can also be modelled similar to events in probability, where every possible action after one action is noted down in a tree like structure.\nIn this case, the nodes represent a person (or pair) walking across the bridge, and the edges represent the process of crossing the bridge, the number showing the amount of time this takes.\ngraph TB\n A((A: 1))\n B((A: 2))\n C((A: 7))\n D((A: 10))\n\ngraph LR\n    S((Start)) --&gt;|2| A+B --&gt;|1| A1[A]\n    S --&gt;|7| A+C --&gt;|1| A2[A]\n    S --&gt;|10| A+D --&gt;|1| A3[A]\n    S --&gt;|7| B+C --&gt;|2| B1[B]\n    S --&gt;|10| B+D --&gt;|2| B2[B]\n    S --&gt;|10| C+D --&gt;|7| C1[C]\n    \n    A1 --&gt;|10| A+D1[A+D] --&gt;|1| A4[A] --&gt;|7| AC[A+C]\n    A1 --&gt;|7| A+C1[A+C] --&gt;|1| A5[A] --&gt;|10| AD[A+D]\n    \n    A2 --&gt;|2| A+B1[A+B] --&gt;|1| A6[A] --&gt;|10| A+D3[A+D]\n    A2 --&gt;|10| A+D2[A+D] --&gt;|1| A7[A] --&gt;|2| A+B2[A+B]\n    \n    A3 --&gt;|2| A+B3[A+B] --&gt;|1| A8[A] --&gt;|7| A+C2[A+C]\n    A3 --&gt;|7| A+C3[A+C] --&gt;|1| A9[A] --&gt;|2| A+B4[A+B]\n"},"notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-4/Graphs-as-ADTs":{"title":"Graphs as ADTs","links":["tags/algo","tags/graphtheory"],"tags":["algo","graphtheory"],"content":"#algo#graphtheory\n\n\n                  \n                  Info \n                  \n                \nFor each scenario below:\na) represent the model as a graph/digraph or tree\nb) describe the properties of the model using graph terminology.\n\n\nConnections of two light bulbs, a battery and a switch as an electric circuit with wire.\n\nflowchart LR\nA[Lightbulb] --&gt; B[Lightbulb]\nB --&gt; C[Switch]\nC --&gt; D[Battery]\nD --&gt; A\n\nThis is a connected, directed cyclic graph, where the nodes represent items in the circuit and the edges represent wires\n\nThe food chain of one of the following living things: cat, bird, bug, grasshopper, aphid, rose, daisy, wheat.\n\ngraph TB\n    A((Cat))--&gt;B((Bird))\n    B--&gt;C((Grasshopper))\n    B--&gt;D((Bug))\n    D--&gt;E((Aphid))\n    E--&gt;F((Roses))\n    C--&gt;G((Daisy))\n    C--&gt;H((Wheat))\n\nThis would be a directed tree, where the root is the top of the food chain. The leaves of the tree are the bottom of the food chain (Roses, Daisy and Wheat). Nodes represent living things and edges who eats what. Edges represent who eats what, the tail being the eater and the head being the food.\n\nA character map of your favourite TV show or film.\nAllies and enemies from World War II.\nThe main elements of the story of Goldilocks and The Three Bears.\n"},"notes/School-Subjects/English-Language/English-Language":{"title":"English Language","links":["tags/englang","tags/subject","notes/School-Subjects/English-Language/Year-11/Transition-Period/The-Eloquent-Ape","notes/School-Subjects/English-Language/Year-11/Transition-Period/Interesting-English-Language-Articles","notes/School-Subjects/English-Language/Year-11/Transition-Period/Freedom-of-Speech-Essay","notes/School-Subjects/English-Language/Year-11/What-is-a-Language/What-is-a-Language-q","notes/School-Subjects/English-Language/Year-11/What-is-a-Language/Variables-of-Communication","notes/School-Subjects/English-Language/Year-11/What-is-a-Language/Features-of-Language","notes/School-Subjects/English-Language/Year-11/Subsystems/Phonetics-&-Phonology","notes/School-Subjects/English-Language/Year-11/Subsystems/Morphology-&-Lexicology","notes/School-Subjects/English-Language/Year-11/Subsystems/Syntax","notes/School-Subjects/English-Language/Year-11/What-is-a-Language/Key-Terms"],"tags":["englang","subject"],"content":"#englang#subject\nUnit 1 ¬ß\n\n\nTransition Program ¬ß\n\nRead about Helen Thompson‚Äôs The Eloquent Ape\nFind two Interesting English Language Articles and share them with the class\nWrite a short 4 - 500 word essay on why ‚ÄùFreedom of speech gives people the right to use hate speech‚Äù\n\n\nWeek 1:\n\nWhat is a Language?\nVariables of Communication\nFeatures of Language\n\n\nWeek 2: lol, skipped\nWeek 3:\n\nPhonetics &amp; Phonology\n\n\nWeek 4 &amp; 5:\n\nMorphology &amp; Lexicology\n\n\nWeek 6:\n\nSyntax\nKey Terms\n\n\n"},"notes/School-Subjects/English-Language/Year-11/Child-Language-Acquisition/Bilingualism":{"title":"Bilingualism","links":["tags/englang","tags/cla","tags/card"],"tags":["englang","cla","card"],"content":"#englang#cla\nDevelopment ¬ß\nChildren can become bilingual or multilingual in two ways:\nConsecutive#card ¬ß\nChild learns one language, then another\n\nSimultaneous#card ¬ß\nChild learns both languages at once\nStages ¬ß\nSimultaneous bilinguals go through three stages in their development.\nStage 1 ¬ß\nLexicon consists of mixture of words (usually not translations of each other)\nStage 2 ¬ß\nMixing of languages in same utterances\nStage 3 ¬ß\nSeparation into two lexicons, although grasping syntactic and morphological complexity of languages takes greater time\n"},"notes/School-Subjects/English-Language/Year-11/Child-Language-Acquisition/CLA-Glossary":{"title":"CLA Glossary","links":["tags/englang","tags/cla","tags/card","notes/School-Subjects/English-Language/Year-11/Subsystems/Semantics","notes/School-Subjects/English-Language/Year-11/Subsystems/Morphology-&-Lexicology"],"tags":["englang","cla","card"],"content":"#englang#cla\nAdjacency pairs#card ¬ß\na simple structure of two (three) turns.\nIn conversation¬†analysis, an¬†adjacency pair¬†is a two-part exchange in which the second¬†utterance¬†is functionally dependent on the first, as exhibited in conventional greetings, invitations, and requests.\nExample: Hi Garv, how are you? Good thanks, what about you?\n\nAlliteration#card ¬ß\nrepeated phonemes at the beginnings of words¬†\n\nAlphabetic principle#card ¬ß\nthe understanding that there are systematic and predictable relationships between written letters and spoken sounds¬†\n\nAmelioration#card ¬ß\nthe process by which words or phrases become more positive in meaning over time. A type of Semantic Change.\n\nBabbling#card ¬ß\nvocal play that involves forming vowel and consonant sounds¬†\n\nBehaviourism#card ¬ß\na learning theory that focuses on the idea that actions are generally a response to external factors¬†\n\nChild-directed speech#card ¬ß\nthe particular variation of language used by a caregiver when interacting with young children (other terminology includes motherese, parentese, caretaker speech)¬†\n\nCode switching#card ¬ß\nswitching from one language or dialect to another, depending on the speakers intended interlocutor or what they wish to accomplish¬†\n\nCommunicative competency#card ¬ß\nthe ability to understand the utterances of others and to be able to make oneself understood (Esp SLA)¬†\n\nConstructive approach#card ¬ß\nthe approach to language acquisition based on the idea that learners construct new ideas based on existing knowledge¬†\n\nContent words#card ¬ß\na word within an utterance that is vital to convey meaning¬†\n\nCooing#card ¬ß\nWhen the baby is making single vowel sounds like ‚Äòooh‚Äô or ‚Äòahh‚Äô. Distinct from crying but not yet forming recognisable vowels and consonants¬†\n\nDialect#card ¬ß\nvariation in words and structures associated with a geographical region¬†\n\nDiagraphs#card ¬ß\ntwo letters making one sound. E.g. ch as in ‚Äòchip‚Äô, sh as in ‚Äòshop‚Äô (consonant diagraphs), ea as in ‚Äòeat‚Äô oo as in ‚Äòboot‚Äô (vowel diagraphs)¬†\n\nDiscourse markers#card ¬ß\nwords and phrases or clauses that help to organise information flow.¬† E.g. ok, so, as I was saying, anyway¬†\n\nEgocentric#card ¬ß\nthinking of (considering) only of oneself, without understanding or regard for the feelings of others.¬†\n\nGrammatical words#card ¬ß\nwords within a sentence that are needed to indicate the relationship between content words (function words)¬†\n\nHigh-frequency words#card ¬ß\nwords which occur frequently in a language¬†\n\nHolophrastic stage#card ¬ß\nthe point in a child‚Äôs language development in which the child uses individual words to communicate more than that single word‚Äôs meaning¬†\n\nHomophones#card ¬ß\nsword that sounds the same (maybe spelt differently) but have difference meanings. E.g. saw, sore, soar¬†\n\nInflection#card ¬ß\nA change in the form of a word by an affix to express a grammatical function, such as a change in tense, mood, number or gender rather than changing the meaning of the word. Linked to Inflectional Morphemes.\n\nIdiolect#card ¬ß\nThe unique combination of words, expressions and constructions that an individual habitually uses. If you have ever mimicked a teacher‚Äôs habitual way of speaking to a class, you have noticed features of their idiolect.\nvariation in language use associated by an individual‚Äôs personalised ‚Äòspeech style‚Äô¬†\n\nInflectional functions#card ¬ß\nthe way that an affix shows grammatical category such as a verb tense or plural form of a noun¬†\n\nMean length of utterance (MLU)#card ¬ß\nthe way a typical utterance is calculated.¬† The number of words in a transcript divided by the number of ideas.¬† This will be much lower in children and language learners.¬†\n\nMismatch#card ¬ß\na label that is applied to an object or concept without a clear link. E.g. calling a dog ‚Äòa tea‚Äô¬†\n\nMore Knowledgeable Other#card ¬ß\n(MKO) the often older and always more knowledgeable participant in an interaction who might offer support to further the child‚Äôs (or language learner‚Äôs) language development or learning¬†\n\nMorphology#card ¬ß\nYou should know this one!¬†\n\nNativist theory#card ¬ß\na language learning theory that suggests an in-built capacity to acquire and make sense of language.¬† Chomsky‚Äôs theory of innateness fits into this category (L.A.D.)¬†\n\nNegative reinforcement#card ¬ß\ncorrection, negative feedback, or the lack of feedback, which might prevent the child (or language learner) from making the same error repeatedly¬†\n\nNonce words#card ¬ß\nAlso known as an occasionalism, nonce words are lexemes created for a single occasion to solve an immediate problem of communication. For example, the word ‚Äúwug‚Äù is a nonce word as it was only used for the occasion of the experiment.\n\nObject permanence#card ¬ß\nan understanding the objects continue to exist even when the cannot be seen or touched¬†\n\nOperant conditioning#card ¬ß\nthe idea that either a positive of a negative response given by a caregiver can influences the way in which a child talks on future occasions¬†\n\nOracy#card ¬ß\nthe use of speaking and listening skills¬†\n\nOver-extension#card ¬ß\nwhen a word is used more broadly to describe things other than the specific item to which the word actually applied¬†\n\nPejoration#card ¬ß\nthe process by which words of phrases become more negative over time¬†\n\nPhonetic spelling#card ¬ß\nwords that are spelt as they sound¬†\n\nPoverty of stimulus#card ¬ß\ntheory attributed to Chomsky that suggests the language to which a child is exposed is insufficient to support the development of language that occurs¬†\n\nProto-words#card ¬ß\n‚Äòmade up‚Äô words that a child will use to represent words they can not yet pronounce.¬† E.g. ‚Äòray-ray‚Äô for raisins¬†\n\nRecast#card ¬ß\nthe grammatically incorrect utterance is spoken back to the child, but in the corrected form. The term ‚ÄòRephrase‚Äô is used interchangeably here.¬†\n\nScaffolding#card ¬ß\nthe support provided by caregivers through modelling how speech ought to take place in order to help the child‚Äôs language development.¬†\n\nTricky words#card ¬ß\nwords that do not give a perfect or regular guide to pronunciation¬†\n\nTrigraph#card ¬ß\na cluster of three letters that represent one sound e.g. igh¬†\n\nUnder-extension#card ¬ß\nthe use of a word in a limited way which does not recognise its full meaning e.g. use ball to describe one type of ball (e.g. tennis ball but not football)¬†\n\nVirtuous error#card ¬ß\ngrammatical errors that are understandable and logical through an incorrect assumption being made about grammar rules (there is a good excuse for the error)\n"},"notes/School-Subjects/English-Language/Year-11/Child-Language-Acquisition/Developmental-Stages":{"title":"Developmental Stages","links":["tags/englang","tags/cla","tags/card"],"tags":["englang","cla","card"],"content":"#englang#cla\nStages of Linguistic Development#card ¬ß\nChildren go through 4 stages of linguistic development:\n\nPreverbal (0-11 months)\nHolophrastic (11-18 months)\nTelegraphic (1.5-2.5 years)\nMulti-word (2.5+ years)\nAccording to the textbook, more accurately:\nPre-verbal (0-5 months)\nBabbling (5-12 months)\nOne-word (12-18 months)\nTwo-word (18-24 months)\nTelegraphic (24-30 months)\nPost-telegraphic (30+ months)\n\n\nPreverbal Stage#card ¬ß\nIn this stage children communicate via:\n\nSoundless communication\nTurn taking/Eye gaze\nBody language\nAt about 5-7 months old: Talking sounds (babbling)\n\n\nHolophrastic Stage (one word utterances)#card ¬ß\nAround 12-18 months\nAt this stage:\n\nOne word can mean a range of sentences in this stage, ie doggie could be ‚ÄúHere comes the dog‚Äù, ‚ÄúI love the dog‚Äù or ‚ÄúThe dog is over there‚Äù\nChildren increase their understanding of intonation and gesture\nUsually, consonant vowels sounds\nCapable of around 50 words, but can understand a lot more\n\n"},"notes/School-Subjects/English-Language/Year-11/Child-Language-Acquisition/Snail-Transcript-Analysis":{"title":"Snail Transcript Presentation","links":[],"tags":[],"content":"Introduction ¬ß\n\n\nConversation between Bella, girl of 1 year 11 months, and her Grandmother in the garden about snails\n\n\nGrandmother is her caregiver, serves as MKO while helping Bella, the child, in her language development.\n\n\nThroughout presentation, red C for child, blue G for grandma\n\n\nBella well into the telegraphic stage, evidence provider later\n\n\nSubsystems developed into that expected of 2-3 year old, about 5 months ahead of expected language development\n\n\n‚ÄúWe are storytelling creatures, and as children we acquire language to tell those stories that we have inside us.‚Äù - Bruner, key theorist behind Interactionism\n\n\nBella learns how to describe the world around her by imitating and interacting with her MKO, grandma\n\n\nFeatures of Language ¬ß\nEmerging Subsystems ¬ß\naka Bella‚Äôs Developmental Stage\n\n\nWell into the telegraphic stage\n\n\nAt this point, Bella gone beyond two-word stage , producing coherent enough utterances, but somewhat lacking all the needed function words and morphemes to be syntactically accurate\n\n\nChildren in the telegraphic stage almost sounds like text messages, omitting unnecessary words.\n\n\nAlso gained the ability to ask basic questions, like ‚Äúwhere‚Äù or ‚Äúwhy‚Äù\n\n\nFor example, child might say ‚ÄúWhere daddy?‚Äù or ‚ÄúWhat that?‚Äù dropping the word *is\n\n\nLexical and Semantic Perspective:\n\nActively asking where questions: ‚ÄúWhere [n åd…ô sne…™j…ôl]‚Äù\nCan point and direct others: ‚ÄúLook! I see […ôn åd…ô sne…™j…ôw]‚Äù\n\nMorphological &amp; Syntactic Perspective\n\n\nWe can clearly see Bella well into stage as she is beginning to add grammatical morphemes to speech:\n\n‚Äú[d…õ…ôz] Mickey‚Äù uses contraction for ‚Äúthere is‚Äù\n‚ÄúLook he [p äd…™n] his head way up in sky‚Äù: still developing inflectional morpheme -ing, g-dropping: replacing /≈ã/ sound with /n/, putting -&gt; puttin‚Äô\n\n\n\nThat last utterance was outlier, MLU is approx 3.44 lexemes, while this utterance had 9 lexemes, much higher than mean\n\n\nThis is a common phrase, almost a collocation, possibly replacing the word sky with ‚Äúclouds‚Äù or ‚Äústars‚Äù.\n\n\nCommon phrase could have been repeated by MKO such as parents or grandmother and imitated by Bella, supporting Skinner‚Äôs Behaviourist ideas\n\n\nNonetheless, clear that Bella well into telegraphic stage, with good syntactic knowledge and understanding of location, and addition of the contractive ‚Äúis‚Äù and gerund  as part of speech.\nBeing said, still does not use many conjunctions or why questions, place approximately 5 months ahead of expected language development.\nSupported Theories ¬ß\naka Carer Strategies\n\n\nMainly supports behaviourism + interactionism, evidently learning through interaction with MKO\n\n\nLines that support cognitivism are present\n\nDisplays a proper understanding of location:\n\nG: ‚ÄúDo you see another one?‚Äù\nC: ‚Äú[ ån d…ô fla äw…ô]‚Äù\n\n\nShe would not be able to talk about location of snail if she didn‚Äôt understand location as concept, so cognitivism is supported in this way\n\nG: ‚ÄúDo you see another snail?‚Äù\nC: ‚Äú[…ôn d√¶ twiÀê]‚Äù\n\n\nBella has also begun to use simple prepositions, such as ‚Äúon‚Äù or ‚Äúin‚Äù\n\n\n\nNot much evidence of innateness ‚àµ lack of ‚Äúvirtuous errors‚Äù, active role played by Grandma\n\n\nThroughout transcription, Child-directed-speech has constant repetition of phrases more ‚Äúcorrectly‚Äù by MKO, evidence of operant conditioning and scaffolding.\n\neg. ‚ÄúLook! I see […ôn åd…ô sne…™j…ôw]‚Äù, Grandma replied back, ‚ÄúDo you see another snail?‚Äù\nRepetition of more correct utterance supports the idea that Bella will imitate, -&gt; negative reinforcement, supports behaviourist ideas\nThe transition of the declarative sentence to the interrogative sentence shows how MKO is scaffolding for child, expanding ZPD by questioning -&gt; interactionist ideas supported\n\n\n\nInteractionism ¬ß\nTheory emphasises the interaction between children and their caregivers, in this case Bella &amp; Grandma\nFocuses a lot on ZPD and scaffolded needed for learning to develop\n\nG: ‚ÄúYes he‚Äôs in the tree‚Äù later Bella says ‚ÄúLook he [p äd…™n]‚Äù\nStrongly supports interactionist theory: Bella no way of knowing the snail is male, but bc Grandma automatically assumes gender, Bella learns to assume the same. As such, Bella learns about society‚Äôs perceptions of the world\n\nBehaviourism ¬ß\n\nSupported by various examples of recasts throughout transcript, uses operant conditioning for negative reinforcement\nPrime example is\n\nC: ‚ÄúWhere [n åd…ô sne…™j…ôl]‚Äù\nG: ‚ÄúWhere‚Äôs another snail‚Äù\n\n\nLater in exact same passage, Bella is seen correcting herself by imitating her Grandma, repeating the exact same recast in a more phonetically correct lexeme ‚Äúanother‚Äù (not ellided)\n\nG: ‚ÄúThere‚Äôs another snail‚Äù\nC: ‚Äú[d…õ…ôz …ôn åd…ô sne…™j…ôw]‚Äù\n\n\nThis recast also supports interactionism, as it provides scaffolding to build on ZPD\n\nThe Subsystems ¬ß\nPhonological Processes ¬ß\nMany phonological processes taking place in Bella‚Äôs language, and though she‚Äôs mostly intelligible, clear that her phonetic ability is at that of telegraphic stage\n\n‚Äú[ka…™m] on [tiÀê] a [sne…™j…ôl], see‚Äù\n\nElision of the /l/ and /…π/ consonant clusters -&gt; cluster reduction\nEpenthesis of the /j…ô/ sound\n\n\n‚Äú[d…õ…ôz …ôn åd…ô sne…™j…ôw]‚Äù\n\nCan see that epenthesis of /j…ô/ sound is consistent across her speech\n/l/ consonant cluster also struggles her with an example of gliding the /l/ to /w/\n\n\n‚ÄúWhere [n åd…ô sne…™j…ôl]‚Äù\n\nCan see all examples so far had consistent th-stops turning /√∞/ -&gt; /d/, has a lot of gliding but mostly intelligible, indication of child-like speech\nalso elides /…ô/ sound sometimes, especially when at start of word, but corrected by imitation and operant conditioning\nConsistent th-stopping makes sense of age group, as children not expected to properly articulate /√∞/ until 4 - 6 years of age.\nBecause /√∞/ sound is quite complex, have to remember to breathe out with tiny gap between teeth and tongue. If this gap is forgotten /d/ is produced instead. Evidently sounds are very close in mouth, and subtle differences not picked up this early, especially at less than 2 years old.\n\n\n\nLexicology ¬ß\n\nin ppt make sure to add couple transcribed examples\n\nBella‚Äôs demonstrated lexicon is about 20 words give or take, repeating ‚Äúthere‚Äôs‚Äù, ‚Äúanother‚Äù, ‚Äúsnail‚Äù, and ‚Äúwhere‚Äù quite a bit.\nThe repetition of phrases not unexpected at this development stage. Phrase ‚Äúlook he puttin‚Äô his head way up in sky‚Äù from before was well beyond demonstrated lexicon of Bella‚Äôs throughout convo, further show outlier.\n\nGrandma and Bella probably spend quite bit of time in garden, as most content words she knows are under the semantic field of nature, such as ‚Äúclimb, tree, snail‚Äù\nAlso knows words for people she spends lot of time with, such as brother ‚ÄúMickey‚Äù, supporting interactionist ideas that interaction with MKO reinforces language learning\nNew words are introduced through questioning and scaffolding, once again supporting interactionism\nG: ‚ÄúWhat colour is that flower?‚Äù\nC: ‚ÄúLook! I see […ôn åd…ô sne…™j…ôw]‚Äù\nBella is distracted, and does not answer the question, but is still prompted to use new lexemes to describe her environment\n\nMorphology ¬ß\nAs noted before, Bella is able to utilise the gerund, meaning she can use the inflectional morpheme -ing.\n\nContrapuntally, she does not appear to use the -s morpheme to indicate the plural of snail, showing that her morphological progress is in the early phase of the telegraphic stage\nBella also shows evidence of articles such as ‚Äúa‚Äù appearing, showing that she is beginning to use more articles and function words in her speech:\nG: Look here‚Äôs a snail\nC: ‚Äú[hiÀê…ôz¬†…ô sne…™j…ôl]‚Äù\nAlso very clear evidence of a recast, imitating what MKO is saying and learning to add more grammar to speech.\nOverall, Bella‚Äôs morphological ability is at expected stage for a two year old, where utterances have a clear hierarchical structure but is not yet that of adult grammar.\n\nSyntax/Semantics ¬ß\n\nBoth syntax and semantics of Bella‚Äôs speech have been explored previously in presentation\nTo reiterate, errors are dealt with by caregiver in a very behaviourist fashion, by recasting or repeating the utterance in a more correct form\nSemantically, is able to use interrogative sentences to question the world around her, using many ‚Äúwhere‚Äù questions\nStill does not use any compound sentences yet, but SVO structure is present, showing it‚Äôs developing\n\n‚ÄúI see […ôn åd…ô sne…™j…ôw]‚Äù\nSubject ‚ÄúI‚Äù, Verb ‚Äúsee‚Äù, Object ‚Äúanother snail‚Äù\n\n\n\nDiscourse ¬ß\nFinally, Bella is picking up discourse features well.\nAdjacency pairs:\n\nG: ‚ÄúYou want me to climb in the tree?‚Äù\nC: ‚Äú[j…ëÀê]‚Äù\nG: ‚ÄúNo way, silly monkey! You want to climb in the tree?‚Äù\nC: ‚Äú[j…ëÀê]‚Äù\nThese adjacency pairs show that Bella is just saying yes to question without necessarily knowing the meaning, but she understands that it is a question.\n\nBella also mostly coherent, participating in turn taking structure as seen above. Bella also sometimes uses discourse markers in her speech:\n\nC: ‚Äúoh, oh!‚Äù\nThis interjection of surprise conveys meaning to excitement, conveying meaning to MKO.\n\nCaretaker\nCaretaker uses confirmation requests to prompt and scaffold the child.\n\nG: ‚ÄúThat‚Äôs a lot of snails, isn‚Äôt it?‚Äù\nor G: ‚ÄúYou put the snail in the garden, did you?‚Äù\nScaffolding once again supports interactionist theories, as the discourse between the child and caregiver driving the conversation teaches Bella language.\n\nConclusion ¬ß\n\n\nOverall, Bella is quite relatively for her age. She seems to be well into the telegraphic stage of her language development, about 5 months ahead of the expected development at her age.\n\n\nThis is evident by the emerging subsystems evident in her speech, such as the ability to ask questions and use prepositions of location.\n\n\nThroughout the passage, the grandma acts as a MKO and uses development strategies that very closely align with the Behaviourist and Interactionist language acquisition theories.\n\n\nBella will likely continue to refine her language use as she approaches more adult-like grammatical ability, adding more function words and morphemes into her speech.\n\nShe already shows evidence of this, such as the inklings of using the inflectional gerund and basic article usage, but will develop more\n\n\n\nLike to finish off with a quote\n\n\n\n‚ÄúIn sum, then, ‚Äúthinking about thinking‚Äù has to be a principal ingredient of any empowering practice of education.‚Äù\n\nThank you for listening!"},"notes/School-Subjects/English-Language/Year-11/Child-Language-Acquisition/Theories":{"title":"Theories","links":["tags/englang","tags/cla","tags/card"],"tags":["englang","cla","card"],"content":"#englang#cla\nBehaviourist - Skinner#card ¬ß\nChildren imitate adults. Their correct utterances are reinforced when they get what they want or are praised.\n\nB.F. Skinner is the main theorist associated with the language learning theory. He states that language learning involves ‚Äúinput, imitation, and habit formation through repetition‚Äù. This conclusion was reached.\nAll children are born as a ‚Äúblank slate‚Äù, and all learning happens through a process called operant conditioning. A child can be trained to repeat certain actions if they get a favourable response (positive reinforcement) or a lack of any positive response that will discourage repetition in the future (negative enforcement).\nRole of caregiver: models language for the child to copy and provides positive reinforcement for success.\nLexical development: copies lexemes as heard\nSyntactic development: children learn key phrases and then substitute key words\n‚ÄúMonkey hear, monkey say!‚Äù\nLimitations#card ¬ß\n\nChildren rarely simply repeat what adults say\nChildren often make ‚Äòvirtuous errors‚Äô - logical but non-standard utterances, which suggest they are creatively working out grammatical rules, not copying\nChildren appear to go through the same predictable stages of development whatever the input. This throws into question the importance of positive and negative reinforcement from adults.\n\n\nInnateness/Nativism - Chomsky#card ¬ß\nA child‚Äôs brain contains special language-learning mechanisms at birth.\n\nArgued that the human brain has a naturally programmed ability to learn language and an ability to work out language systems in terms of grammar and syntax.\nThe term universal grammar is also used to describe this global capacity to learn languages at similar rates and in similar ways.\nThe idea of virtuous errors helps support the idea of the LAD.\nNutshell: Language Acquisition Device (LAD) is programmed to acquire language, all children have inbuilt ability to learn language\nRole of caregiver: do not activity shape or train children in their language\nLexical development: the brain knows the words go onto categories and fits them once exposed\nSyntactic development: LAD processes the categories of words and how these categories interact within syntax to place words in sentences\n‚ÄúI was born to talk!‚Äù\nLimitations ¬ß\nIt has been argued that a child is born not with a set of linguistic categories but with some sort of process mechanism - a set of procedures and inference rules.\nThe work was also purely theoretical, not based on linguistic data.\nThe theory also seems to downplay the part played by interaction between the children and their carers.\nCognitive - Piaget#card ¬ß\nLanguage is just one aspect of a child‚Äôs overall intellectual development.\n\nThis suggests that children would not develop until particular stages of cognitive development had been reached.\nOutlines four cognitive stages: Sensorimotor (0 - 2) years, Pre-operational (2-6/7 years), Concrete operational (6/7-11/12 years) and Formal operational (11-16+ years).\nFor example, a child would not be able to use comparative adjectives (small, smaller, smallest, etc) unless they first understood the concept of size.\nIt‚Äôs possible to link a child‚Äôs language to their conception development in early stages, such as object permanence which enables the child to articulate abstract ideas and talk about non-deictical concepts.\nInteraction - Bruner#card ¬ß\nThis theory emphasises the interaction between children and their caregivers.\n\nRejects the LAD and focuses on the importance of a child‚Äôs interaction with caregivers as the key to language development.\nSuggested the importance of a Language Acquisition Support System (LASS) which refers to the caregivers and other important participants within a child‚Äôs life.\nSuggested that the way in which carers question, encourage and support the child through scaffolding (like fill in the gaps, basically helping/structure) enables children to gradually develop their speech.\nConcentrated more on the need for quality input from caregivers to facilitate learning rather than on imitation and positive/negative reinforcement.\nScaffolding ¬ß\nLev Vygotsky suggested the importance of doing for a child to be able to develop, and suggested that a parent acts as a ‚Äúmore knowledgable other‚Äù (MKO), and this helps develop the ZPD\nLimitations ¬ß\nAll children of all backgrounds and languages tend to progress through similar stages predictably, so this challenges the idea that children exposed to child-directed speech will tend to develop more quickly.\nSome cultures (e.g. the Kaluli tribe in Papua New Guinea) dont appear to use child-directed speech at all to young children - yet youngsters‚Äô language seems to develop at the same rate as elsewhere.\nAdditional Theories ¬ß\nCritical Period/Age Hypothesis - Eric Lenneberg #card ¬ß\nCoined the term critical period\nBelieved that in the first few years of life, sufficient social interaction and exposure to language was essential in order that a child might gain fill master of the language.\nThis links in well to the case of Genie, as after she had passed the critical period, she was not able to acquire language beyond a very basic level.\n\nThe Wug Test - Jean Berko Gleason#card ¬ß\nCreated in 1985 to test the notion that children have a more sophisticated understanding of linguistic morphology than they have been taught explicitly.\nUses pseudo words like ‚Äòwug‚Äô to ensure the child has never been exposed to the word previously.\n76% of 4 to 5 years old were able to deduce what the plural of the noun ‚Äòwug‚Äô would be.\nThe results seem to suggest that children have an ability to understand grammatical rules (in this case, grammatical inflections) and transfer them to other examples they‚Äôve never heard before. This supports Chomsky‚Äôs nativist theory.\n\nAcquisition-Learning Hypothesis#card ¬ß\nThis hypothesis states that there is a difference between language learning and language acquisition\n\nThe learner acquires language unconsciously in language acquisition\n\nThe main criteria is the provision of ‚Äùcomprehensible input‚Äù which provide input just above the learner‚Äôs existing level of competency - Krashan coined this as ‚Äòinput+1‚Äô or ‚Äòi+1‚Äô\n\n\nIn language learning (explicitly taught), the learner picks up the language through conscious discovery and by learning the grammatical rules and structures of the language\n\n\nMonitor Hypothesis#card ¬ß\nAccording to the monitor hypothesis, the learner learns the grammar rules and functions of the language consciously (thinks about them and check themselves after an utterance) rather than its meaning\n\nIt lays more emphasis on the correctness of the language\nThere are three standards required to use this hypothesis properly:\nThe acquirer must know the language rules\nThe acquirer must reproduce the exact form of the language\nThe acquirer must review the language and apply its rules in a conversation\n\n\nNatural Order Hypothesis#card ¬ß\nThe natural order hypothesis is the idea that children learning their first language acquire grammatical structures in a pre-determined, ‚Äònatural‚Äô order, and that some are acquired earlier than others.\nAccording to the natural order hypothesis, learners acquire the grammatical morpheme-ing before the morpheme third person -s\nOne possible implication of this hypothesis is that teaching language through a traditional structural syllabus may not necessarily help them to acquire the language they need.\nAttempts to get the learners to produce structures before they are ready to do so may fail.\n\nInput Hypothesis#card ¬ß\nThis hypothesis focuses on acquisition rather than learning of the second language. It suggests that the learner develops the language naturally as they receive fun and interesting information.\nAcquisition theories emphasis the importance of comprehensible input, which is language just beyond the competence of the learner and provides the ideal conditions for acquisition to happen.\n\nIn the classroom:\nAffective Filter Hypothesis#card ¬ß\nThis hypothesis that emotional factors can affect language acquisition. They can have a negative or positive effect.\nNegative affective factors are called affective filters and are an important idea in theories about second language acquisition. The learner is less likely to learn the language if the affective filter is higher.\nHence, the learning environment must be stress-fee and positive so that the learner can learn properly.\n"},"notes/School-Subjects/English-Language/Year-11/Englishes-in-Contact/Aboriginal-English":{"title":"Aboriginal English","links":["tags/englang"],"tags":["englang"],"content":"#englang\nAboriginal English is a dialect of Australian English spoken by Indigenous Aboriginal communities.\n\nAboriginal English is not to be confused with Kriol, a seperate language to English\n\nResearch Task ¬ß\nPhonetics And Phonology ¬ß\nBasilect varieties of AAE that are heavily influenced by the indigenous substrate tend to have a very restricted set of vowels compared to SAE.\n\nIn general, no distinction between tense and lax vowels, so pairs such as ‚Äòsleep‚Äô and ‚Äòslip‚Äô, ‚Äòshared‚Äô and ‚Äòshed‚Äô, ‚Äòcart‚Äô and cut would all be pronounced the same.\nAnother pair that falls together is /e/ and /√¶/ with ‚Äòbed‚Äô and ‚Äòbad‚Äô both being pronounced more like the former.\n\nMorphology And Lexicology ¬ß\nDiscourse ¬ß\n‚Äúunna‚Äù is used as a question tag or confirmation request, similar to ‚Äúinnit‚Äù in British English.\nSyntax ¬ß\nSemantics ¬ß"},"notes/School-Subjects/English-Language/Year-11/Englishes-in-Contact/Australian-Kriol":{"title":"Australian Kriol","links":[],"tags":["englang","essay"],"content":"\nKriol is an English-lexified creole language that originated in Northern Australia circa 1908, developed by the Indigenous Australian minority. With over 20,000 active language users, at least 10,000 of whom speak it as their primary language [@harris1986], the creole is now the most widely spoken language by Indigenous Australians after English [@dickson2023], namely throughout a wide band extending from western Queensland to the Kimberleys of Western Australia,1 as shown in [@Fig:figure0]. The language is a mixture of English, the contact language brought to the Indigenous peoples after British colonisation, and the various Indigenous languages of the region, establishing itself through the creolisation of the many English-based pidgins that arose throughout the 1800s. According to Kachru‚Äôs model of the ‚ÄòThree Concentric Circles of English‚Äô, Kriol can be found in what he calls the ‚ÄòOuter Circle‚Äô, referring to regions in which English has been institutionalised as an ‚Äòadditional language‚Äô [@kachru1997] after the colonial period, as has been done with Indigenous communities in Northern Australia.\n{#fig:figure0 height=340px}\n\\pagebreak\nLinguistics History ¬ß\n\nAustralian Kriol is one of two widely recognised creole languages in Australia, the other being Torres Strait Creole, otherwise known as Yumplatok [@dickson2023]. The creation of Kriol is a direct result of the colonisation and invasion of Australia by English-speaking settlers, and many of the language‚Äôs roots can be traced back to the initial invasions that occurred in the Sydney region in the late 1700s.\nHistorical evidence suggests that Kriol emerged in some locations in the early 1900s, developing from Northern Territory Pidgin English whose arrival in the region coincided with the growth of the pastoral industry in the mid to late 1800s. Much of the emergence of Kriol is documented in relation to the Roper River Mission (now Ngukurr), the first of five missions set up by the Church Missionary Society in the Northern Territory of Australia in 1908, with the intention of bringing ‚ÄòChristianity and civilisation‚Äô to the Aboriginal peoples of the land. Creolisation is considered to have occurred within the first decades of the mission‚Äôs establishment afforded by the prime conditions for creolisation, such as the segregated dormitory system where contact-language-speaking children were made to live separate from their traditional-language-speaking parents or relatives [@nationalcentreforindigenousgenomics2015]. Though this theory involving a single point of conception at Ngukurr - known as the monogenesis hypothesis - is popularly espoused, linguists such as @munro2005 and @meakins2014 endorse the multi-regional hypothesis, suggesting that similar processes were occurring throughout pastoral stations in the region, providing more than one possible point of genesis for Kriol. Nonetheless, population movements and migration spread the newfound creole across the Northern Territory throughout the mid-1900s, largely attributed to World War II and bombings in the area.\nSince it‚Äôs emergence from an established pidgin around in the early 1900s, Kriol has grown in geographical scope and number of speakers. Through this growth, the language has further impacted several dozen pre-contact (or ‚Äòtraditional‚Äô) languages as well as more recent contact varieties. Among speakers of Kriol, the legitimacy and status of the language remains mixed, making it hard to quantify how many people speak the language. In addition to issues with self-reporting data, the nature of the creole results in many regional varieties, causing differences in categorising which varieties are placed under the ‚ÄòKriol‚Äô umbrella and which are not.\nRelationship to English ¬ß\nAs an English-lexified creole, it goes without saying that a majority of Kriol‚Äôs grammar and lexicon is related to English. Several key aspects distinguish Kriol sufficiently from Australian English - including Aboriginal English varieties - as to be mutually unintelligible. While English is clearly the backbone of the language in aspects such as word order and the lexicon, other aspects such as distinctive pronominal systems, verbal morphology marking transitivity, distinct kinship systems and kin terminologies and slight differences in phonemic inventories all contribute to the mutual unintelligibility of Kriol with English. A small analysis by @dickson2015 found that 95-97% of words uttered in natural discourse are English-derived but despite having close lexical ties to English, many English-derived lexemes in Kriol have semantic and grammatical functions that differ from their etymons and instead lie more closely with features occurring in Indigenous languages.\nRelationship to substratum (Traditional Australian) Languages ¬ß\nOn the other hand, it is important to consider the parallels and influences on Kriol by pre-contact Australian languages, otherwise known as the substrata. When Kriol was first garnering interest from the linguistic community in the early ‚Äô70s, the influence of pre-contact languages in the formation and modern form of the language was often dismissed, likely due to the Bioprogram Hypothesis which aligned the creolisation process with Chomsky‚Äôs Nativism theory. Due to its assumption that language acquisition and structure is innate, the hypothesis left little room for substrata to have much influence on Kriol.\nAttitudes began to shift in the early 2000s, as @munro2005 began to systematically survey the influences that substrata and English/English-lexified contact languages have had on the morphology and syntax of Roper Kriol. This survey found that Munro‚Äôs research correctly predicted the presence of six out of seven features in Kriol based on known features of substrata, and the one incorrect prediction - that Kriol should have an evitative mood - was later shown to be correct when Angelo and Schultze-Berndt demonstrated that bambai fulfils this function in 2016.\nAs such, it is has been generally accepted that features of Kriol are reinforced by or derived from aspects present in traditional Australian languages, though more recently there have been contending views proposed by @meakins2021 who argues that ‚Äúmost claims of a direct substratum inÔ¨Çuence from local languages are difficult to verify and ‚Ä¶ easily refuted‚Äù, presenting the notion that pidgin predecessors alone largely account for the contemporary shape of Kriol.\nMechanisms of Kriol ¬ß\n\nPhonology ¬ß\nThe phonology of Kriol displays remnants of both English and traditional Australian languages, but interestingly it reflects neither precisely, an independence that is evident from its phonetic inventory and syllable structure. There also exists consistent variation between Kriol-speaking communities, creating multiple slightly differing systems.\nKriol‚Äôs consonant inventory includes the same places of articulation and most of the phonemes present in a typical traditional Australian language, including several phonemes that do not have phonemic status in Standard Australian English. This includes but is not limited to the alveolar trill or tap, interdental stops and retroflex consonants to a limited extend (retroflex consonants are not as common and are mostly found in substratum-derived lexemes though they do appear in some English derived words such as anggurl [a≈ãgu…≠] ‚Äòmother‚Äôs brother‚Äô (etymon: uncle), barn [ba…≥] ‚Äòburn‚Äô and bard [ba…ñ] ‚Äòbird‚Äô). Another disputed phonological feature is whether Kriol stops have a voicing contrast. Evidence for voicing contrast goes back to @sandefur1979‚Äôs early descriptions and has been verified in Roper Kriol on numerous occasions. The view that voicing distinctions are atypical is an uncommon stance, but is upheld by linguists such as Schultze-Berndt and Meakins.\nKriol has absorbed several phonemes from English into its phonology that did not occur in substratal phonologies but not all English phonemes are not present either. The fricatives [f], [s], and [ É] are common in Kriol‚Äôs phonology, yet their voiced counterparts [v], [z], and [ í], are not, as seen in Table 1. Kriol vowel systems are less well described with different studies reaching different conclusions. @sandefur1979‚Äôs early work describes seven vowes and four dipthongs, later shifting to a five-vowel/five-dipthong system in 1991. More recently, @bundgaard-nielsen2015 carried out a study based on three Kriol speakers from Numbulwar, arguing for a five-vowel system with a duration contrast, resulting in ten vowels in total. The lack of a central vowel or schwa is a key difference between the Kriol vowel system and that of the Australian English superstratum.\n\\footnotesize\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBilabialLabio-dentalDentalAlveolarPost-alveolarRetroflexPalatalVelarNasalmnrnnyngStop (voiced)bthdrdjgStop (voiceless)pthttjkFricativefsshLaterallrlTap/flaprrSemivowelryw\n\\normalsize\nTable 1 \\space Example Kriol consonant inventory using NT Kriol orthography (adapted from @dickson2023).\nVariation in the phonetic traits is evident in Kriol, initially attributed to a creole continuum and geographical variation. Earlier researchers such as @sandefur1979 provided examples of phonological variation linked to basilectal, acrolectal, and mesolectal forms. Early descriptions of geographical variation also encompass phonological variation, for example, Sandefur‚Äôs early grammatical outlines mention that Ngukurr Kriol speaker‚Äôs have a vowel system displaying influence from the substratal three-vowel system while speakers at Barunga ‚Äútended towards a five vowel system‚Äù [@sandefur1979].\nKriol‚Äôs lexicon is full of English-derived lexemes that have been phonologically adapted to suit the phonologies of the pre-contact languages or a newly-stabilised Kriol phonology. However, often the phonological forms of lexicalised English-derived words are ‚Äòfossilised‚Äô or ‚Äòfrozen‚Äô as to not reflect the contemporary Kriol phonology. For example, Roper Kriol has the form jidan ‚Äòstay/live/sit‚Äô derived from ‚Äòsit down‚Äô, yet [s] is completely phonemic in the dialect - the initial [d í] sound is due solely to the lexicalisation of an early pidginised form. In Barunga Kriol on the other hand, the form of the same lexeme is sidan, not due phonological differences in inventory but because the latter dialect creolised more recently. Further examples of ‚Äòfossilised‚Äô phonological features include epenthetic vowels in sumok ‚Äòsmoke‚Äô and sineik ‚Äòsnake‚Äô which avert consonant clusters which are more than acceptable in contemporary Kriol varieties. The contemporary varieties of Kriol however use a greater range of consonant clusters than was possible in its substrata, causing more recent borrowings from English to be more phonologically similar to their etymons. Nonetheless, contemporary borrowings still have adaptations evident, such as Kriol‚Äôs borrowings of ‚Äòthongs‚Äô/‚Äòtongs‚Äô and ‚Äòboating‚Äô/‚Äòvoting‚Äô being homophonous ([tÃ™o≈ã] and [bouti≈ã] respectively) which can cause miscomprehension by English monolinguals.\nMorphology and Syntax ¬ß\nKriol, typical of creole languages, is mostly an isolating language2 with little morphology, contrasting significantly with traditional Australian languages and even more so with the non-Pama-Nyungan languages that were once commonly spoken across the Kriol-speaking region, which exhibited particularly complex morphologies. The morphology that is present centres primarily around mood and aspectual verbal suffixes. Additionally, many lexical verbs incorporate a variety of non-productive adverbial suffixes [@sandefur1979] as shown below:\n\\footnotesize\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdverbial suffixEtymonExample lexical verb-an, -ononwirrimon (to wear, put on)-apupgalimap (to climb)-atoutdigimat (to remove, take out)-bekbackkambek (to return)-dandowngudan (to descend, go down)-(a)ranaroundluguran (to search for, look around)-(a)wei, -rreiawaydigirrei (to take away)\n\\normalsize\nTable 2 \\space Common adverbial suffixes on Kriol lexical verbs. (adapted from @dickson2023).\nIn terms of aspectual suffixes, past tense is marked by bin and contractions incorporating bin, seen in ‚ÄòDe det Burlany, ai bin luk im wok pas‚Äô (‚ÄòThere is Burlany, I saw him walk past‚Äô) and ‚ÄòMaidi imin jinggabat im femili‚Äô (‚ÄòMaybe he was thinking of his family‚Äô) respectively [@dickson2023]. The particle garra is typically described as encoding obligation [@sandefur1979] but unlike its English etymon ‚Äògot to‚Äô, garra can simply be used to mark future tense: ‚Äòif ing-garra tok na ing-garra meigi mi jandap irriwul, dis da festaim ai garra irrim du.‚Äô (‚ÄòIf he‚Äôs going to talk, then he‚Äôll make me pay attention [because] this is the first time I‚Äôll be hearing it too.‚Äô) [@dickson2023].\nAnecdotally, younger speakers of Kriol may have difficulty parsing common contractions [@dickson2015], suggesting that grammaticalisation may be in progress. It is worth noting that in a similar contact language, Light Warlpiri, the derivative of garra, the -rra suffix, is used purely as a future tense morpheme, furthering evidence of possible grammaticalisation.\nReduplication is also a productive feature of Kriol nominals and verbs, though it is more frequent in eastern varieties. Unlike some creoles, reduplication in Kriol does not indicate plurality but is rather used to express emotional connotations; it is often used as a diminutive, as in the lexeme yawkyawk ‚Äòlittle young girl‚Äô [@ponsonnet2018]. Plural markings tend to be optional but can be achieved through various means such as the plural determiner ola or the suffix -mo(b) which connotes ‚Äògroup‚Äô or collectivity rather than simply plurality: en naja lilmen dissaid igin gada ola frut-mo, gada ola daga (‚ÄòAnd [there‚Äôs] another little man on this side too with the fruit, with the food‚Äô) [@dickson2023].\nFinally, the syntactic word order of Kriol is SVO, following the superstratum English, but with some additional flexibility. This often occurs in sentences including possession, as seen in ‚Äòla det haus ba mela‚Äô which translates to ‚Äòat our house‚Äô [@dickson2023].\nLexicon and Semantics ¬ß\nThe lexicon of Kriol mostly comprises of English-derived lexemes. As mentioned above, 95-97% of all words are English derived, though they often carry semantics that differentiate them from their etymons (see Table 3). This can be a cause of miscommunication between native Kriol and native English speakers, impacting Kriol‚Äôs utility as a language.\n\\footnotesize\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLexemePart of SpeechEtymonKriol Meaningkilimverbkillhitbreigimverbbreakbreak off (i.e. remove part from whole)kamatverbcome outcome out, arrive at a placelibumverbleaveleave alone, give up, abandon (not used to mean ‚Äòdepart‚Äô)wipronounwewe, including you (the listener)wailadjectivewildangrygranggiadjectivecrankynonsensical, mentally illnajinginterjectionnothingnowansaidadverbone sidenext to, alongsideyetadverbyetstillbingganounfingerhandbifnounbeefmeatbutnounbootshoe(s)antinoun (kin term)auntyfather‚Äôs sister(s) (not used to mean ‚Äòmother‚Äôs sister‚Äô)\n\\normalsize\nTable 3 \\space Sample of English-derived Kriol lexemes with semantics distinct from their etymons. (adapted from @dickson2023).\nAll Kriol pronouns are derivatives of English lexemes, but the pronoun system aligns itself much more closely to that of the substrata, including features not found in English such as inclusivity, obligatory encoding duality and obligatory 2nd person plural form (see Table 4).\n\\footnotesize\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsingulardualplural1st person inclusiveyunmiwi1st person exclusiveai/miminbalamela2nd personyuyunbalayumob3rd personimdubalathei/alabat\n\\normalsize\nTable 4 \\space Kriol pronouns in the Roper variety. (adapted from @dickson2023).\nVariation between ai/mi and thei/alabat have been characterized to be dependant on syntactic position, and many variants exist across Kriol varieties beyond Roper Kriol.\nSubstrata-derived lexemes make up a small but distinctive component of Kriol lexica, and it has been generally thought that these lexemes occur mostly as nominals and are restricted to certain domains like flora and fauna or culture-specific items. @dickson2015 discusses lexical material in Ngukurr Kriol and found substrata-derived lexemes in all parts of speech, including sixty verbs derived from Indigenous languages that are productive amongst younger Kriol users despite those speakers having little to no fluency in these languages. Domains covered by these verbs cannot be categorised easily as relating to traditional cultural practices as they encode many events including seemingly mundane ones such as dinggal ‚Äòlimp‚Äô , birr ‚Äòcriticise, doubt‚Äô, ngaja ‚Äòask for‚Äô and gai ‚Äòpraise‚Äô.\nFinally, kinship is likely the lexical and semantic domain most contrastive between Kriol and English, both in kin terms and in their semantics (the kinship categories they encode). Kriol kin terms are ‚Äòa linguistic manifestation of the social architecture of Kriol speaking society and occur in discourse with high frequency‚Äô [@nicholls2009]. Kinship categories differ significantly to English and are much more closely aligned to traditional Australian languages, including specific terms for cross-cousin, mother-in-law, father-in-law, and self-reciprocal kin terms for all four grand-parents. Further, kin terms are applied through a universal classification system, even for categories with English-derived lexemes. For example, anti ‚Äòaunty‚Äô refers solely to the father‚Äôs sisters and not the mother‚Äôs, though it isn‚Äôt limited to blood relatives and extends to a variety of non-consanguineal relatives who fall under the same category. The lexicon and semantics of Kriol‚Äôs kinship system is particularly dynamic, with a large amount of variation across different varieties. Speakers of Kriol continually contribute to the system‚Äôs evolution, creating aspects that are unique to Kriol. For example, younger Kriol speakers in Ngukurr have recently introduced the new informal self-reciprocal lexemes -gudi (fatherson) and gabarani (unclenephew), allowing every male speaker to refer to all other male members of their social world with a self-reciprocal kin term [@dickson2015]. This recent introduction into the set of Roper Kriol kin terms is also an interesting example of Kriol language users pulling from their substrata (Gunwinygguan languages in this case) rather than English for new lexical items.\nPragmatics and Discourse ¬ß\nUnlike the evident English influence on Kriol in terms of phonology, morphosyntax, lexicon, and semantics, discourse and pragmatics are an area in which superstratum influence is limited.\n\n‚ÄòKriol demonstrates unmistakable evidence of a continuity of discourse practices that have been identified in some traditional Aboriginal languages.‚Äô [@nicholls2013]\n\nNicholls observes a preference for using kin terms over other forms of person reference such as personal names. She also found that cultural beliefs that restrict the holding and sharing of knowledge results in ‚Äòobservable speech practices related to negotiating the restrictions placed on the dissemination of knowledge‚Äô [@nicholls2013]. An example provided is the tendency of Kriol speakers to offer information while seeking information as an exchange, and the use of question tags rather than asking a direct open question.\nThe lexeme det (etymon: ‚Äòthat‚Äô) and its role was also analysed by @nicholls2016. Initially det was described as a basic adnominal demonstrative just like its etymon by @sandefur1979 but Nicholls observed it functioning like a recognitional determiner, used to ‚Äòindicate familiarity between the addressee and the referent of a noun phrase‚Äô [@nicholls2016]. An example of this can be seen in the sentence used above, ‚ÄòDe det Burlany, ai bin luk im wok pas‚Äô (‚ÄòThere is Burlany, I saw him walk past‚Äô), where det is used to indicate that the speaker is familiar with ‚ÄòBurlany‚Äô.\nKriol speakers often employ politeness strategies in relation to kinship. Namely, it is common to use the plural form of a pronoun to refer to singular referents when kin-based avoidance rules dictate. For example, in ‚ÄôGenga, yumo na dum det ekshin‚Äô (‚ÄòBrother-in-law, you demonstrate the gesture‚Äô) [@dickson2023], the speaker from Ngukurr is refering to a peer who is a classificatory brother-in-law and hence uses plural pronouns when addressing him.\nParalinguistic features do not seem to have been a focus of research, but it is supposedly evident that ‚ÄòKriol speakers use a number of iconic gestures and signs related to those that are used by speakers of pre-contact languages‚Äô [@dickson2023].\nSociolinguistic Implications ¬ß\n\nKriol is a growing language, acting as a lingua franca across a variety of indigenous communities in northern Australia. Due to its affordance of communication and shared cultural experience, Kriol has seen a rise in usage amongst rural communities across the continent, but has also received disapproval due to perceptions that it has destroyed the vitality and viability of substrata and moved them all closer to Standard English, influencing the rich oral tradition of Indigenous communities along with their cultural heritage.\nIn terms of Kriol‚Äôs vitality, it is relatively high compared to other Indigenous languages in the Australian context, but certainly quite low when compared to creole languages worldwide, especially in more formal settings. In an Australian context, the demographic vitality of the language is quite high: the language has shown consistent growth in many remote communities and though towns with large non-Indigenous populations populations may see a shift away from Kriol, decreolisation processes are not evident, with smaller communities using it as the primary language in most or all homes and in informal social interactions. Institutionally, Kriol‚Äôs vitality is much lower, featuring only peripherally in education and government institutions. In most cases, classrooms in Kriol-speaking communities will have a teaching assistant working as a subordinate to a non-Indigenous teacher with limited Kriol knowledge. As such, Kriol is rarely incorporated into schooling curricula, though initiatives to increase its presence have been emerging in recent decades [@dickson2023]. Outside of education, religion is one institutional domain that has consistently afforded Kriol a position of significance, with a full Kriol translation of the Bible being published in 2007, linked here. Orthographical conventions for the language were established due to the commencement of the bible translation and bilingual education in the late 1970s. While Kriol‚Äôs orthography prescribes letter-sound correspondences, spelling is only nominally standardised, allowing for spelling variation in accordance with pronunciation. That being said, literacy levels amongst Kriol-speaking communities are generally low, causing written Kriol to be uncommon.\nStatus factors have also contributed to ethnolinguistic vitality, with both creole languages and Australian languages having seperate histories of discrimination and denigration, causing the effects to be compounded for Kriol. For many decades following its emergence, Kriol (otherwise known as ‚ÄúPidgin English‚Äù at the time) was generally regarded as an inferior form of English, and though there was some acceptance of the language for its practical value as a last resort for communication, it was still typically subjugated, as is the case in this official policy from the Roper River Mission, 1944:\n\n[T]he use of pidgin English shall be discouraged, and in any region where it is impracticable to base educational work on the use of any one native dialect, English shall be used, and the native trained as far as possible to speak correct English (from ‚ÄòGeneral Policy and Methods‚Äô of Church Missionary Society of Australia (1944) in @sandefur1986)\n\nFurther, positive perceptions of Kriol are a historically recent phenomenon.\n\nUntil the 1970s Kriol was almost universally held in low esteem by non-Kriol speakers as well as Kriol speakers themselves. [@sandefur1986]\n\nThe eventual shifts in perception coincide with linguists‚Äô earliest description of the language, enmeshed with bible translation work that also resulted in the naming of Kriol and the development of an orthography. Research and development by linguists such as Sandefur, Hudson and Harris, along with the establishment of bilingual education programmes and the first Kriol Dictionary in 1986 all collectively raised the status of Kriol for many of its speakers, mostly those with some form of involvement in these ventures. Nonetheless, a shift to positive perceptions has been far from universal; Kriol‚Äôs emergence has been an indirect consequence of the rapid loss of older Indigenous languages, resulting in the negative perception that Kriol is the root cause of this endangerment as ‚Äúbroken English‚Äù.\nAlong the lines of this cultural influence, @dickson2015 has explores the ramifications of language loss and what the ongoing shift to riol means for ‚Äòthe maintenance of biological and ecological knowledge and for the ability to encode unique and cultural-specific concepts‚Äô [@dickson2015]. He explores that although traditional languages have fallen into disuse in many communities, there is no strong evidence that heritage languages hold any less value in terms of social and personal identity marking than they have done so in the past. Nonetheless, the loss of language due to Kriol‚Äôs adoption has impeded the ability for linguistic and cultural practice to be carried down through to generations who cannot parse the substrata fluently. The following quote captures the sentiments evident from younger generations:\n\n‚ÄòI find it better to communicate in English now. But to put both languages together would have been much better. I still feel that way, a strong feeling wishing to speak my lingo, my own language. My father was from the Wulngarri clan and my mother was from across the river. ‚Ä¶ You lose your identity if you lose your language. Your identity is connected to your land and your clan. And if your clan doesn‚Äôt have a language, then you feel like nothing. If you have a clan that has a language, then you are somebody. Being somebody is important.‚Äô (Across The River, Yugul Band 2004)\n\nAs such, there is clear evidence that the importance and prestige plaved upon pre-contact languages is being maintained amongst Indigenous communities, even if fluency does fluctuate, creating a challenging situation where there is a disparity between aspiration and reality. Beyond this, the discussion finds its way into that of philosophy and ethics, the weight of a 60,000 year old culture lying upon the shoulders of young Australians who require a viable language to communicate effectively in a modern world.\nConclusion ¬ß\nKriol is a new language by many standards: it has only existed for the better part of a century and only became the subject of linguistic research around half a century ago. Research done on Kriol has seen a diversification in what linguists are paying attention to, many of which attempt to fill research gaps or offer new perspectives and analysis. Nonetheless, despite this promising progress, the following remains true:\n\n‚ÄòCreole languages suffer from a prestige and power assymetry with standard languages which marginalises them and privileges the others in education, economic and political systems.‚Äô [@angelo2021]\n\nMore work must be done to continue our linguistic understanding of Kriol and to better include Kriol speakers in the linguistic world, battling a power asymmetry that has spanned generations.\n\\pagebreak\nBibliography ¬ß\nThis research report takes heavy influence from the chapter titled ‚ÄòKriol‚Äô [@dickson2023] from ‚ÄòThe Oxford Guide to Australian Languages‚Äô, authored by Greg Dickson. It is intended to be a summarised version of the information presented in Dickson‚Äôs chapter, whilst providing supporting evidence and insights from various other sources.\nFootnotes ¬ß\n\n\nThough this report encompasses Kriol as spoken throughout Australia as a whole, it is likely to be more accurate to the variety of Kriol as spoken east of Katherine, as a majority of research has been from this region. ‚Ü©\n\n\nmeaning that Kriol has a morpheme per word ratio close to one. ‚Ü©\n\n\n"},"notes/School-Subjects/English-Language/Year-11/Englishes-in-Contact/Determinism-&-Relativism":{"title":"Determinism & Relativism","links":["tags/card"],"tags":["card"],"content":"Determinism and relativism are linguistic theories developed by Benjamin Whorf and Edward Sapir. These suggest that there is a particular relationship between a language and the way its speakers are inclined to think about the world.\nDeterminism is the stronger belief, basically stating that if you can‚Äôt talk about it, you cannot comprehend it, while relativism is milder.\nStrong Hypothesis (Determinism)#card ¬ß\nWe perceive only what our language allows us to.\n\nWe are slaves to the words available to us\n\nThis theory has been widely discredited, example is the Hopi tribe who only have 2 colours in their language but were able to learn all the English words for colour relatively easily.\nFurther is the example of the word schadenfreude, which people started using because they didn‚Äôt have a word for it in English (well they did - epicaricacy - but that‚Äôs besides the point), which proves that people must have been able to think of the idea before they named it.\nWeak Hypothesis (Relativism) ¬ß\nRelativism is a slightly weaker take, which states that our language does impact the way we act in certain scenarios.\nThere was an experiment done, where Russians who have two words for light and dark blue (Goluboy and Siniy) were able to better identify colours than English speakers. This confirms language affects performance at least on simple conceptual colour tasks.\nAn example of this is in Cape York, where the Pormpuraaw, a small aboriginal community lives. These people talk about space in terms of cardinal directions, north south east and west, for everything rather than our relative lefts and rights, ‚Äúthere‚Äôs an ant on your southeast leg‚Äù. This results in a profound ability to stay oriented, because everything is absolute.\nPeople in this tribe also use this for their perception of time. For example, they always arranged temporal objects in the order of east to west, so that they would change based on the direction they are facing."},"notes/School-Subjects/English-Language/Year-11/Englishes-in-Contact/Does-Language-Influence-Thought-q":{"title":"Does Language Influence Thought?","links":[],"tags":["englang","essay"],"content":"Introduction!\nWeeee ¬ß\nConclusion ¬ß\nConclusion!\n\\pagebreak\nBibliography ¬ß"},"notes/School-Subjects/English-Language/Year-11/Englishes-in-Contact/Pidgins":{"title":"Pidgins","links":["tags/englang"],"tags":["englang"],"content":"#englang\n\nis nobody‚Äôs native language but arises when two speakers share no common language so develop a form of communication that is somewhat unstructured.\n\nIn some locations, the children of mixed couples learn the creole as their first language. Thus, a language is changes from a pidgin to an ‚Äòextended pidgin‚Äô¬† and then to a creole language.\nSuperstrate Language :: provides the bulk of the vocabulary and is more prestigious (also called the ‚Äòlexifier language‚Äô)\nSubstrate Language :: provide a few words but may have significant influence on the grammatical structure.\nExtended Pidgin :: a pidgin which never creolised, but it is standardised and used in all domains, aka an expanded pidgin\ncopula :: a part of speech which links the subject of a sentence to a subject complement such as the word ‚Äòis‚Äô in the sentence ‚ÄúThe sky is blue.‚Äù All copulas are verbs. state of being\nclefting :: when a sentence is rearranged such that some element is moved to a different clause, usually to add emphasis\nPidgin and Creole Studies ¬ß\nPidgin and creole languages have been studied extensively in linguistics:\n\nSociolinguistic aspects\nGrammaticalisation\nThe innateness hypothesis\n"},"notes/School-Subjects/English-Language/Year-11/Englishes-in-Contact/Standard-English":{"title":"Standard English","links":[],"tags":[],"content":"Standard Australian English (SAE) has been described, in comparison to other world Englishes, as ‚Äòa younger cousin‚Äô (Kirkpatrick, 2007) due to its relatively late arrival as an English of the world.\nAustralian English, as a coverall for varieties spoken by Australians of British and European decent, was not always accepted as a standard or its own distinct dialect.\nA lesser accolade, SAE has also often been considered the ‚Äòpoor relation‚Äô of the family, even by some Australians themselves.\nIn 1920, the Director of Education (NSW) observed:\n\n‚ÄòIt is sad to reflect that other people are able to recognise Australians by their speech.‚Äô\n\nThis statement reflected a popular attitude toward SAE of the time and in some ways, there was good reason for this.\nAustralian English has been developing for more that 200 years, it is only relatively recently that Australian English has been regarded as an acceptable standard variety.¬†\nConcerns that Australian English was somehow inferior were voiced frequently and over a long period of time.¬† Originally Australia was comprised of a number of British colonies, rather than one whole nation.¬†\nMany of the colonies‚Äô early inhabitants were from the lower echelons of society from what is now the United Kingdom; convicts, seamen (not officers), wenches, the disparate etc.\nIt was not until 1940 that Australian English had its first champion, Arthur Mitchell, a linguist who had been studying in London arrived home and began to promote the notion that Australian English should be adopted as a national standard.¬†\nHe argued that Australian pronunciation should not be regarded as a corrupt derivation but as an acceptable norm i.e. a standard variety of English.\nHis views received a hostile reception and it wasn‚Äôt until Mitchell the chairman of the Australian Broadcasting Corporation (ABC) in 1952 that the ABC started to accept Australian English."},"notes/School-Subjects/English-Language/Year-11/Englishes-in-Contact/Varieties-of-English":{"title":"Varieties of English","links":["notes/School-Subjects/English-Language/Year-11/Englishes-in-Contact/Pidgins"],"tags":[],"content":"\n\nPidgin :: is nobody‚Äôs native language but arises when two speakers share no common language so develop a form of communication that is somewhat unstructured.\n\n\nCreole :: a language that has developed from a mix of two other languages. Further, a creole is a language that was initially a pidgin but has become native for groups of speakers. They are generally more structured with a full lexicon and syntax.\n\n\nPatois :: more so used as a pejorative for creole and pidgin, as ‚Äúbroken English‚Äù or non-standard.\n\n\nLingua Franca :: a language that is adopted as a common language between speakers whose native languages are different.\n\n\nGlobish :: a¬†portmanteau¬†of ‚Äúglobal‚Äù and ‚ÄúEnglish,‚Äù Globish is a simplified subset of English used by non-native speakers, consisting of only the most common words and phrases.\n\n\nNative English :: English being used by a native speaker, as their primary language.\n\n\nNon-native English :: English being used by a non-native speaker, not as a primary language.\n\n\nAccent:\n\n\nDialect:\n\n\nIdiolect:\n\n\nEnglish Across the World ¬ß\nBraj Kachru‚Äôs Three Circles of English\n![Three Circles Model.png](Three Circles Model.png)\nThe ‚ÄòInner Circle‚Äô shows examples of countries where English is the ‚Äòprimary‚Äô language, namely as an official language of the country and spoken by the majority.\nThe ‚ÄòOuter Circle‚Äô shows examples of countries where English is widely spoken often as a second language, and is an ‚Äòofficial language‚Äô.\nThe ‚ÄòExpanding Circle‚Äô shows the countries where English is widely spoken as a foreign language, but not an official language or necessarily spoken by the majority.\nAdaptation is chiefly in the vocabulary or lexicon, because people need new words to describe foreign concepts.\n\n‚ÄúEverywhere, in every country in the world, there is a new variety of English that develops‚Äù - David Crystal\n\n\nLoan words, borrowed words\n\nVarieties of the same Language ¬ß\nThe following are used more for when there is a mix of two languages, i.e. creoles and pidgins. They are similar to broad, general and cultivated Australian English in terms of prestige.\nBasilect :: a less prestigious¬†dialect¬†or variety of a particular language.\nMesolect :: a variety of speech that is midway between the acrolect and the basilect.\nAcrolect :: the most prestigious¬†dialect¬†or variety of a particular language. The acrolect is the closest to the ‚Äòstandard‚Äô of a language.\nAustralian Varieties ¬ß\nEach different variety varies depending on the heritage background of the speakers\nThere is also a variety of Australian English called ‚ÄòStrine‚Äô - the word ‚ÄòStrine‚Äô itself represents a poor pronunciation of the word ‚ÄòAustralian‚Äô."},"notes/School-Subjects/English-Language/Year-11/Language-Change/Dictionary-Documentary":{"title":"Dictionary Documentary","links":["tags/englang","tags/documentary"],"tags":["englang","documentary"],"content":"#englang#documentary\nSamuel Johnson‚Äôs dictionary is one of the most famous dictionaries published in 1755.\nHis was not the first, but it was definitely the most complete and had much better documentation. He started with books instead of the alphabet, and notes basically all words from over 2,000 books\nBoswell‚Äôs Life of Johnson is a bibliography written about Johnson by someone he met. He was a diseased and sickly infant.\n\nHe was a stern moralist\nWent to Oxford College, had only 40 people, but he wasn‚Äôt very rich\nHe was very rebellious and defied a lot of authority and rules at the college\nHe was ashamed of his family circumstances\nJohnson left after 13 months because he supposedly could not afford to keep going to the college, had a very consistent spending of 8 shillings a week and then just stopped\nJohnson was the ‚Äúoriginal toy boy‚Äù, married a widow who was more than 20 years older than him. Elizabeth Porter or Teti as he called her, gave up a lot to marry Johnson\nHis literary career failed, so he decided to set up a school using his wife‚Äôs money, but that school also failed\nJohnson is one of the best examples of tourette syndrome in history. He had compulsions and wanted things to be done ‚Äújust right‚Äù, like with English.\nBooksellers were starting to make a lot more money and start to become a viable job, because now everybody was writing to make money\nDictionary was the publisher‚Äôs idea. Italy and France both had standard dictionaries, but English had nothing, so they felt like their language was not competing. Britain was a new concept at the time (union started in 1707).\nMade rapid progress for 3 years\n"},"notes/School-Subjects/English-Language/Year-11/Language-Change/Essay-Assessment":{"title":"Essay Assessment","links":["tags/englang"],"tags":["englang"],"content":"#englang\nPrompt ¬ß\n\n\n                  \n                  Prompt \n                  \n                \nHistory has shown that English is not resistant to change, it will continue to change, and that this should be embraced. To what extent do you agree? (You should use metalanguage and refer to at least two of the subsystems in your response.)\n\nStimulus 1 ¬ß\n\n‚ÄúEnglish has been this vacuum cleaner of a language, because of its history, meeting up with the Romans and then the Danes, the Vikings and then the French and then the Renaissance with all the Latin and Greek and Hebrew in the background‚Äù - David Crystal, The Story of English\n\nStimulus 2 ¬ß\nAn image of McJob, ‚Äòone of the many recent additions to the Oxford English Dictionary‚Äô\n\n‚ÄúEnglish speakers already have over a million words at our disposal - so do we really need to add 1,000 new ones a year to the lexicon?‚Äù - Andy Bodle, The Guardian, 2016\n\nStimulus 3 ¬ß\n\n‚ÄúPeople did not wake up in the morning and decide to use the word ‚Äòbeef‚Äô instead of ‚Äòox meat‚Äô, or change their pronunciation of ‚Äòmate‚Äô to ‚Äòmeat‚Äô or tell their wife how ‚Äònice‚Äô she is (‚Äònice‚Äô originally pejorative). No, indeed these changes to English took place over centuries and without any concern from its speakers‚Äù - Katie Lowe, Linguist and Philologer, University of Glasgow\n\nStimulus 4 ¬ß\n\n‚ÄúWhat is literally the most misused word in the English language? The word ‚Äòliterally‚Äô has been used to mean its opposite for over 200 years.‚Äù The problem is that the word has a specific meaning, which is being diluted and devalued by its overuse in incorrect contexts. - John Lloyd (2015), The Third Book of General Ignorance\n\nPlan ¬ß\nPrompt ¬ß\n\nThroughout history, English has not been resistant to change\nEnglish will continue to change\nThis change should be embraced\n\nParagraphs ¬ß\nParagraph 1 - not been resistant to change ¬ß\n\nThroughout course of history, English has not been resistant to change.\ne.g. Old English was a highly inflected language\nSyntax: quite a flexible word order, somewhere during 12th century, transformed into Early Middle English where SVO structure settled.\nChange was largely due to Norman invasion of England in 1066 which brought the influence of the French Language. Use Stimulus 1\nAlso influenced lexicology, new French-derived words introduced,\n\n‚Äúhouse‚Äù -&gt; ‚Äúmansion‚Äù\n‚Äúask‚Äù -&gt; ‚Äúinquire‚Äù\n\n\nUse Stimulus 3 enriched the English Language lexicon\n\nParagraph 2 - English will continue to change ¬ß\nLanguage is changing right now and will continue to change.\n\nConsider rapid technological advancements recent decades, profoundly influenced language. Text messaging acronyms like ‚ÄòLOL‚Äô for convenience which undergoing semantic shift right now.\n\nNow more of a way to signal that a comment is intended to be funny or to signal irony\nChanges depending on semantic/syntactic content of the message\n\nConviviality: ‚ÄúI had a great time lol‚Äù\nLighthearted: ‚Äúlol okay I‚Äôll see you soon‚Äù\nSelf Deprecating Humour: ‚Äúi‚Äôm drowning in bills fml lol‚Äù\n\n\n\n\nNouns such as clipped and suffixed selfie + compound borrowed from Japanese, ‚Äúemoji‚Äù become additions to lexicon\nOngoing development of gender neutral pronouns demonstrates English‚Äôs willingness to adapt changing needs of individuals not in gen binary\nRecent changes to what was previously closed word class, pronouns.\nWhile not only being lexical change, pronouns such he/she -&gt; they/them require syntactic change. When using they in reference to a singular subject, the verb conjugation does not take the singular form, e.g. not ‚ÄòThey writes‚Äô but ‚ÄòThey write‚Äô, demonstrating an acceptable modern change to the syntax of the language.\n\nParagraph 3 - language change is good as long as it improves intelligibility ¬ß\nUse Stimulus 4: could be viewed as incorrect but so purpose of language is communication of thoughts/ideas so as long as mutual intelligibility maintained, it‚Äôs okay.\nLanguage change should be embraced when these changes allow speakers to more effectively communicate ideas. Additions to the lexicon describe new technologies is beneficial, because previously not expressible, but unnecessary additions that harm intelligibility bad.\nStimulus 4 is fine because people understand what you mean.\nEssay ¬ß\nThe English Language has continually evolved throughout its history and will continue to do so for the foreseeable future. Modern English has seen significant change from its Old English counterpart both lexically and syntactically, demonstrating how the language has been far from resistant to change in the past. Modern English is subject to similar changes, as seen from the emergence of ‚Äòe-language‚Äô in online communities. Though these changes can temporarily harm intelligibility, they should ultimately be embraced as useful additions to the English Language if they improve the effectiveness with which language users can communicate. English has and will continue to evolve, changing to maintain its use as an effective communication tool throughout the world.\nThroughout the course of history, English has not been resistant to change. Old English was a highly inflected language, containing an intricate system of inflections for its grammatical cases. Since then, there has been significant inflection reduction, namely during the Middle English period where the -a, -u and -e suffixes all merged into the ending -e. The nominative case also housed an extensive grammatical gender system, which fell out of favour after contact with other languages with simpler syntax. Notably, the syntax of Old English displayed a flexible word order, but throughout the 12th Century CE, the SVO structure was settled upon as the language entered the phase of Early Middle English. This change was largely driven by the 1066 Norman invasion of Great Britain, which brought the influence of the French Language to British English. ‚ÄúEnglish has been this vacuum cleaner of a language because of its history,‚Äù (Stimulus 1) and the newfound rulers brought many French-derived lexemes to the language, such as ‚Äòmansion‚Äô and ‚Äòinquire‚Äô for the respective Old English synonyms ‚Äòhouse‚Äô and ‚Äòask‚Äô. ‚ÄúPeople did not wake up in the morning and decide to use the word ‚Äòbeef‚Äô instead of ‚Äòox meat‚Äô, [but rather] these changes to English took place over centuries‚Äù (Stimulus 3) as the language changes and adapts to new needs and demands. Nonetheless, English has historically shown significant change and has been anything but resistant to adaptation.\nModern English is currently changing and will continue to do so. The rapid technological advancements throughout recent decades have profoundly influenced the English Language. Text messaging as a new medium for communication has created a need for the language to be short and succinct, pressuring native speakers to use acronyms, clipped lexemes and alternative syntax to express ideas faster.\nText messaging acronyms such as ‚ÄòLOL‚Äô have arisen from the needs for convenience. Even newfound additions to the language such as ‚ÄòLOL‚Äô are undergoing rapid semantic shift; previously intended to express the literal action of laughing out loud, the acronym is now more of a way to signal irony or that a comment is intended to be funny. This changes depending on the semantic and syntactic content of the message, such as conviviality in ‚ÄòI had a great time lol‚Äô, lightheartedness in ‚Äòlol okay I‚Äôll see you soon‚Äô and self deprecating humour in ‚Äòi‚Äôm drowning in bills fml lol‚Äô. As such, the acronym ‚ÄòLOL‚Äô has seen significant semantic shift throughout solely the last few decades.\nNouns such as the clipped and suffixed ‚Äòselfie‚Äô along with the compound ‚Äòemoji‚Äô borrowed from Japanese are both relatively recent neologisms that have been added to the English lexicon, demonstrating how change is ever present.\nFurther, the ongoing development of gender neutral pronouns demonstrates English‚Äôs willingness to adapt to the changing needs of individuals who do not identify within the traditional gender binary, shown by the recent changes to what was previously a closed word class, pronouns. Whilst not only being a lexical change, the change in pronouns from he/she to they/them requires a syntactic change of the language as well: when using they in reference to a singular subject, the verb conjugation does not take the singular form - not ‚ÄòThey writes‚Äô but ‚ÄòThey write‚Äô - demonstrating an acceptable modern change to the syntax of the language. Thus, Modern English continues to change, both lexically and syntactically, as it has done in the past.\nLanguage change should be embraced so long as it improves the communication of ideas and maintains mutual intelligibility. There have been several neologisms added to the English lexicon due to the emergence of e-language, such as the above ‚ÄòLOL‚Äô, ‚Äòemoji‚Äô and ‚Äòselfie‚Äô. ‚ÄúEnglish speakers already have over a million words at our disposal [so it is fair to ask if] we really need to add 1,000 new ones a year to the lexicon‚Äù (Stimulus 2), but so long as these additions are mutually intelligible in the long run and allow language users to more effectively communicate otherwise foreign concepts, they are worthwhile additions to the rich lexicon of English.\nModern e-language frequently brings jargon previously exclusive to the semantic field of gaming to a wider audience, such as the acronym turned lexeme ‚Äòpog‚Äô. Originally being an acronym for the noun phrase ‚Äòplay of the game‚Äô, ‚Äòpog‚Äô has undergone semantic shift so that it is now used as an adjective to describe any ‚Äòawesome‚Äô person or moment, which has been adopted by the wider online community. This transformation from jargon to plain language demonstrates how groups of language users can adopt lexemes which aid in their communication of ideas or identity, a change that should be embraced.\nDuring adoption periods, it may be hard for other language users to understand the semantics behind a lexeme, but this stands true for the introduction of any new concept and is not harmful. Similarly, the use of they/them as a singular pronoun could be viewed as incorrect use of the language. ‚ÄúThe problem is that the word has a specific meaning, which is being diluted and devalued by its overuse in incorrect contexts‚Äù (Stimulus 4). However, this semantic shift accommodates for a change in perception of concepts such as gender for the speakers of the language while maintaining mutual intelligibility. Therefore, change of this form should be embraced, as it allows for further expression through the language.\nThe English Language has seen great change throughout its history and continues to do so in the modern era. The purpose of language is to communicate ideas, and so long as language change aids in this process, it should be embraced as a beneficial feature of any living language. From Old English to Modern English, from archaisms to modern e-language, language change has been and will continue to be an integral feature of English that facilitates the effective communication of speakers around the world."},"notes/School-Subjects/English-Language/Year-11/Language-Change/Grammatical-Cases":{"title":"Grammatical Cases","links":["tags/englang"],"tags":["englang"],"content":"#englang\nNominative ¬ß\nDenotes that the specific noun or pronoun is the subject of the sentence. For example, in ‚ÄúMark eats cake,‚Äù Mark is in the nominative case.\nGenitive ¬ß\nA noun case which is used mainly to show possession, such as ‚Äòs in English.\nAccusative Case ¬ß\nThe case used for a noun when it is the direct object of a verb, or the object of some prepositions. For example, in ‚ÄúThe dog ate our turkey,‚Äù our turkey would be the direct object and in the accusative case.\nDative Case ¬ß\nA grammatical case used in some languages to indicate the recipient or beneficiary of an action. For example, in ‚Äúwe gave a bone to our dog,‚Äù our dog is the recipient and therefore in the dative case."},"notes/School-Subjects/English-Language/Year-11/Language-Change/Language-Change-Essay":{"title":"Language Change Essay","links":["tags/englang","tags/essay","tags/research"],"tags":["englang","essay","research"],"content":"#englang#essay#research\n\n\n                  \n                  Question \n                  \n                \nSpelling and correct grammar are no longer important in modern society\n\nSpelling and correct grammar are no longer important in modern society, a controversial claim for sure. The influence and grammatical syntax has had a profound impact on our use of language, the change of which makes language easier or harder to understand based on who you ask. So how important is spelling and grammar truly in our modern society?\nBefore we can answer the question of whether syntax is important anymore in society, we must first ponder upon the purpose of language in the first place. Language‚Äôs primary purpose is communication, to be able to convey our thoughts and ideas from one person to another. These ideas may be the ones explicitly being communicated by the speaker, or judgements we perceive through their use of the language itself. This key distinction is one that the debate hinges upon: does a lack of ‚Äúcorrect‚Äù grammar make language easier or harder to understand?\nCorrect grammar is a tricky concept. When your friend texts you ‚Äúomg i‚Äôm running saurrr late‚Äù, would that constitute as correct grammar? Most people would say no, yet they can perfectly understand the intended concept that the message communicates. It can thus be argued that despite not following the conventions of ‚ÄúStandard English‚Äù, these abbreviations, slang and alternate spellings of the digital age make communication of ideas more effective and efficient, at least to those who understand them. And this is the problem that many advocates for ‚Äúcorrect grammar‚Äù struggle with, they do not understand the complex rules and structure of ‚Äúcommunity languages‚Äù. The previous sentence starting with an ‚Äúand‚Äù did not obfuscate meaning, but the initialism ‚Äúgghf‚Äù (good game, have fun) would make no sense to someone not in the gaming community, which turns these expressions into a shared identity. As such, a more flexible approach to grammar not only allows for ideas to be communicated more efficiently and effectively, but also builds up a culture in language that can convey many more perceptions of the speaker than just the words themselves.\nBad grammar has social implications. Advocates for ‚Äúcorrect grammar usage‚Äù have a point: the use of conventions from Standard English does make one seem more educated, professional and elite, and it therefore must be taught in schools if one wants any job viability. The problem with this view is that a truly educated individual can control the perception that they portray to others. You do not want to sound like a court official when speaking with your friends; the informal environment of friendship also calls for the use of informal language, but it is most definitely a needed skill, as much is being able to switch register. Grammar should not come in the way of expression, but needs to be viewed as a tool that can be wielded to control how others perceive you, and the way that grammatical structure is taught in schools must follow suite. Could it perhaps be a solution for schools to teach the grammatical conventions of our new online world side by side with those of Standard English? Should we not expect the children of the future to be able to communicate in more ways than simply a formal register? ‚ÄúBad‚Äù grammar has social implications, but so called ‚Äúgood‚Äù grammar does too, and people need to be able to learn how to switch between them.\nFinally, it seems apt to touch on the role of grammar and spelling in our education system. Increasingly, ‚Äúcorrect grammar‚Äù has become less indicative of education and status due to the prevalence of auto correction tools built into every major computing platform, turning the previously difficult and admirable task of using the ‚Äúcorrect‚Äù syntax into something any child can do. School should not teach about spelling and grammar in a way that restricts creativity or expression; so easily can a teacher give a student bad marks for spelling a few words wrong instead of focusing on the wonderful ideas that they bring to the table. Rather, it can be proposed that grammar and namely spelling can be viewed in the same way as handwriting: if it makes your work incomprehensible then it is an issue, but in no way shape or form is handwriting a large consideration for grades, and spelling should not be either, given that they are both significantly aided by the use of modern technology. Children should be taught to write eloquently and to think deeper and harder about what they write rather than how they write it.\nTo summarise, writing is a tool for communication. Grammar, spelling and syntax can tell the reader a lot about the writer, both in terms of social perception and in terms of the direct message conveyed, but children in our new rapidly changing world should be taught to use this as their sword rather than it being a barrier to entry in the first place."},"notes/School-Subjects/English-Language/Year-11/Language-Change/Language-Standards":{"title":"Language Standards","links":["tags/englang","tags/card"],"tags":["englang","card"],"content":"#englang\n\n\n                  \n                  Note \n                  \n                \nOvert Prestige#card ¬ß\nUse of a standard like British English\nCovert Prestige#card ¬ß\nWhen it is considered ‚Äúcool‚Äù to speak a less prestigious dialect\n\nEinar Haugen‚Äôs Process of Standardisation ¬ß\nHuagen describes the process of standardisation as involving four aspects of development:\nSelection of a Norm ¬ß\nTerm used to refer to the choice of a language variety to fulfil certain functions in a given society.\nThis can be somewhat controversial, as it requires choosing which varieties and forms the standard will be based on (subjective). In history this was often the prestigious variety, such as the one spoken by the nobility.\nIn the past, because only the nobility were predominately literate, they had a monopoly and the choice of the standard variety was not contested. Nowadays the choice is more nuanced.\nCodification of Form ¬ß\nThis is where the selected standard is cemented, for example with the compilation of dictionaries and grammars. This process is what ultimately establishes what is correct and what isn‚Äôt.\nIt reflects spoken language, but does not always involve pronunciation, just writing down ‚Äúwhat is correct‚Äù.\nCodification does not make the standard, many varieties have dictionaries without having a standard, Scots being one example, and the Urban Dictionary is a very good example of codification of non-standard forms.\n‚ÄúCodification is the spear of the prescriptivist, meaning that codification is used to argue the right way to use the language.‚Äù\nElaboration of Function (&amp; modernisation) ¬ß\nRefers to the stylistic and syntactic development of a codified language to meet the communicative demands of modern life and technological advances.\nAcceptance by the Community ¬ß"},"notes/School-Subjects/English-Language/Year-11/Language-Change/Prestige-and-Language":{"title":"Prestige and Language","links":[],"tags":[],"content":"Received Pronunciation:: the accent needed to be received in court, very much like the queen‚Äôs English\nOvert prestige:: language that is openly prestigious, such as the English accent or the cultivated Australian accent\nCovert prestige:: language because it is ‚Äúcool‚Äù, such as the language of hip hop and how it is trendy. People might tend to go ‚Äúdownwards‚Äù with their language such as trying to be cool and using AAVE language from pop-culture."},"notes/School-Subjects/English-Language/Year-11/Language-Change/Timeline-Inquiry-Task":{"title":"Timeline Inquiry Task","links":[],"tags":[],"content":"The Change of Gender in English ¬ß\nOut of the many difficulties of learning a new language, one of the most foreign concepts for native English speakers tends to be that of grammatical gender, where all nouns are classified into their own gender. This common feature of many languages surprisingly close to English leads to an obvious question: why did English lose its grammatical gender and how did such a large syntactic change occur over such a short time, leaving nothing but the smallest remnants in Modern English?\nSome may find it surprising that Old English had a very intricate system of inflections for each of its 5 grammatical cases. Since then, there has been a significant inflection reduction, namely during the Middle English period where the -a, -u and -e suffixes all merged into the ending -e. Similarly, of the extensive case system, only 3 cases remaining in most modern usage and that too with much simplified inflections. Of these cases, the nominative case is particularly interesting as it houses most of our previous grammatical gender, one that many of the modern Germanic languages share with three categories: masculine, feminine and neuter. Nouns were assigned to one of these gender classes in ‚Äúclassical‚Äù West Saxon, where grammatical gender was well manifested, but over time there was a systematic process of syntactic and morphological change due to the decay of inflectional ending in English during the Middle English period. As English expanded further through the British Isles, contact with the languages from the north of England resulted in an overall decline of grammar, where consistency was simply not as important as it used to be due to the vast span of the language.\nWithin the nominative case, Old english had a vast system of inflectional morphemes that grouped nominal lexical items into their gender categories which always resolved to the gender of the person they were referring to. As we can see below, many lexemes in Old English had inflectional morphemes that denoted gender:\n\n\nb√¶cere/b√¶cestra ‚Äúbaker‚Äù\n\n\nbe√æ√¶cend/be√æ√¶cestre ‚Äúdeceiver‚Äù\n\n\ncempa/cempestre ‚Äúwarrior‚Äù\n\n\nlufiend/lufestre ‚Äúlover‚Äù\n\n\nt√¶ppere/t√¶ppestre ‚Äútavern keeper‚Äù\n\n\nFrom the above list, there is a clear pattern that the suffix ‚Äú-estre‚Äù marks the feminine gender case for nominal lexemes, but equally if not more common would be the irregular nouns with a range of essentially unrelated suffixes:\n\n\nfyrenhycga/fyrenhycge ‚Äúadulterer/ess‚Äù\n\n\nhorig/hora ‚Äúfornicator‚Äù\n\n\nnefa/nefene ‚Äúnephew/niece‚Äù\n\n\n√æeow/√æeowe ‚Äúslave‚Äù\n\n\nneahgebur/neahgebyrild ‚Äúneighbour‚Äù\n\n\nEven more confusingly, many unambiguously female nouns are assigned to the masculine gender with the suffix ‚Äú-man/mon‚Äù\n\n\nf√¶menhadesmon ‚Äúvirgin‚Äù\n\n\nhiredwifmon ‚Äúfemale member of a household‚Äù\n\n\nm√¶gdenman ‚Äúvirgin‚Äù\n\n\nm√¶g√æman ‚Äúvirgin‚Äù\n\n\nwifmann ‚Äúwomen‚Äù\n\n\nEvidently, the examples above illustrate that the grammatical gender of a predicate in Old English did not always align with the natural gender of its subject, which would have been rather complicated namely for non-native speakers to pick up.\nThis precisely demonstrated why grammatical gender had such a large downfall moving into the Middle English period: it was inconvenient and too complicated for newcomers to learn. For the same reasons Middle English saw an overall decline of inflections and accents, grammatical gender became an oversight as the language expanded and most suffixes began defaulting to their neuter form. As expansion and contact with new tribes often does, the ‚Äúnew English‚Äù that came about from the settlement of North England filtered out the complex elements of respective language, gradually washing away the remnants of an extensive grammatical gender system with it too.\n\\newpage\nCaxton &amp; The Printing Press ¬ß\nOne of the most influential inventions in the history of the English language would be the printing press, brought to England by one William Caxton in 1476. The machine was revolutionary, making books orders of magnitude cheaper to produce and buy, and therefore caused the levels of literacy in the common English people to climb much higher than before. As the printing press was fixed in its codification, it also marked the beginning of a greater standardisation of syntax across the language.\nCaxton started off as a successful merchant, serving as the governor of the ‚ÄòEnglish Nation of Merchant Adventurers‚Äô for the better part of a decade. This not only allowed him to build a strong standing in the merchant community, but also act as a diplomat for the King at the time, through the process of which he gained a significant wealth.\nIn the early 1470s, his interests turned to literature and he started the work of translating books from French to English. Through these ventures, Caxton spent some time in Cologne, Germany learning of the printing presses they had started developing. Although printing with movable type had been invented many centuries earlier in China, the technology was not well developed in Europe until the mid-15th century, meaning that the printing press was quite new at the time. As he worked on his own eventual translation of ‚ÄòRecueil des histoires de Troye‚Äô (which later become the first book in history to be printed in English), he later recounted that how his ‚Äúpen became worn, his hand weary, his eye dimmed‚Äù with the laborious task of copying the book. Simply, he found the work such a bore that he ‚Äúpracticed and learnt‚Äù at a great personal cost how to print it instead. The next year, toward the end of 1476, Caxton returned to England and established the now famous press at Westminster.\nAt the time, most continental printers made their books in Latin, the international language of the time, so that they could sell them to a wider market. Caxton chose to ride against this wave, and though they were still a luxury aimed at fairly wealthy people, over the coming decades the price of books fell heavily as he streamlined the process and reshaped the way in which people acquired books for information and entertainment.\nCaxton was also responsible for the spread of the variety of English which was to become the standard throughout England. The need for a standard was becoming increasingly evident; as more books were produced, there was a need for a standard syntax to be agreed upon. Caxton adopted a certain variety of Middle English (the so called ‚ÄòKing‚Äôs English‚Äô) that was commonly used in London at the time, and spread this variety throughout England by his trade.\nThough it cannot be asserted if this was a conscious choice or not, he most certainly put quite some thought and effort into the selection of syntax and lexemes to suite his preferences, as accounted in his ‚Äòegges‚Äô story. Therewith other dialects of English were marginalised and many died out, but Caxton‚Äôs work set out the groundwork for what we know today as the world‚Äôs language. This work, so instrumental to the language we speak today, marked the start of a transition to modern English, but it was not until the first dictionaries were published that this standardisation would be further improved and blossom to maturity.\n\\newpage\nThe Rise of the Internet - A New Era for the English Language ¬ß\nThe internet has changed the world forever. From how we see the world to how we speak about it, the shift in the English Language has been majorly influenced by the way we communicate online. The internet has caused the lexical shift of pre-existing words, started the emergence of  ‚ÄúeLanguage‚Äù, a register consisting of internet-related terms, acronyms and spellings and generally sped up the process of language change in English.\nThe internet has introduced many new words in the average person‚Äôs lexicon. To the general population, this may end at lexemes such as as ‚Äúemail‚Äù, ‚Äúblog‚Äù and ‚Äúapp‚Äù, but for the generation that has grown up with the internet, this new vocabulary extends much further. Internet ‚Äúmemes‚Äù, a whole new concept in and of itself, have resulted in many slang words reaching mainstream popularity. Lexemes such as ‚Äúrizz‚Äù, ‚Äúslay‚Äù, ‚Äútouching grass‚Äù and ‚Äúthe ick‚Äù have spread further than any slang before the internet age, and in rare cases stick around to join the coveted ranks of our English Language.\nThe fall of formality can also be accredited to the rise of the internet. Though this may be alarming to some, it is far from surprising: as people spend more time talking online in informal contexts, a shadow of their online syntax creeps into their academic work. For example, take this academic paper published in 2017, a form of writing that has tended to be as formal as it gets. What is surprising about this text is the high frequency of informal features, including contractions (isn‚Äôt) and first/second person pronouns, all of which would have been an abnormality before the age of the internet:\n\n‚ÄúFor at least on a popular Christian conception, when¬†you¬†believe something truly on the basis of faith this¬†isn‚Äôt¬†because of anything¬†you‚Äôre¬†naturally competent to do‚Ä¶I argue¬†in this article that¬†there‚Äôs¬†no deep tension between faith-based knowledge and virtue epistemology.‚Äù\n\nKegan J. Shaw, Cambridge University Press\n\n\nModal verbs such as ‚Äúmust‚Äù, ‚Äúmay‚Äù, and ‚Äúshall‚Äù have seen an all time low since the start of the internet. This decline was present well before the internet came about to speed it up, but phrases from only a few decades ago now feel archaic:\n\n‚ÄúOf course, we shall not be staying here long.‚Äù\n‚ÄúMay I take my jacket off, please?‚Äù\n\nBritish National Corpus 1994\n\n\n\nSimply put, the internet has pushed the boundaries of informality. The way we now communicate online somewhat resembles the telegraphic stage of child language acquisition, where children typically from the ages of around 18 to 24 months old use only the necessary words such as nouns, verbs and adjectives and omit function words such as prepositions and conjunctions. Online communication follows similar patterns; previously pressured by the monetary incentives of short messages, online language has remained laconic and efficient, focused solely on conveying meaning with the fewest words possible. This could be attributed to the fast-paced nature of online communities, creating pressure on our language for quick and concise communication.\nThe presence of the internet has also caused the lexical shift of words previously well established in the English lexicon. For many younger people, the word ‚Äúviral‚Äù would describe content that has gained rapid popularity rather than the older spreading that implied a virus. The word ‚Äútweet‚Äù could also be considered a similar case, though this would more so fall into the category of genericisation, similar to ‚Äúgoogle‚Äù or ‚Äúband-aid‚Äù.\nOverall, in a more globalised world, the internet gives rise to a new register of communication, incorporating elements of many languages and dialects to bring them to a mainstream audience. English, like all languages is constantly evolving and the internet is merely one of the many influences that shapes its trajectory, but we can stand back and watch in awe as the words we speak morph in front of our very eyes.\n\\newpage\nThe Future of English ¬ß\nLanguage changes, and the future of English will be no exception. Due to the global role of English, the emergence of new dialects and variations will play a large part in the fate of this language, along with the major influence of technology.\nLatin, once the lingua franca of the pre-modern Europe, gave birth to several regional dialects, and over time these eventually evolved into the modern Romance languages. A similar phenomenon can be observed today with English, namely in countries where it functions as a second language. The emergence of ‚Äúinterlanguages‚Äù combine features of English with native regional languages, mixing phonetics, syntax, and lexemes into new variations. Examples include ‚ÄúSinglish‚Äù in Singapore, ‚ÄúHinglish‚Äù in India and ‚ÄúSpanglish‚Äù in the United States. It can very easily then be hypothesised that English may bare a similar fate, splitting up into regional languages and perhaps evolving into a different form in the United States (the country with the largest concentration of native English speakers in the world).\nThe rise of online language has also lead to the relaxation of language rules, and attitudes towards consistently and correctness have shifted to be more lenient. Just as English said goodbye to its complicated inflectional system almost a millennia ago when coming in contact with new groups, online communities have found new ways to make the language more accessible and easier to use. Though these shifts tend to be viewed as informal at first, many stand the test of time, and there could possibly even be a slight reversal of the standardisation from Middle to Modern English such that there are competing norms for how the language should be used.\nOverall, the future of English will be shaped by its role as a global language across borders, both digitally and in the hearts of many cultures worldwide.\n\\newpage\nBibliography ¬ß\n\n\nAl Kadi, A &amp; Ahmed, R 2018, (PDF) Evolution of english in the internet age, ResearchGate, viewed 12 August 2023, https://www.researchgate.net/publication/323052712_Evolution_of_english_in_the_internet_age.\n\n\nCurzan, A 2003, Gender Shifts in the History of English, Cambridge University Press.\n\n\nFavilla, E 2017, How the internet changed the way we write ‚Äì and what to do about it, The Guardian.\n\n\nGodwin, R 2019, How the internet is changing language as we know it (ikr lol), the Guardian, viewed 13 August 2023, https://www.theguardian.com/books/2019/oct/11/how-to-speak-internet-online-writing-richard-godwin.\n\n\nHist, S-GC n.d., How did William Caxton influence and change modern English Language?, Shorthand.\n\n\nHorobin, S 2015, What will the English language be like in 100 years?, The Conversation, viewed 13 August 2023, https://theconversation.com/what-will-the-english-language-be-like-in-100-years-50284.\n\n\nJones, C 2015, Grammatical Gender in English, Routledge.\n\n\nKnibbs, K 2013, How Internet-speak is changing the way we talk | Digital Trends, Digital Trends, viewed 13 August 2023, https://www.digitaltrends.com/social-media/how-the-internet-is-changing-the-way-we-talk/.\n\n\nMiddle English, the Standardisation of English and the Printing Press 2012, My English Language, viewed 12 August 2023, https://www.myenglishlanguage.com/history-of-english/middle-english/.\n\n\nThe Editors of Encyclopedia Britannica 2019, William Caxton | Biography &amp; Facts, Encyclop√¶dia Britannica.\n\n\nThe Ohio State University n.d., The Cases in English | Department of Classics, classics.osu.edu, viewed 12 August 2023, https://classics.osu.edu/Undergraduate-Studies/Latin-Program/Grammar/Cases/English-Case.\n\n\nToko≈°ov√°, K &amp; Vogel, M 2015, Reduction in Noun and Adjective Inflections in Middle English Texts, 3 June, Masaryk University, Faculty of Education, viewed 12 August 2023, https://is.muni.cz/th/qu7t4/Tokosova_Bachelor_thesis.pdf.\n\n"},"notes/School-Subjects/English-Language/Year-11/Subsystems/Discourse":{"title":"Discourse","links":["tags/englang","tags/subsystem","tags/card"],"tags":["englang","subsystem","card"],"content":"#englang#subsystem\nCoherence vs Cohesion ¬ß\nCoherence#card ¬ß\nThis is about flow, about a text flowing nicely together\nCohesion#card ¬ß\nThis is about the individual parts of the text sticking together\n\nIn order to build something that is coherent, you need cohesion (which is like the building bricks or being grammatically correct)."},"notes/School-Subjects/English-Language/Year-11/Subsystems/Morphology-&-Lexicology":{"title":"Morphology & Lexicology","links":["tags/englang","tags/subsystem","tags/card","n.","2"],"tags":["englang","subsystem","card"],"content":"#englang#subsystem\n\n\n                  \n                  Info \n                  \n                \nLexicology:: the study of the form, meaning, and behaviour of words. \nLexicon:: the pool of words or vocabulary of someone or something \nLexeme:: all the variations of a word, for marry would be marriage, married, etc \nEtymology:: the history of how words became the words \n\nMorphology ¬ß\nMorphology is the branch of linguistics that studies the structure of words.\nIn English and many other languages, many words can be broken down into parts, for example\n\nunhappiness -&gt; un-happi-ness\nhorses -&gt; horse-s\nwalking -&gt; walk-ing\n\nWhat is a morpheme? :: The smallest unit which has a meaning or grammatical function that words can be broken down into are known as morphemes \nFree vs Bound Morphemes ¬ß\nFree Morphemes#card ¬ß\nFree morphemes are morphemes which can stand alone. We have already seen the example of ‚Äúyes‚Äù.\n\nBound Morphemes#card ¬ß\nBound morphemes never exist as words themselves, but ate always attached to some other morpheme. An example would be ‚Äúun-‚Äù\n\nCan further be divided into 4 categories:\n\nPrefix: un-happy\nSuffix happi-ness\nInfix: abso-blooming-lutely (only non-standard words in English)\nCircumfix: en-light-en, same meaning of affixes ‚à¥ em-bold-en would have be an example of a circumfix\n\nDerivational vs Inflectional Morphemes ¬ß\nDerivational Morphemes#card ¬ß\nDerivational morphemes create or derive new words by changing the meaning or changing the word class of the word. For example, happy turns into unhappy, and both words are adjectives but the meaning changes.\n\nThe Diminutive Suffix#card ¬ß\nA diminutive creates a meaning of ‚Äòsmall‚Äô or ‚Äòlittle‚Äô (this can be literal or notional) The most common diminutives are formed with and with suffixes such as¬†-let¬†and¬†-y. We often use a diminutive with names or with abbreviated names when we want to be more informal, or to express affection for someone or something.\n\nHere‚Äôs a booklet¬†which gives advice on keep-fit.¬†(booklet¬†= a small book)\nRight, Matty, I‚Äôve got some very good news for you.¬†(Matty¬†is formed from the name ‚ÄòMatthew‚Äô)\nI think she‚Äôs the perfect kitty¬†for Jennifer.¬†(kitty¬†is formed from ‚Äòkitten‚Äô a young cat)\nWhat a cute little duckling\n\n\nInflectional Morphemes#card ¬ß\nInflectional morphemes don‚Äôt alter the meaning or word class of a word; instead they only refine and give extra grammatical information about the word‚Äôs already existing meaning. For example cat into cats or walk into walking.\n\nIn English, all inflectional morphemes are suffixes (only by chance, since in other languages this is not true) and there are 8 of them.\n\n-s, 3rd person sg. present\n‚ÄúHe waits‚Äù\n-ed, past tense (also -t as in ‚Äúused to‚Äù or ‚Äúspent‚Äù)\n‚ÄúHe waited‚Äù\n-ing, progressive\n‚ÄúHe is waiting‚Äù\n-en, past participle\n‚ÄúI had eaten‚Äù\n-s, plural\n‚ÄúBoth chairs are broken‚Äù\n-‚Äòs, possessive\n‚ÄúThe chair‚Äôs leg is broken‚Äù\n-er, comparative, can also be agentive but that‚Äôs derivational\n‚ÄúHe was faster‚Äù\n-est, superlative\n‚ÄúHe was the fastest‚Äù\n\nWord Formations ¬ß\nAffixation#card ¬ß\nForming new words by adding an extra bound morpheme, so an affix.\n\nCompounding#card ¬ß\nForming new words not from bound affixes but from two or more independent words: the words can be free morphemes, words derived by affixation, or even words formed by compounds themselves. e.g. girlfriend, blackbird\n\nBy putting stress on both words you seperate them into two words\nReduplication#card ¬ß\nThis is forming new words either by doubling an entire free morpheme (total reduplication) or part of a morpheme (partial reduplication).\n\nBlending#card ¬ß\nWhere two words are merged together, such as:\n\nbrunch - from breakfast and lunch\nsmog - from smoke and fog\nspork - from spoon and fork\n\n\nThe Parts of Speech ¬ß\nA part of speech is a class of words based on the word‚Äôs function, the way it works in a sentence. They are sometime‚Äôs referred to as word classes.\nNouns#card ¬ß\n‚ÄòNoun‚Äô is the name given to words that name things or concepts.\nThere are many different types, or sub classes of nouns, some you will be familiar with, other maybe not.\n\nVerbs#card ¬ß\nVerbs are words that describe what a subject is doing. They also describe relationships between one thing and another, allowing us to place an event, state, etc. in the past, present or future.\n\nAdjective#card ¬ß\nA word that modifies or defines a noun, or a describing word.\nDegrees of Adjectives ¬ß\n\nPositive Degree: plain old adjective, e.g. happy\nComparative Degree: e.g. happier\nSuperlative Degree: e.g. happiest\nAbsolute: e.g. unique\n\n\nAdverbs#card ¬ß\nAdverbs are words that change, modify or qualify a verb, or another adjective/adverb.\n\nPronouns#card ¬ß\nPronouns are words which we use in place of a noun, to avoid being repetitive.\nThe noun they replace is known as the antecedent. The antecedent doesn‚Äôt always come before the pronoun that replaces it.\n\nSaying ‚ÄúJohn did ‚Ä¶ He ‚Ä¶‚Äù is anaphoric reference, whereas if the pronoun was before it would be cataphoric reference.\nPrepositions#card ¬ß\nAs the name suggests, a preposition places, links or connects words and phrases to other words and phrases within a sentence. Prepositions usually come directly before a noun in a sentence and can also precede a gerund verb (non-finite form, -ing version where it‚Äôs being used as a noun ‚Äúshopping really annoys me‚Äù).\n\nConjunctions#card ¬ß\nConjunctions connect words, phrases, clauses and sentences. They tell us the relationship between ‚Äòthoughts‚Äô.\n\nInterjection#card ¬ß\nAn interjection is a word or expression that occurs as an utterance on its own and expresses a spontaneous feeling or reaction.\nThe category is quite heterogeneous, and includes such things such as exclamations, curses, greetings, response particles, and hesitation markers.\n\nTypes of Writing Systems ¬ß\nOrthographic#card ¬ß\nThis type of writing system is arbitrary and the language is ‚Äúrepresented‚Äù in writing by something like an alphabet, such as English.\n\nIconographic#card ¬ß\nThis type of writing system is less arbitrary and uses icons that visually represent what they‚Äôre meant to mean, such as Chinese or Korean.\n\nAccent and Dialect#card ¬ß\nAccent is to do with how things are pronounced, purely to do with sound, while dialect is to do with words and the lexicon that people pull from. For example, a Yorkshire man may say tub instead of bath (a different dialect), but would still say grass and have it sound different.\n\nAccent: style switching\nDialect: code switching\n\n\nDefinitions ¬ß\nJargon#card ¬ß\nWords from any semantic field, namely specialist terminology that others won‚Äôt understand\nArgo#card ¬ß\nA secret code, the jargon or slang of a particular group or class (usually thought of lower class)\nSlang#card ¬ß\nInformal language that is non-standard but something that isn‚Äôt necessarily used by a particular group\n\nNormally made to avoid detection to make it harder for certain groups to understand\n\nColloquial Language#card ¬ß\nConversational language that is informal\nVernacular#card ¬ß\nColloquial language or dialect that is regional\n\nStreet\nJive\nCant\nDemotic\nIdiomatic\nParlance\nPatios\nPhraseology\nArchaic\nDialect, Sociolect and Idiolect\n\nDialectal variation#card ¬ß\nVariation associated with the language of a particular locality, region or geographical area. one thing, multiple words\nFlipping#card ¬ß\nTerm used to suggest rapid semantic change in a word from its original meaning to its opposite (or near opposite)\nOrthographical variation#card ¬ß\nHow the use of symbols, letters and spellings varies among language users\nPhonological variation #card ¬ß\nHow the sounds of a language vary among different speakers (accent)\nSemantic variation #card ¬ß\nHow word (and phrase) meanings vary from place to place and group to group. one word, multiple things\nSocial variation#card ¬ß\nVariation associated with a particular social group i.e., social class or educational background\n\nEtymology ¬ß\nThe study of the history of use and origins of words.\nExamples ¬ß\n\n\nSandwich (n.):\n1762, said to be a reference to John Montagu (1718-1792), 4th Earl of¬†Sandwich, who was said to be an inveterate gambler who ate slices of cold meat between bread at the gaming table during marathon sessions rather than rising for a proper meal (this account of the origin dates to 1770).\nIt also was in his honor that Cook named the Hawaiian islands (1778) when Montagu was first lord of the Admiralty (hence the occasional 19c. British¬†Sandwicher¬†for ‚Äúa Hawaiian‚Äù). The family name is from the place in Kent, one of the Cinque Ports, Old English¬†Sandwic√¶, literally ‚Äúsandy harbor (or trading center).‚Äù\n\n\nBerserk (adj.):\n1844, from¬†berserk¬†(n.) ‚ÄúNorse warrior‚Äù (by 1835), an alternative form of¬†berserker, a word which was introduced (as¬†berserkar) by Sir Walter Scott in ‚ÄúThe Pirate‚Äù (1822), from Old Norse¬†berserkr¬†(n.) ‚Äúraging warrior of superhuman strength.‚Äù It is probably from¬†*ber-¬†‚Äúbear‚Äù +¬†serkr¬†‚Äúshirt,‚Äù thus literally ‚Äúa warrior clothed in bearskin‚Äù (see¬†n.%20+%C2%A0%5Bsark%5D(https://www.etymonline.com/word/sark?ref=etymonline_crossreference%20%22Etymology,%20meaning%20and%20definition%20of%20sark%22%7C%5Bhttps://www.etymonline.com/word/bear?ref=etymonline_crossreference#etymonline_v_8204%20%22Etymology,%20meaning%20and%20definition%20of%20bear%22)). Thus not, as Scott evidently believed, from Old Norse¬†berr¬†‚Äúbare, naked‚Äù and meaning ‚Äúwarrior who fights without armor.‚Äù\n\n\nNightmare (n.):\nc. 1300, ‚Äúan evil female spirit afflicting men (or horses) in their sleep with a feeling of suffocation,‚Äù compounded from¬†night¬†+¬†etymonline_v_43707 ‚ÄúEtymology, meaning and definition of mare‚Äù¬†(n.3) ‚Äúgoblin that causes nightmares, incubus.‚Äù The meaning shifted mid-16c. from the incubus to the suffocating sensation it causes. Sense of ‚Äúany bad dream‚Äù is recorded by 1829; that of ‚Äúvery distressing experience‚Äù is from 1831.\n\n\nQuarantine (n.):\n1660s, ‚Äúperiod a ship suspected of carrying contagious disease is kept in isolation,‚Äù from Italian¬†quaranta giorni, literally ‚Äúspace of forty days,‚Äù from¬†quaranta¬†‚Äúforty,‚Äù from Latin¬†quadraginta‚Äùforty‚Äù (related to¬†quattuor¬†‚Äúfour,‚Äù from PIE root¬†*kwetwer-¬†‚Äúfour‚Äù).\nThe name is from the Venetian policy (first enforced in 1377) of keeping ships from plague-stricken countries waiting off its port for 40 days to assure that no latent cases were aboard. The extended sense of ‚Äúany period of forced isolation‚Äù is from 1670s.\n\n\nClue (n.):\n‚Äúanything that guides or directs in an intricate case,‚Äù 1590s, a special use of a revised spelling of¬†clew¬†‚Äúa ball of thread or yarn‚Äù (q.v.). The word, which is native Germanic, in Middle English was¬†clewe, also¬†cleue; some words borrowed from Old French in -ue, -eu¬†also were spelled¬†-ew¬†in Middle English, such as¬†blew, imbew,¬†but these later were reformed to¬†-ue, and this process was extended to native words (hue, true, clue) which had ended in a vowel and¬†-w. The spelling¬†clue¬†is first attested mid-15c.\nThe sense shift is originally in reference to the clew of thread given by Ariadne to Theseus to use as a guide out of the Labyrinth in Greek mythology. The purely figurative sense of ‚Äúthat which points the way,‚Äù without regard to labyrinths, is from 1620s. As something which a bewildered person does not have, by 1948.\n\n\nEuphemism (n.):\n1650s, from Greek¬†euphemismos¬†‚Äúuse of a favorable word in place of an inauspicious one, superstitious avoidance of words of ill-omen during religious ceremonies,‚Äù also of substitutions such as¬†Eumenides¬†for the Furies. This is from¬†euphemizein¬†‚Äúspeak with fair words, use words of good omen,‚Äù from¬†eu-¬†‚Äúgood, well‚Äù (see¬†eu-) +¬†phƒìmƒì¬†‚Äúspeech, voice, utterance, a speaking,‚Äù from¬†phanai¬†‚Äúspeak‚Äù (from PIE root¬†2%20%22to%20speak,%20tell,%20say%22).%20See%20also%C2%A0%5BEuxine%5D(https://www.etymonline.com/word/Euxine?ref=etymonline_crossreference%20%22Etymology,%20meaning%20and%20definition%20of%20Euxine%22%7C%5Bhttps://www.etymonline.com/word/*bha-?ref=etymonline_crossreference#etymonline_v_52548%20%22Etymology,%20meaning%20and%20definition%20of%20*bha-%22), and compare Greek Greek¬†aristeros¬†‚Äúthe better one,‚Äù a euphemism for ‚Äúthe left (hand).‚Äù In English, a rhetorical term at first; broader sense of ‚Äúchoosing a less distasteful word or phrase than the one meant‚Äù is first attested 1793.\n\n\nEmergency (n.):\n‚Äúunforeseen occurrence requiring immediate attention,‚Äù 1630s, from Latin¬†emergens, present participle of¬†emergere¬†‚Äúto rise out or up‚Äù (see¬†emerge). Or from¬†emerge¬†+¬†-ency. As an adjective by 1881.\n\n"},"notes/School-Subjects/English-Language/Year-11/Subsystems/Phonetics-&-Phonology":{"title":"Phonetics & Phonology","links":["tags/englang","tags/subsystem","tags/card"],"tags":["englang","subsystem","card"],"content":"#englang#subsystem\nPhonetics ¬ß\nPhonetics is the study of human speech sounds, how they‚Äôre produced, transmitted and received. Phonetic transcription focuses on the precise way in which a sound is produced by a particular speaker on a particular occasion, but is not related to any particular language.\n\nWe refer to individual sounds as phones or sounds, never letters\nThere are two kinds of transcriptions using the IPA; broad and narrow\nAll broad (general or phonemic) transcriptions is done with phonetic slashes /si/\nAll narrow (phonetic) transcription is done within phonetic brackets:¬† [si]\n\n\nQuestions:\n\n\nWhat are the two kinds of transcriptions using the IPA? :: There are two kinds of transcriptions using the IPA; broad and narrow. \nFields#card ¬ß\nArticulatory Phonetics ¬ß\nHow sounds are produced\nAcoustic Phonetics ¬ß\nPhysical properties of sounds\nAuditory Phonetics ¬ß\nHow sounds are perceived\n\nTranscription ¬ß\nTranscription aims to create a system of one-to-one sound-symbol correspondence, which is not necessarily the case with spelling.\nExamples of transcription:\n\nNext: /n…õkst/\nChin: /t É…™n/‚Å†\nLamb: /l√¶m/\nKite: /ka…™t/\nCat: /k√¶t/\nMeet: /miÀêt/\n\nA rough-coated, dough-faced, thoughtful ploughman strode through the streets of Scarborough.¬† After falling into a slough, coughed and hiccoughed.\n/…ô …πuf-k…ô äted, d…ô ä-fe…™sd, Œ∏…îÀêtf äl pla äm…òn str…µ äd Œ∏ruÀê √∞…ô striÀêts …íf sk…ëÀêbr…ô. …ëÀêft…ô f…îÀêl…™≈ã …™ntuÀê …ô sla ä, k…ëft and h…™k åpt/\nThe International Phonetic Alphabet ¬ß\nThe IPA is an international alphabet that can transcribe any of the world‚Äôs languages.\n\nIn IPA transcription, one phone (IPA symbol) usually equals one sounds\n\nAllophones#card ¬ß\nWhat is an allophone? :: Allophones are more specific interpretations of a phoneme, made for narrow transcriptions.  ^1677146865719\n![Allophone Diagram.png](Allophone Diagram.png)\nPlace + Manner ¬ß\nPlace of Articulation#card ¬ß\nWhere the sound is made\n![Human Mouth Diagram.png](Human Mouth Diagram.png)\nConsonants ¬ß\n![Consonant IPA Table.png](Consonant IPA Table.png)\nThe top is the place and the and the left is the manner\nVowels ¬ß\n![Vowel IPA Table.png](Vowel IPA Table.png)\nManner of Articulation ¬ß\nHow the sound is made\n\nPhonology#card ¬ß\nPhonology is the study of the sound system of a specific language. The sounds of the English language for instance are very different to the sounds of Italian or Mandarin, and the sounds of Australian English differ from those of American English.\n\nHow many sounds in Australian English? :: 44 phonemes \nEach language has different sounds and stresses particular phonemes, and can completely change the meaning of the word (project vs project)\n\nConnected Speech ¬ß\nThere are no actual gaps in between words in speech generally, only written.\nElision#card ¬ß\nWhat is elision? :: The omission (deletion) of a sound in connected speech (sounds are lost) - this sound may be a vowel, a consonant or even a whole syllable. For instance ‚Äòcos instead of pronouncing because. We often elide sounds in rapid, everyday speech purely for ease of pronunciation. Another example would be ‚Äòwant to‚Äô vs wanna \nVowel Reduction#card ¬ß\nWhat is vowel reduction? :: Similar to elision but, instead of disappearing completely, vowels in unstressed positions are reduced to schwa /…ô/. So the word ‚Äòto‚Äô /tu/ might be reduced to /t…ô/ \nAssimilation#card ¬ß\nWhat is assimilation? :: When a sound changes to become more like a neighbouring sound. Assimilation may be progressive where the sound is affected by a preceding sounds, or regressive (also known as anticipatory assimilation), where the following sound is affected by a following sound.  \nExamples ¬ß\nProgressive:\n\ntalked becomes /t…îÀêkt/\npens become /penz/\nRegressive:\nlight blue /laip bluÀê/\ngreen boat becomes /griÀêm b…ô ät/\n\nInsertion#card ¬ß\nWhat is insertion? :: There are two examples of sounds being added, generally deliberately. The first is insertion, the other is epenthesis. Insertion doesn‚Äôt add a full syllable, whereas epenthesis does  \n\na voiceless stop insertion where, between a nasal consonant and a voiceless fricative, a voiceless stop with the same place of articulation as the nasal consonant is inserted.\n\ne.g. In English, many add a /p/ to hamster and say ‚Äúhampster‚Äù/\n\n\nafter a nasal consonant, a voiceless stop may be ‚Äòadded\n\ne.g. In English, many add a /k/ to something which becomes /s åmŒ∏…™≈ãk/\n\n\n\n\nEpenthesis#card ¬ß\nWhat is epenthesis? :: Epenthesis is the insertion of an extra sound into a word. Epenthesis adds a full extra syllable \n\nInvolves the addition of sounds (syllables) where they don‚Äôt strictly belong. For instance, it‚Äôs common for people to insert a vowel in ‚Äòsouvlaki‚Äô so that it sounds like ‚Äòsouv-e-laki‚Äô. And humbling sometimes becomes humb-e-ling.\n\n\nIntrusion#card ¬ß\nWhat is intrusion? :: This is where sounds are added between words but is not deliberate, but may be put together as insertion.  ^1685778838448\nWhen two vowel sounds meet, we tend to insert an extra sound which resembles wither a /j/, /w/ or /r/, to mark the transition sound between the two vowels, a device referred to as intrusion.\n\nConsonants can also be added, for instance Australians often add r in law and order so that it sounds more like ‚Äúlor an order‚Äù.\n\n\nMetathesis#card ¬ß\nWhat is metathesis? :: Metathesis sounds complicated but it‚Äôs a very common aspect of the English language. It is the transposition within a word of its sounds. The word ‚Äúmetathesis‚Äù comes from the Greek word meaning to transpose. It‚Äôs also known as a permutation.  \n\nAsk becomes /arks/\nNuclear becomes /nuc…ôl…ôer/\n\n\nProsodic Features#card ¬ß\nAffect how we say something\n\nVolume is the modulation of volume in your voice, which is used to convey emotions\nTempo is the speed and which we speak, reasons for speaking faster or slower\nIntonation is the pattern of pitch changes in speech, it is the variation of spoken pitch used in language. It can be used to\n\nIndicate the different attitudes and emotions of the speaker\nSignal the difference between statements, questions.\n\n\nStress is the degree of strength used to pronounce a syllable\n\n\nNon-verbal features do not affect the features of speech, while paralinguistic features (cough, laugh, breath, aka vocal effects) do impact my speech, meaning you can still hear them.\nPhonological Patterning#card ¬ß\n\nAlliteration: seven slippery snakes\nAssonance: he claps his hands and puts them in the sand\nConsonance: Mike likes his new bike\nOnomatopoeia: boom, crash, brrrrrr\nRhythm: I‚Äôm going down like a bottle of whiskey\nRhyme: The cat and the hat, sat on a mat\n"},"notes/School-Subjects/English-Language/Year-11/Subsystems/Quiz!":{"title":"Quiz!","links":["tags/subsystem","tags/englang"],"tags":["subsystem","englang"],"content":"#subsystem#englang\nPhonetics &amp; Phonology ¬ß\nWhat is the difference between phonetics and phonology? :: Phonetics studies speech sounds, and is not related to any language, while phonology studies the sound system of a particular language \nWhat is the difference between phonemic and phonetic transcription? :: Phonemic transcription is broad (the intended phonemes of the general language), and phonetic is narrow (more detail on how the actual sounds are pronounced) \nWhat are the prosodic features? :: The prosodic features (aka suprasegmental features) are stress, pitch, intonation, tempo and volume. They are phonological properties that relate to the pronunciation of syllables, words and phrases - not simply phonemes. \nWhat is a complement? :: A word (or words) needed to complete the meaning of an expression, e.g. Algebra is difficult. Practice makes algebra easy."},"notes/School-Subjects/English-Language/Year-11/Subsystems/Semantics":{"title":"Semantics","links":["tags/englang","tags/subsystem","tags/card"],"tags":["englang","subsystem","card"],"content":"#englang#subsystem\nVocabulary ¬ß\nSynonyms/Antonyms#card ¬ß\nSynonyms have the same or similar definition and antonyms the opposite\n\nHyponyms/hypernyms#card ¬ß\nHyponyms are a type of something, so rabbit is a hyponym of animals, and animal is a hypernym of rabbit.\n\nPolysemy#card ¬ß\nWhen one word has multiple meanings, like bank as the side of a river and also where people put their money.\n\nEuphemism#card ¬ß\nMake something more polite, such as ‚Äúpassed away‚Äù or ‚Äúno longer with us‚Äù for dying\n\nDysphemism#card ¬ß\nMake something purposely more offensive, such as ‚Äúsnuffed it‚Äù for dying\n\nSemantic Change#card ¬ß\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProcessExampleShiftMouseNarrowingComputerBroadeningBirdElevation/Amelioration (+ve meaning)FanDegeneration/Pejoration (-ve meaning)Knave/EmergencyEponymsElevatorMetaphorLeg/Tongue^1683503025963"},"notes/School-Subjects/English-Language/Year-11/Subsystems/Syntax":{"title":"Syntax","links":["tags/englang","tags/subsystem","tags/card"],"tags":["englang","subsystem","card"],"content":"#englang#subsystem\nSyntax refers to sentence structure, whereas the sentence types refers to semantics.\nThis means it studies the parts of a sentence, and how information s organised within speech or writing.\n\nEvery sentence contains a subject and a predicate\nThe subject refers to what or who is doing the action within the sentence. This is normally found at the beginning of an English sentence.\nThe predicate tells us about the subject.¬† It contains the verb, direct and indirect object etc.\nIf a group of words¬† does not contain both a subject and a predicate it is not a sentence ‚Äì it is a phrase.\n\nDirect vs Indirect Object#card ¬ß\nObject: noun that has not taken action of the verb mentioned\n\nDirect object: involved in action\nIndirect object: affected by action; not directly involved\ne.g. He gave his teacher a gift\nteacher - direct object\ne.g. He gave a gift to his teacher\nteacher - indirect object\nTIP: remove one of the nouns to see if it makes sense without\nunnecessary noun ‚Üí indirect object\n\n\nClauses#card ¬ß\nClauses express one idea, and they are made up of the following:\nsubject, verb, object, complement, adverbial\n![Parts of a clause.png](Parts of a clause.png)\n\nPhrases#card ¬ß\nA phrase is a group of two or more words which act as a part of speech. They generally do not contain either a subject or a finite verb. They also perform the function of a particular word class.\nFinite Verbs ¬ß\nIn order for a verb to be finite is must contain a subject, tense and a number.¬† For example:¬†\nLoving life.¬†\nSubject:¬† unknown\nTense:¬† Present\nNumber: unknown\nTherefore it is a phrase.\n\nSentence Types#card ¬ß\n\nDeclarative: a statement\nInterrogative: a question\nImperative: a direction or command\nExclamative: an exclamation!\n\n\nSentence Structure ¬ß\nSimple Sentence#card ¬ß\nConsists of one independent clause (contains a subject and verb and expresses a complete thought).\n\nI like coffee.\nMary likes tea.\n\n\nCompound Sentence#card ¬ß\nTwo or more independent clauses joined by a conjunction or semi colon.\n\nI like coffee and Mary likes tea\nThere are only seven coordinating conjunctions (FANBOYS):\nfor\nand\nnor\nbut\nor\nyet\nso\n\n\nComplex Sentence#card ¬ß\nA complex sentence consists of an independent clause plus a dependent clause. (A dependent clause starts with a subordinating conjunction or a relative pronoun, and contains a subject and verb, but does not express a complete thought.)\n\nCompound-Complex Sentences#card ¬ß\nConsists of at least two independent clauses and one or more dependant clause.\n\n\nJohn didn‚Äôt come because he was ill so Mary was not happy.\n"},"notes/School-Subjects/English-Language/Year-11/Transition-Period/Freedom-of-Speech-Essay":{"title":"Freedom of Speech Essay","links":["tags/englang","tags/essay"],"tags":["englang","essay"],"content":"#englang#essay\nFreedom of speech: it is an integral part of our society‚Äôs concept of freedom and liberty, and a right that many people do not have the privilege to exercise. Nonetheless, our nations are built on a notion of democracy that is flawed without this freedom, the ability to be able to articulate opinions and thoughts without the fear of being censored or face legal consequences. Time and time again, this right has been used to defend hate speech, and though freedom of speech definitely gives people the right to use hate speech, as it always has done, this does not mean people are exempt from any form of retaliation.\nVery frequently when people say that their freedom of speech is being violated, what they actually mean is that they are upset that people do not agree with them. In no way has anyone physically stopped them from saying ludicrous or hateful things, they have just faced retaliation for the harmful messages they are spreading. Such petty individuals seemingly miss the point of the concept: they are allowed to say what they want and let people listen, but what people do when they hear the message is up to the people and the people alone.\nIn some extreme cases, hate speech will be removed, or in other words, the opinion of the speaker is being censored. This in most cases can be seen as a consequence of the impact of the message, not the idea the message carries itself. Once again, they have fully been able to voice their opinion, and it is not being silenced by some tyrannical regime, but has rather been removed due to active harm that is being caused to others. Does it not make sense that if a message online is hypothetically teaching children how to make explosives that cause property damage, it would be removed and erased? This is simply correct not because it is censoring a message of being able to defend yourself, but because it is hurting landowners and the kids it influences. There is always a line, and though the edges near that line can be blurry, someone has to be able to apply moral judgement to the outcome of messages as to prevent easily preventable actions.\nIn conclusion, freedom of speech is a wonderful right that should apply to us all, including allowing the use of any kind of speech. This being said, hate speech can and will be removed from certain platforms if it is actively causing harm, an image the platforms would not like to convey, and people are welcome to find other ways to express their opinions. People disagreeing with an opinion is clearly not a violation of your freedom of speech, as encouraged discourse is the whole idea behind the concept, and people of all ages should be free to form their own opinions with all information available to them."},"notes/School-Subjects/English-Language/Year-11/Transition-Period/Interesting-English-Language-Articles":{"title":"Interesting English Language Articles","links":["tags/englang","tags/research"],"tags":["englang","research"],"content":"#englang#research\n\n\nThe Scots Language\nThis is a really interesting article I found through this video by xidnaf, and it talked about when a language actually becomes a different language. The line seems to be really blurry surprisingly.\nThe video mentions that linguists actually split languages by mutual intelligibility, so if people can understand each other even though some words are different or dialects/accents are different, the language is the same.\nThis still has its own problems though, because for example the Chinese ‚Äúlanguages‚Äù are referred to as dialects even though they can‚Äôt exactly understand each other, but they still use the same writing system, so you‚Äôre in the weird position of they speak different languages, but they write in the same one ¬Ø\\_(„ÉÑ)_/¬Ø\nDialect Continuums are also a thing which is cool, overall there‚Äôs just quite a big range. Australian people might struggle to understand British people, not a different language, but could still maybe understand a few loan words in Arabic or such, and the range varies such as English with German etc.\nIt‚Äôs also not symmetrical e.g. people from Denmark can understand people from Sweden a lot better than vice versa.\nAll in all, what even is a different language is basically up to what we call it, and in the end it‚Äôs basically all politics funnily enough.\nAnd now we get the Scots Language! It split from Old English similar to modern English, which was spoken about 1000 years ago in Britain. This is completely seperate to Scottish mind you, but is rather a remnant of what Old English was like.\nHere‚Äôs a demonstration of the Scot‚Äôs Language which can be found here and helped demonstrate the concept of mutual intelligibility, which is quite common in other places but not so much for native English speakers\nhttps://www.atlasobscura.com/articles/scots-language\n\n\nWhy is the letter w so weird?\nLike isn‚Äôt it so odd that it‚Äôs like double u, but it‚Äôs not even shaped like that, like where did that come from??\nhttps://youtu.be/sg2j7mZ9-2Y\nhttps://www.rd.com/article/why-w-is-pronounced-double-u-and-not-double-v/\n\n"},"notes/School-Subjects/English-Language/Year-11/Transition-Period/The-Eloquent-Ape":{"title":"The Eloquent Ape","links":["tags/englang","tags/article"],"tags":["englang","article"],"content":"#englang#article\n\nLanguage is like code, encoded in certain patterns of actions like vocal noises, which are then decoded to decypher meaning by someone else.\nOur ability to communicate is founded on not only our larger brains and ability to control our facial muscles, but also our need for complex social behaviours such as the ability to negotiate, trade and bargain."},"notes/School-Subjects/English-Language/Year-11/What-is-a-Language/Features-of-Language":{"title":"Features of Language","links":["tags/englang","tags/notes","tags/card"],"tags":["englang","notes","card"],"content":"#englang#notes\nSpontaneity and Displacement ¬ß\nSpontaneity#card ¬ß\nHumans have the ability to initiate speech. Unlike animals that need a stimulus such a biscuit or a treat to be forced to speak, humans speak by themselves and start conversations themselves.\nDisplacement#card ¬ß\nHumans also have the ability to talk about things that are not in the present moment. This means that they can talk about something that happened lats week, or something that is happening somewhere else right now. This is similar to object perminance, having the ability to communicate beyond the here and now.\n\nArbitrariness#card ¬ß\nIn general, human language is quite arbitrary. There is nothing about language that neccessarily symbolises something. There is nothing about the sound ‚Äútree‚Äù that links to the thing outside which is brown and green; it is all random. Though there are exceptions, the most common of which being onomatopoeic words such as whoosh, slurp, pop and so on, most words in general are arbitrary.\n\nStructure and Creativity#card ¬ß\nHuman language is an open system that can be added to and combined and recombined in many ways to create new forms. Random units of sound which don‚Äôt have meaning in of themselves combine to form meaningful morphemes or words. Animals generally don‚Äôt have this ability, where one sound means one action, and cannot be split up into individual pieces to be reconstructed. Male grasshoppers have the ability to say one of 6 messgages; humans have the ability to talk about literally anything we want. We can even talk about things that don‚Äôt exist!\n\nCultural Transmission#card ¬ß\nHuman language depends on cultural transmission. It is not genetic and instinctual like a dog barking, who will bark the same wherever they go, but is rather learnt from the environment. A cantonese born child growing up in an English speaking house will speak English, it is not something defined inherantly but by the people around the child. Similarly, a bird isolated from any contact will still sing songs, but humans isolated from any society will not be able to speak any languages until they start learning from contact with people around them.\n"},"notes/School-Subjects/English-Language/Year-11/What-is-a-Language/Key-Terms":{"title":"Key Terms","links":["tags/englang","tags/card"],"tags":["englang","card"],"content":"#englang\nDialectal Variation#card ¬ß\nVariation associated with the language of a particular locality, region or geographical area.\n\nFlipping#card ¬ß\nTerm used to suggest rapid semantic change in a word from its original meaning to its opposite (or near opposite).\n\nOrthographical Variation#card ¬ß\nHow the use of symbols, letters and spellings varies among language users.\n\nPhonological Variation#card ¬ß\nHow the sounds of a language vary among different speakers (accent)\n\nSemantic Variation#card ¬ß\nHow word (and phrase) meanings vary from place to place and group to group\n\nSocial Variation#card ¬ß\nVariation associated with a particular social group i.e., social class or educational background.\n"},"notes/School-Subjects/English-Language/Year-11/What-is-a-Language/Variables-of-Communication":{"title":"Variables of Communication","links":["tags/englang","tags/notes","notes/School-Subjects/English-Language/English-Language","tags/card"],"tags":["englang","notes","card"],"content":"#englang#notes\nIn English Language Units 1 - 4 we will be using these variables to annotate texts:\nMode#card ¬ß\nThe medium of communication\n\nWritten\nSpoken\nSign\n\n\nRegister#card ¬ß\nFormality and respect level, the way a person speaks in respect to their audience\n\nIntimate: people you know really well, close\nCasual: the way we speak every day to one another, varies from more formal to less in of itself\nConsultative: where there is an uneven power relationship, i.e. doctor patient, student teacher\nFormal: one way, so a speech or letter. maybe meeting the queen lol\nFrozen: things that don‚Äôt change, such a marriage ceremony, beginning of a sermon, starting of a high court, welcome to country\n\n\nContext#card ¬ß\nEstablished background/circumstance, situation surrounding text\n\nSituational\nCultural\nHistorical\n\n\nAudience#card ¬ß\nThe demographic that your are speaking to\n\nFunction#card ¬ß\nPurpose of communication, what we are hoping to gain\n\nWhat is the text set out to do\nSocial purpose, e.g. building rapport, encouraging group membership\n\n\nField#card ¬ß\nHow specialised the communication is, area of interest + subject area\n\nSetting#card ¬ß\nWhere the communication is taking place\n\n# MR CAFS"},"notes/School-Subjects/English-Language/Year-11/What-is-a-Language/What-is-a-Language-q":{"title":"What is a Language?","links":["tags/englang","tags/research"],"tags":["englang","research"],"content":"#englang#research\nDefinition 1 ¬ß\nSource: Language Meaning &amp; Concept | What is Language? - Video &amp; Lesson Transcript | Study.com ¬ß\nDefinition: ¬ß\nEssentially, language is a term for any complex communication system used by humans that consists of words and phrases that, when combined, can create infinite variable utterances. How humans initially developed language is not wholly clear and is something that linguists are still researching. Most humans learn at least one language in early childhood. If a person lacks exposure to language as a young child, they will never be able to fluently learn a language as an adult because of how human brain development works.\n\nDefinition 2 ¬ß\nSource: What is Language | IGI Global ¬ß\nDefinition: ¬ß\nSystem for the expression of thoughts, feelings, etc., by the use of spoken sounds or convention symbols.\n\nDefinition 3 ¬ß\nSource: what is language? : linguistics ¬ß\nDefinition: ¬ß\nA language is defined as a being an open system of communication. In other words, new symbols can be freely added to the system. For example, if I say that I define ‚Äúvlirsnik‚Äù to mean ‚Äúthe feeling of learning something new‚Äù I can add it to this system of communication we are using right now and you will be able to understand it. Therefore, this is a language.\n\nWhat is common to your three definitions? ¬ß\nAll three of the definitions mention that languages are a communication system, that try to express thoughts, ideas and feelings. They also mention that they have a common set of conventions that allow for a practically infinite set of meanings to be added.\n\nIn your own words explain the word ‚Äúlanguage‚Äù ¬ß\nA language is a set of communication standards that aim to convey meaning in the form of ideas, concepts, thoughts and feelings. This is done in a way that ideas can be added to these said conventions to be able to convey new concepts that were previously not expressible, therefore being modular in its usage."},"notes/School-Subjects/English-Language/Year-12/Head-Start/Language-Breakdown":{"title":"Language Breakdown","links":[],"tags":[],"content":"Informal Language ¬ß\n\naaaaaaaaagh the show tonight shall rock some serious jam\nYou can tell a rich woman btw she walk\nJeff says ‚Äúlyk omgod omgod omgodzzzzzZZZzzzzz!!!11one‚Äù\nheheh okieee! must finish it now ill ttyl\nlol. . as u can tell im very bitter right now.\n\nAdapted From\nBecause Internet\nMcCulloch, Gretchen\nInteresting things:\n\nThe weird use of btw, see here\n‚ÄúThe most obvious thing in these sentences, from the perspective of formal written English, is the informal parts: expressive lengthening like ‚Äúaaaaaaaaagh,‚Äù expressive punctuation like ‚Äú!!!11one,‚Äù and abbreviations like ‚Äúttyl‚Äù and ‚Äúlol.‚Äù But Tagliamonte and Denis point out that these sentences are also odd from the perspective of informal spoken English: if you record teens sitting around talking to each other out loud, at any point in the early twenty-first century, they barely ever speak words like ‚Äúshall,‚Äù ‚Äúsays,‚Äù ‚Äúmust,‚Äù or ‚Äúvery‚Äù‚Äîthey prefer the newer versions ‚Äúgoing to,‚Äù ‚Äúis like,‚Äù ‚Äúhave to,‚Äù and ‚Äúso.‚Äù (Picture the difference between saying, ‚ÄúAnd then he said, ‚ÄòShall you go?‚Äô And I said, ‚ÄòI must, I‚Äôm very tired,‚Äô‚Äù versus ‚ÄúAnd then he‚Äôs like, ‚ÄòAre you gonna go?‚Äô And I‚Äôm like, ‚ÄòI have to, I‚Äôm so tired.‚Äô‚Äù The first belongs in writing, or in the speech of a previous generation, but the second is very much of our own.)‚Äù\n\nFormal Language ¬ß\n\nThe Curious Grammar of Police Shootings. When Police Shoot Civilians, the Passive Voice Is Used. : r/linguistics\n"},"notes/School-Subjects/Literature/Literature":{"title":"Literature","links":["tags/lit","tags/subject","notes/School-Subjects/Literature/The-Penelopiad/A-Thousand-Ships-Extract","notes/School-Subjects/Literature/The-Penelopiad/Calliope-and-the-Painting","notes/School-Subjects/Literature/The-Penelopiad/Chapters/Chapter-1","notes/School-Subjects/Literature/The-Penelopiad/Atwood","notes/School-Subjects/Literature/The-Penelopiad/Culture-&-Society--The-Penelopiad","notes/School-Subjects/Literature/The-Penelopiad/Chapters/Chapter-6","notes/School-Subjects/Literature/The-Penelopiad/Cold-Eyed-Teenaged-Killer","notes/School-Subjects/Literature/The-Penelopiad/The-Obstacle-To-Go-Through","notes/School-Subjects/Literature/The-Penelopiad/The-Birth-of-Telemachus-Close-Analysis","notes/School-Subjects/Literature/The-Penelopiad/Relationships","notes/School-Subjects/Literature/The-Penelopiad/Penelope-as-a-Narrator","notes/School-Subjects/Literature/The-Penelopiad/News-Of-Helen","notes/School-Subjects/Literature/The-Penelopiad/Chapters/Chapter-24","notes/School-Subjects/Literature/The-Penelopiad/Truth-and-Storytelling","notes/School-Subjects/Literature/The-Penelopiad/What-is-The-Penelopiad-About-q","notes/School-Subjects/Literature/The-Penelopiad/In-Death-I-Know-Everything","notes/School-Subjects/Literature/The-Penelopiad/Oral-Presentation-Script"],"tags":["lit","subject"],"content":"#lit#subject\nUnit 1 ¬ß\nAoS 1: The Penelopiad ¬ß\n\nRead an extract from A Thousand Ships and annotate, and then compare and contrast it with a painting\nRead Chapter 1 of The Penelopiad and write about how Atwood comments on Culture and Society\nWrite a short 200 word essay on a quote from Chapter 6\nWrite about the maids‚Äô cold eyed teenaged killer, Telemachus\nWrite a creative piece on Chapter 6\nDo a close passage analysis on the birth of Telemachus\nComment on relationships in Chapter 12\nComment on Penelope as a narrator in Chapter 15\nExplore the significance of a passage from Chapter 18, News of Helen\nExplore Chapter 24 and what it says about the eyes of the beholder\nWhat is the significance of Truth and Storytelling in the novel.\nWhat is The Penelopiad even about?\nAnalyse the quote, ‚ÄúNow that I am dead I know everything.‚Äù\nCreate an Oral Presentation on any extract of ur choosing in the Penelopiad\n"},"notes/School-Subjects/Literature/The-Invisible/Question-Documents/44-to-1h12-Minutes":{"title":"44 to 1h12 Minutes","links":["tags/lit","tags/questions","tags/flashwrite"],"tags":["lit","questions","flashwrite"],"content":"#lit#questions#flashwrite\n\n\nWhat lie does Tor tell the police officer?\nShe tells the police officer that she hasn‚Äôt met El at all.\n\n\nHow does the detective try to blackmail Tor into giving him information about her brother?\nHe says that if she doesn‚Äôt tell him the truth, they will remove her mother‚Äôs status of ease.\n\n\nWhat new command does Tor give Rose if she is in danger? Why does she do this?\nShe tells Rose to delete all information about her and all memories, because she does not want to be tracked or found.\n\n\nTrue or false: even if Rose deletes all memories of Tor, she will still remember the shapes and patterns that Tor has taught her.\nTrue\n\n\nWhat is Cal concerned about? What does he want Tor to do?\nHe is concerned that Tor is throwing away everything that she has earned and her whole life for her brother who she hasn‚Äôt seen in so long. He wants Tor to just forget about it.\n\n\n‚ÄúIt‚Äôs never going to be for old people, is it? It was always going to be a two-way mirror. We see what we want to see; they see everything.‚Äù Explain what Cal means by this.\nHe says that Tor knows what she is creating, and she is safe creating something that helps her company spy on people, that Rose is meant for surveillance not ‚Äúhelping old people‚Äù. He means that we can make our truth whatever we want, and in return they can see everything.\n\n\nWhat is it that Rose cannot process?\nThe unspoken. The information that is not said or expressed but is in between people. Moments that are shared through silence.\n\n\nWho is Leith?\nEl‚Äôs son.\n\n\nWhy did El leave?\nTo go and marry a woman that he loved who did not have status of ease.\n\n\n‚ÄúI can make patterns of the world, recognise, splice, relearn behaviour, but there is something between them which I cannot see. I cannot make sense of the invisible. The things they don‚Äôt say or do.‚Äù (Rose) Why does Rose find it impossible to make sense of the invisible?\nBecause she cannot sense it, there is no data for her to go off. She is not human, no matter how much they try, because she cannot see what they do not do, only what they do. We have something between us, the moments of silence and the shared understanding that Rose will never have.\n\n"},"notes/School-Subjects/Literature/The-Invisible/Question-Documents/7-to-29-Minutes":{"title":"7 to 29 Minutes","links":["tags/theinvisible","tags/questions","tags/lit"],"tags":["theinvisible","questions","lit"],"content":"#theinvisible#questions#lit\n1)¬†¬†¬† What are the people protesting about outside Parliament?\nPeople are protesting about the use of using digital tracking and identification to deter illegal movements in the city for people that are displaces by global flooding and climate change, taking away all the privacy of people to keep them under control.\n2)¬†¬†¬† Who does Tor see on the television news? How long has it been since she has seen him?\nTor sees her brother on the news, and it‚Äôs been 17 years since she‚Äôs seen him.\n3)¬†¬†¬† What consequences is Cal concerned about if Tor goes out to find him?\nCal is concerned that Tor will get caught on surveillance and be mistaken as a defacer, and that their status of ease won‚Äôt mean anything if she goes outside to look for him.\n4)¬†¬†¬† What does the man at Westminster mean when he tells Tor, ‚Äúyou‚Äôre talking to the invisible‚Äù? What is implied about the setting by this?\nIt is implied that he was never here, but also that she is talking to someone who was never registered and that cannot be seen by any digital systems. This ‚Äúinvisible‚Äù person will never be tracked, so it is the same as Tor never having talked to anyone.\n5)¬†¬†¬† Why is Tor‚Äôs mum reluctant to use her Rose?\nShe doesn‚Äôt like the use of technology everywhere, because she feels like she will wend up becoming too dependant on it and she wants to be able to do things herself.\n6)¬†¬†¬† What does Rose find so difficult to interpret about the conversation between Tor and her mother?\nThe emotions and expressions that she was not programmed to register. She find it really hard to understand how they are feeling or what they are thinking about each other, because their feelings do not fall into the cookie cutter definitions of what people normally feel. She sats she can‚Äôt understand the blank expression and the things that are left unsaid.\n7)¬†¬†¬† Rose says, ‚ÄúAnd I wonder what it is like to stand and look at the sky. I can make a sky, but I cannot look at it. I can conjure a sea but I cannot experience its coldness.‚Äù What does she appear to be yearning for here?\nShe appears to be yearning for feeling and touch, similar to how humans feel it. She appears to be yearning for being human.\n8)¬†¬†¬† What does Tor suspect has been hidden from the people of London?\nTor suspects that photos and information and the old plans of the city have been hidden from everyone.\n9)¬†¬†¬† What is unusual about the library in Charing Cross Road? Why does Cal fear it will be dangerous?\nBecause it is not registered anywhere and is run by people off the books, otherwise known as defacers.\n\n\nWhy is Rose unable to see inside the ‚Äúmind‚Äù of the library?\nBecause none of it is digital. She cannot index what is not digital so it is all isolated from her.\n\n\nWhat does Tor discover about the Circle Line by consulting the A ‚Äì Z?\nThat it is in fact not a circle, it is not just a circuit but there is a leg that travels outwards. This leg has been hidden and removed from all the maps everywhere.\n\n\nWhat is outside the borders of London?\nLadbroke Grove, and the rest of the leg. London was most likely isolated as an island after some great floods that isolated it from the rest of the country, and people no longer travel inside and outside the place.\n\n\nHow might Tor be able to get there?\nApparently there is a ‚Äúghost train‚Äù that travels sometime at night and takes people out of the central area outside of London, This is how she plans to get there.\n\n\n‚ÄúThis is a library. You can open a book and read something, close it, forget it, but it‚Äôs still there. It exists, even if we don‚Äôt think about it.‚Äù Discuss the significance of this statement.\nThis links back to the title of the show. It is all invisible, but the information is still there even if you forget it. Information is always there when it is in its hard copy, but when it becomes digital it can all go away, even when people do not think about it. There is a lot behind the eyes of what we don‚Äôt actively think about, a lot that is hidden.\n\n"},"notes/School-Subjects/Literature/The-Invisible/Question-Documents/Eight-Minute-Questions":{"title":"Eight Minute Questions","links":["tags/theinvisible","tags/questions","tags/lit"],"tags":["theinvisible","questions","lit"],"content":"#theinvisible#questions#lit\n\n\n‚ÄúShe continually expands in ways of thinking.‚Äù ‚ÄúI taught her to ask questions.‚Äù (Tor on Rose). How does the playwright Linda Marshall Griffiths want the audience to understand Rose?\nPossibly Griffiths is positioning the audience to treat Rose like a learning child, like a project that was created to understand as much as possible and have a curiosity not much unlike that of a human. As such we are positioned to have sympathy towards Rose and treat her as more than just a machine.\n\n\nList the clues about setting in the first seven to eight minutes of the play. Make an inference from these clues. What does Linda Marshall Griffiths want the audience to understand about the world in which this play takes place?\nI think one of the clues is how Wren talks about how he enjoys fear to Rose. This is slightly unnerving, as an AI trying to grapple with human emotions may not fully understand the implications of that statement, because a lot of the time even humans don‚Äôt interpret that correctly. I think this could possibly foreshadow that something more sinister is to come with Rose.\n\n\nWhat question does Tor ask Rose? What is Rose‚Äôs response? What does Tor ask Rose to do regarding this?\nhmmm\n\n"},"notes/School-Subjects/Literature/The-Invisible/Question-Documents/Silent-Solo--Three-Statements":{"title":"Silent Solo- Three Statements","links":["tags/lit","tags/flashwrite"],"tags":["lit","flashwrite"],"content":"#lit#flashwrite\n\nTor lives in a bubble because of her status of ease, because she hasn‚Äôt been exposed to the rest of the world. She very happy living in her own bubble, because even though she might see glimpses of the outside world not being as well off as them, she‚Äôs very okay to continue living the way that she does.\nTor lives in a bubble and her brother El doesn‚Äôt like this about her.\nTor lives in a bubble, so she cannot see further than her own life. She is content with the position she is in and is unaware of the situation around her.\n"},"notes/School-Subjects/Literature/The-Invisible/Surveillance":{"title":"Surveillance","links":["tags/lit","tags/flashwrite","tags/theinvisible"],"tags":["lit","flashwrite","theinvisible"],"content":"#lit#flashwrite#theinvisible\n\n\n                  \n                  Info \n                  \n                \nUsing the passage as a focus, discuss the ways in which the concept of surveillance is endorsed, challenged or marginalised.\n\nThe concept of surveillance is"},"notes/School-Subjects/Literature/The-Invisible/Theme-Essay":{"title":"Theme Essay","links":[],"tags":[],"content":"\n\n                  \n                  Info \n                  \n                \n‚ÄúThe Invisible‚Äù represents how often, the government in pursuit of security ends up being corrupted by power, but cannot fully control the unseen resilience that will always amount in resistance of censorship.\n"},"notes/School-Subjects/Literature/The-Invisible/World-&-Setting":{"title":"World & Setting","links":["tags/theinvisible","tags/flashwrite"],"tags":["theinvisible","flashwrite"],"content":"#theinvisible#flashwrite\n\n\n                  \n                  Info \n                  \n                \nWhat have you learned so far about the setting and the world of this play? What questions do you have?\n\nThe world of the play is quite dystopian, and there‚Äôs a significant amount of control of information. It is set far in the future, around 2090 or later, and all information is stored digitally. People who refuse to go digital and barred from society, and they are known as defacers.\nFor Tor and her family, there is nothing outside of London. They have an island, the inner circle, and there is nothing outside for them. There is also a significant lack of resources and food, in fact her family takes it as a treat when they are given the opportunity to eat an apple. As such, they may be extremely advanced in technology but lack many other things, like freedom of information, food and overall their life feels quite mundane. Information is also very easily lost, because it is all controlled by a central body who can remove or add whatever information they like whenever they want."},"notes/School-Subjects/Literature/The-Penelopiad/A-Thousand-Ships-Extract":{"title":"A Thousand Ships Extract","links":["tags/lit","tags/flashwrite"],"tags":["lit","flashwrite"],"content":"#lit#flashwrite\n\nComment on the author‚Äôs use of tone and voice of the character Calliope in this extract.\n\nThe author makes Calliope‚Äôs voice quite direct, using a lot of short clauses which comment on her own emotions and the state of the world around her. This observational tone combined with propositions such as, ‚ÄúPerhaps he hasn‚Äôt thought of what it is like to be me,‚Äù allow the extract to form a clear image of how Calliope feels in the situation she describes: she is not understood and she is alone in her suffering. She questions her reality a lot, the need for it and the purpose behind it. Rhetorical questions such as, ‚ÄúCan he really believe he has something new to say?‚Äù or ‚ÄúHow much epic poetry does the world really need?‚Äù all play into this narrative of it all being unnecessary, that none of it is required and is all built up on a greed for more fame and wealth and money, forgetting the true purpose behind any of in the first place.\nThe author also uses anaphora as a staple in Calliope‚Äôs voice, utilising the repetition to highlight the monotony and ‚Äúforeverness‚Äù of this situation. It is all a cycle, as evident by the end of the extract, and the character of Calliope embodies this, having experienced everything already. ‚ÄúEvery conflict joined, every war fought very city besieged, every town sacked, every village destroyed.‚Äù"},"notes/School-Subjects/Literature/The-Penelopiad/Atwood":{"title":"Atwood","links":["tags/lit","tags/thepenelopiad","tags/author","notes/School-Subjects/Literature/The-Penelopiad/Odyssey","notes/School-Subjects/Literature/The-Penelopiad/Penelope"],"tags":["lit","thepenelopiad","author"],"content":"#lit#thepenelopiad#author\nMargeret Atwood is a Canadian writer and poet best known for her prose from a feminist perspective. She is the author of The Penelopiad, a retelling of Homer‚Äôs Odyssey from Penelope‚Äôs perspective."},"notes/School-Subjects/Literature/The-Penelopiad/Calliope-and-the-Painting":{"title":"Calliope and the Painting","links":["tags/lit","tags/flashwrite"],"tags":["lit","flashwrite"],"content":"#lit#flashwrite\nBoth the painting and Calliope both look very tired, like this has been going on for so long and they just want it to end. They are both also the subjects of painting, likely having to have sat as a model for so long, such a dull repetitive process that has completely drained them. They both are conventionally beautiful, dressed with riches and money, but there is a hollowness in their eyes, because none of it really means anything. Overall, she just seems tired and broken, because there is more to life than just the wealth and money that they are chasing, posing as an obedient wife character that will follow whatever the male lead says. The sense of dread permeates both the pieces, because they both would rather not be there."},"notes/School-Subjects/Literature/The-Penelopiad/Chapters/Chapter-1":{"title":"Chapter 1","links":["tags/lit","tags/chapter","tags/thepenelopiad","notes/School-Subjects/Literature/The-Penelopiad/Penelope"],"tags":["lit","chapter","thepenelopiad"],"content":"#lit#chapter#thepenelopiad\n\nWhose point of view is this told from and what is their motivation in telling this story?\n\nThe introductory chapter is told from the point of view of Penelope, someone who has been neglected their whole life and now, only in death, has the will and ability to try and tell her story. She has been lost in the shadows for all her life, so she wants to be able to portray her side of the story, and get it all out there because she never could while she was alive.\nShe had to suffer so much just because of her husband, and she doesn‚Äôt want others to go down the same path of suffering needlessly. She wants to be known as more than just a faithful wife, but her own person. The weaponisation of Penelope‚Äôs character not only makes them suffer more, but further excuses the behaviour of the men.\n\nComment on the tone used here and give an example\n\nThe tone of the chapter is very sombre, and and reminiscent. She feels sad that her life never amounted to too much, but she is determined now to tell her story when she can. She says now that no one cares, that it didn‚Äôt matter at all, but she‚Äôs waited for so long that she can finally find a little bit of motivation because there is nothing left to lose.\nShe is also almost slightly resentful towards Odysseus. She talks about his characters and how she was played the fool, holding a bit of a grudge but condemning herself for not acting on it sooner. ‚ÄúI turned a blind eye, I kept my mouth shut or if I opened it, I sang his praises‚Äù. This rescinded tone, where she sounds so defeated and tired doesn‚Äôt see herself as anyone perfect but is rather very self critical. She talks about her blissful ignorance, but in death she realises that she was dragged through the mud, and now she wants to set the record straight.\n\nWhat is meant by ‚ÄúA stick used to beat other women with‚Äù?\n\nPeople weaponise Penelope‚Äôs faithfulness and use that as a measuring bar to compare other women with. So Penelope‚Äôs faithfulness, rather than being celebrates, is used to degrade other women and further pushes the status quo that women are defined by their husbands. Keeping that loyalty was actually something that hurt her, and she doesn‚Äôt want others to follow her example because it just makes the lives of others worse."},"notes/School-Subjects/Literature/The-Penelopiad/Chapters/Chapter-24":{"title":"Chapter 24","links":[],"tags":[],"content":"\n\n                  \n                  Info \n                  \n                \nWhat does this chapter suggest about perception and the way it changes based on the subject and the beholder?\n\nThis chapter shows us the maid‚Äôs perception of their own story, told through a historical lens where they interpret themselves to be the three followers of Artemis, a god who is viewed favourably. They assign symbolism to themselves, similar to how the Odyssey and other tales do to deeply interpret their lives as metaphors for something greater. Atwood explores how the perception of a story changes from person to person and lens to lens. We look at the story for a modern view, linking it to what it tells us about our society as we know it, but for the maids, the world may have very well meant something very different. The observer, looking at themselves, sees a very different life from the audience who are watching the maids from their point of view."},"notes/School-Subjects/Literature/The-Penelopiad/Chapters/Chapter-6":{"title":"Chapter 6","links":["tags/lit","tags/thepenelopiad","tags/chapter"],"tags":["lit","thepenelopiad","chapter"],"content":"#lit#thepenelopiad#chapter\n\n\n                  \n                  Prompt \n                  \n                \n‚ÄúIf you can‚Äôt go through an obstacle, go around it.‚Äù What do you think Penelope‚Äôs mother might be implying here about Penelope‚Äôs marriage to Odysseus?¬† What does this suggest about the world of the text?\n\nPenelope‚Äôs mother might be implying that her marriage with Odysseus is an obstacle in and of itself. In the text, marriage is mandatory, not being a choice of the bride at all but rather something she has to live through for the rest of her life without her own approval. Penelope‚Äôs mother implies that life will always keep throwing obstacles at Penelope, one after the other, but she has to smarter than what she faces and find a way to get around it, to live through what comes her way using her ‚Äúone redeeming quality‚Äù, her brain.\nThe quote shows that the world that the text is set in is far from favourable to the women in it, expecting them all to be happy with what is given to them while demanding docility. Penelope‚Äôs mother is well versed in this world of hardships that cannot be expressed on her face, having to be dealt with behind a facade, so she advises her child to do the same: to use her smarts to outwit the challenge of marriage that comes her way, and to try and live happily despite the unideal scenario the world places her in against her own will."},"notes/School-Subjects/Literature/The-Penelopiad/Cold-Eyed-Teenaged-Killer":{"title":"Cold Eyed Teenaged Killer","links":["tags/lit","tags/flashwrite"],"tags":["lit","flashwrite"],"content":"#lit#flashwrite\n\n\n                  \n                  Question \n                  \n                \nHow and why does Atwood compare the maids and their ‚Äúcold eyed teenaged killer‚Äù, Telemachus? 200 words\n\nAtwood makes the comparison between Telemachus and the maids, highlighting parallels, stating that they were ‚Äúinfants when he was an infant, wailing just as he wailed, helpless as he was helpless, but ten times more helpless as well‚Äù. Quotes like this create a defined distinction between the maids and Telemachus, they are one in the same besides their status at birth, their power.\nThey are both human, they both have the same mortal flesh, they were both born in the same location at the same time, but one was given every power that they could wish for and the other ‚Äúfound‚Äù. Atwood makes this active comparison to make the audience think about what the maids did to deserve their fate, a fate they could never have controlled no matter how much they wished to.\nThe maids implore the reader to ‚ÄúAsk the Three Sisters, [‚Ä¶] Only they know how events might then have been altered‚Äù. This metaphor of the Three Fatal Sisters explores the idea that the ability to change one‚Äôs fate is inherently linked with power, and those who are the bottom of the hierarchy can‚Äôt change anything no matter how much they tried because nothing would change.\nThe maids and Telemachus are the same, but yet just due to their birth they are fated completely seperate lives."},"notes/School-Subjects/Literature/The-Penelopiad/Culture-&-Society--The-Penelopiad":{"title":"Culture & Society- The Penelopiad","links":["tags/lit","tags/flashwrite","tags/thepenelopiad","notes/School-Subjects/Literature/The-Penelopiad/Atwood","notes/School-Subjects/Literature/The-Penelopiad/Penelope","notes/School-Subjects/Literature/The-Penelopiad/Odyssey"],"tags":["lit","flashwrite","thepenelopiad"],"content":"#lit#flashwrite#thepenelopiad\n\nIn re-writing The Penelopiad, what assumptions and ideas about culture and society is Atwood seeking to question?\n\nAtwood aims to question the idea that there is one true tale for the events of a story. Never is there just one side, and all too often we take the side of power, because those who have power tell the tale. These ideas are taken as the truth, without question from anyone, but Atwood aims to question these tales taken as truth. Penelope is a side character, a footnote that is disregarded and praised, but simply a shadow because she has no meaning as a character by herself in the Odyssey. Atwood aims to give her character meaning again, build up someone who is more than just a shell of a faithful wife but has their own tale and their own story, as all real people do. Atwood is seeking to question the assumption that wives have to be so faithful, so ever loving, despite any actions of the husband, that a relationship is the wife‚Äôs job and her‚Äôs alone, an idea that is still deeply rooted in our society."},"notes/School-Subjects/Literature/The-Penelopiad/In-Death-I-Know-Everything":{"title":"In Death I Know Everything","links":["tags/lit","tags/thepenelopiad","tags/flashwrite"],"tags":["lit","thepenelopiad","flashwrite"],"content":"#lit#thepenelopiad#flashwrite\n\n\n                  \n                  Info \n                  \n                \n‚ÄúNow that I am dead I know everything.‚Äù (Penelope)¬†To what extent do you consider this to be true in Margaret Atwood‚Äôs The Penelopiad?\n\nPenelope says she knows everything in death, but throughout the novel, this is contradicted time and time again. Atwood writes about the theme of truth, ad how there is no single truth that can be confirmed but rather many stories from many different perspectives, a world of lies and deceit for anyone to make their own tale. There is no truth for Penelope to know, there simply isn‚Äôt anything that can be confirmed or known. She says it herself: ‚ÄùNow that I‚Äôm dead I know everything. This is what I wished would happen, but like so many of my wishes it failed to come true‚Äù. Atwood tells us that there is no truth, or even that the truth doesn‚Äôt matter, only stories and perspectives and people and their lives."},"notes/School-Subjects/Literature/The-Penelopiad/News-Of-Helen":{"title":"News Of Helen","links":["tags/flashwrite","tags/lit","tags/thepenelopiad","tags/chapter"],"tags":["flashwrite","lit","thepenelopiad","chapter"],"content":"#flashwrite#lit#thepenelopiad#chapter\n\n\n                  \n                  Section A Question 1 \n                  \n                \nExplore the significance of the passage in the text\n\nThis passage takes place in Chapter 18, News of Helen, as Telemachus successfully arrives back from his voyage, one he went on without consulting or asking Penelope. The extract further establishes the struggle for power in the world of the text, with an ‚Äúambush‚Äù always set out to dethrone those in power. Further, the extract furthers our understanding of entitlement and power.\nTelemachus mentions how ‚Äúhe didn‚Äôt need anyone‚Äôs permission to take a boat‚Äù, while the chapter previous told us of the maids dreaming about boats, to be able to escape. This entitlement, to be able to take whatever he wants furthers the audience‚Äôs understanding of the motif of boats and water that permeates the novel, representing a sense of agency and being able to enact your own will, having the power to make a change. The extract makes it evident that Telemachus has no sense of consequences, where he was saved ‚Äúmore by good luck than good planning‚Äù, showing how those with power born into high status can so often disregard the outcomes of their actions.\nThe passage is crucial to understanding Telemachus‚Äô views and inherent entitlement to power, and whenever the patriarchy is defied in any way, such as Penelope doing ‚Äúwhat was usually considered a man‚Äôs business‚Äù, he gets ‚Äúirritated by it‚Äù expressing that he needs to ‚Äú[get] out from under the thumbs of the women‚Äù.  Atwood uses this idea to further push and reinforce the idea that children are a product of society‚Äôs values and flaws, and there was no difference between the maids and Telemachus at birth, only the way that the world treated them. It also furthers our understanding of gender roles within the novel, where once again Penelope is stripped from her individual identity, being referred to as ‚Äúthe women‚Äù, where her gender defines her even to her own son."},"notes/School-Subjects/Literature/The-Penelopiad/Odyssey":{"title":"Odyssey","links":["tags/lit","tags/book","notes/School-Subjects/Literature/The-Penelopiad/Penelope"],"tags":["lit","book"],"content":"#lit#book\nThe Odyssey is a tale by Homer about the epic adventures of the Greek king Odysseus. The story revolves around him leaving his home to embark on epic journeys of places afar, leaving his wife Penelope for greater ventures. Penelope is cool"},"notes/School-Subjects/Literature/The-Penelopiad/Oral-Presentation-Script":{"title":"Oral Presentation Script","links":["tags/lit","tags/thepenelopiad","tags/speech"],"tags":["lit","thepenelopiad","speech"],"content":"#lit#thepenelopiad#speech\nOdysseus and Telemachus Snuff the Maids: a very interesting word to use here. Snuff, as defined by the Oxford Dictionary, is the action of extinguishing a candle or a flame, almost like the maids were stamped out, like a dying meaningless flicker of life, and it sets us up well for the power dynamic that is to come.\nHere we can see an excerpt the chapter, analysed through the lens of Storytelling, Truth and Voice. Atwood explores the different interpretations of truth in this passage, an exchange between Penelope and Eurycleia, ‚Äúwho could not disguise her gloating pleasure‚Äù at the killing of the maids and the suitors. Penelope uses harsh language to describe the scene, words such as ‚Äúhacked‚Äù, ‚Äúgenitals‚Äù and ‚Äúagonising screams‚Äù while describing Melanthius as a ‚Äúpoor man‚Äù that was thrown to the dogs. This builds a sympathetic view towards the suitors that otherwise were so hated throughout the novel. But why does Atwood want us to feel sympathetic towards these barbaric men?\nI believe this is where the underlying theme of a lack of voice and agency comes through, one which is heavily endorsed by this chapter, showing Penelope‚Äôs lack of agency leaving her in the shambles. ‚ÄúI bit my tongue. It‚Äôs a wonder I had any tongue left, so frequently had I bitten it over the years.‚Äù Atwood wants the audience to understand that within the novel, voice and agency is only given to those born with it: men of high status like Telemachus or Odysseus. Melanthius is at their whim, Penelope is at their command, and the maids die at their hands, whenever they choose. Odysseus is allowed to come in and impose himself upon everything in Penelope‚Äôs life, killing all the suitors and brutally torturing the maids, because he has decided that ‚Äúthey were notorious whores.‚Äù\nEven so, Penelope blames herself, stating that ‚ÄúI hadn‚Äôt told her of my scheme‚Äù and this lack of ability to express herself results in pain for others, showing that despite it being her choice not to talk, she is inherently limited by her lower status as a women within the novel. She so willingly hands her fortune over to the man in her life, not valuing her own agency or what she has built up, but rather only the validation of Odysseus, further shown by how dismissive she is of the maids death, because Odysseus can do whatever he likes! ‚ÄúWhat could I do? Lamentation wouldn‚Äôt bring my lovely girls back to life‚Äù. ‚ÄúDead is dead‚Äù. Yet she still values herself in relation to him, saying she‚Äôll have to mourn the girls in secret, ‚Äúor Odysseus will suspect me as well‚Äù. Evidently this chapter heavily endorses the lack of agency given to women and people of lower class at the time, Penelope left helpless.\nThe chapter also endorses and challenges the idea that those with power, those with voice, get to tell their story which then becomes the truth. The two different interpretations of the truth are very clear in this extract: Eurycleia believes in the ‚Äúimpertinent‚Äù girls, ‚Äúthe ones who‚Äôd been rude. The ones who used to thumb their noses at me‚Äù. Eurycleia very well believes this to be true, not told otherwise by a voiceless Penelope. So when Odysseus sees this ‚Äútruth‚Äù, or rather this story that Penelope has so cleverly manufactured, he takes it at face value and has the agency to do whatever he likes with it. So not only does Penelope have the power to turn her own stories into a reality, but a lot of the time counterintuitively, as her lack of voice still means she is powerless in other aspects. Overall, this idea that the wealthy can write their own story is challenged, because though Penelope has status, she is still in the shadow of the men in her life, but this idea that gender and birthright can allow you to decide what is true is heavily endorsed by Atwood throughout the extract.\nUltimately, Atwood presents this passage as a commentary on voice and storytelling, and how status and power influences agency throughout the wider novel. Many characters are directly compared and contrasted, making the Penelopiad a profound demonstration of relationships and power dynamics in the real world, not only seeping into every corner of the novel but also reflecting our biases, privilege and viewpoints in the world around us."},"notes/School-Subjects/Literature/The-Penelopiad/Penelope-as-a-Narrator":{"title":"Penelope as a Narrator","links":["tags/thepenelopiad","tags/lit","tags/flashwrite"],"tags":["thepenelopiad","lit","flashwrite"],"content":"#thepenelopiad#lit#flashwrite\n\n\n                  \n                  Info \n                  \n                \nIn what ways does Atwood make Penelope an¬†unreliable narrator in this chapter? Why do you think she chooses to present Penelope‚Äôs character in this way?¬† Use evidence from chapter 15, The Shroud, to support your point of view.\n\nThroughout Chapter 15, we get a glimpse as to why Penelope may not be the most reliable of narrators throughout the novel. In general, the recount of the events in the story are quite opinionated, clouded by a judgement from one side and experience, and as such there can never be one ‚Äútruth‚Äù because all experiences will be under some lens or the other.\nWe keenly get this idea when Penelope speaks of the maids, who are supposedly her children whom for she cares a lot. Despite this, she still allows for horrid things to happen to them such as being raped by the suitors, occurrences that she describes as almost inevitable with no remorse or sympathy. Further, she describes them as her ‚Äúeyes and ears around the castle‚Äù, pawns that she uses for her own individual purposes to their detriment. Nonetheless, the story is portrayed from the perspective of Penelope, meaning that all of these flaws of her character are obfuscated behind the lens of her narration."},"notes/School-Subjects/Literature/The-Penelopiad/Penelope":{"title":"Penelope","links":["tags/lit","tags/thepenelopiad","tags/character","notes/School-Subjects/Literature/The-Penelopiad/Odyssey"],"tags":["lit","thepenelopiad","character"],"content":"#lit#thepenelopiad#character\nPenelope is the main character of The Penelopiad, and presented as the wife of Odysseus in Homer‚Äôs story, The Odyssey. She is portrayed as the faithful wife, someone who will stay true despite anything their husband does, a beacon for all other women to aspire to be, but never her own character or person."},"notes/School-Subjects/Literature/The-Penelopiad/Relationships":{"title":"Relationships","links":["tags/flashwrite","tags/lit","tags/analysis"],"tags":["flashwrite","lit","analysis"],"content":"#flashwrite#lit#analysis\n\n\n                  \n                  Info \n                  \n                \nComment on the theme of relationships as reflected in chapter xii, Waiting\n\nRelationships in Chapter 12, Waiting, are viewed almost as transactional with defined purposes in a very cold and non-compassionate manner. Atwood uses the chapter to express the idea that women are so often left behind and discarded in relationships, with Odysseus just leaving with not much more than a word, causing everything to blur into one monotonous cycle. All she did was wait for news in of Odysseus, further pushing the idea that her only worth is in relation to him.\nThe chapter also explores the idea that men have no consequences for their actions, and that anything they do will be glorified and portrayed as a wonderful tale, whereas the women‚Äôs actions will never be credited to them, simply given to the man who did nothing. Atwood describes a Penelope who dreams of a day, ‚ÄúOdysseus returning and [her] - with womanly modesty - revealing to him how well [she] had done at what was usually considered a man‚Äôs business. On his behalf, of course‚Äù. It all had to be on his behalf, because within the text women have no voice at all or any individuality when removed for their male counterpart. Unlike Penelope, Odysseus could do anything, flirt with anyone, even Helen who ‚Äúhad bathed him and anointed him with her very own hands‚Äù and there were meant to be no consequences, because he can do whatever he pleases."},"notes/School-Subjects/Literature/The-Penelopiad/The-Birth-of-Telemachus-Close-Analysis":{"title":"The Birth of Telemachus Close Analysis","links":["tags/lit","tags/flashwrite","tags/analysis"],"tags":["lit","flashwrite","analysis"],"content":"#lit#flashwrite#analysis\n\n\n                  \n                  Info \n                  \n                \nComment on how the passage illustrates the theme of power and powerlessness\n\nThroughout the passage, Atwood uses the motif of water and ocean to represent the power dynamic of the world she has built. The ones who hold the power, Telemachus, Odysseus, the Gods, all use water as a medium to enact their will. Telemachus‚Äô birth was not just a birth, it was a ‚Äúnine-month voyage‚Äù to be celebrated, as was the great tale of Odysseus who travelled the many seas with great feats. At the same time, Atwood uses the metaphor of water to show how helpless those without power can be. The same power of the ocean just spat the maid out, ‚Äúbeached at the same time he was‚Äù. They were simply spat out, discarded and sub-human, with words such as spawned and appeared describing their inherent inhumanity.\nAtwood also uses a combination of anaphora and juxtaposition to directly compare Telemachus and the maids. ‚ÄùInfants when he was an infant, wailing just as he wailed,‚Äù a repetition of the same words to emphasise the point that they apply to directly both the maids and Telemachus. At the same time, the enjambment of lines such as ‚Äúwailing just‚Äù and ‚Äúas he wailed‚Äù makes the reading more uncomfortable, expressing the idea that though they are identical in almost every way, the wail of a prince is still not equal to the wail of a servant girl.\nAtwood uses this mechanism to comment on an important aspect of our modern society: all children are born the same and equal, but it is society‚Äôs ideals that create imbalance. The environment around Telemachus, not Telemachus himself, is what caused his wail to be any different from the others, and when he grows up being told he is entitled to a kingdom and the lives of those within it, he thus believes so, evident by Penelope‚Äôs description in Chapter 15, that ‚Äú[Telemachus] was starting to look at [her] in an odd way, holding [her] responsible for the fact that his inheritance was being literally gobbled up.‚Äù\nThe excessive use of pronouns in this passage also creates the effect of dehumanising everyone involved. The maids, as always are referred to as a collective, but Telemachus is also never referred to by name, rather as a mysterious ‚Äúhe‚Äù. This lack of definitive character portrays Telemachus as someone who is much more sinister than otherwise, an amalgamation and representation of the power imbalance in their world, causing him to be the antagonist in this poem. The repetitive use of short quick phrases and many verbs also gives the reader a sense that the maids are objects built for doing things with, further commenting on the humanity of this conglomeration of broken, unwanted children."},"notes/School-Subjects/Literature/The-Penelopiad/The-Obstacle-To-Go-Through":{"title":"The Obstacle To Go Through","links":["tags/lit","tags/thepenelopiad","tags/flashwrite"],"tags":["lit","thepenelopiad","flashwrite"],"content":"#lit#thepenelopiad#flashwrite\n\n\n                  \n                  Quote \n                  \n                \n‚ÄúIt‚Äôs hope, and hope only, that keeps us afloat.‚Äù (Chapter 7 The Chorus Line: If I Was a Princess, A Popular Tune)\n\nWater, crashing against the hull of our fate as we hurl further and further into the ocean‚Äôs waves. Eyes stare at us from the distance of the horizon and we pray to them to keep a sympathetic watch rather than an apathetic one if we do, as we all surely will eventually, go under.\nWater, we float in a boat on the sea, unsure of whether we are being pulled down or lifted up, whether this is the start of a new voyage with new opportunities, or the end of the only dreadful journey we simultaneously want to leave while being too scared to run from.\nWater, once it gave us life, drinking from the pool of life with the young joys of an innocent girl, rejuvenated by the same hands that would strange our throats and take that very air away from us just some years later. It was a temporary loan. We failed to realise that and the debt collector struck the door at dawn; we had nothing to give but our skin and our air, so the investment laid in futile, and we gave what we could.\nHope we kept even when the air left our bodies, but what substance does hope have? What food does hope give you when your stomach churns? Hope we kept, until that too was collected, drop after drop by the water we had acquired it from in the first place. It was a loan. We failed to realise that.\nHere lay what is left of our hope, what was meant to let us breath through the water that wrapped around our throats:\nThere was a girl once. Her name doesn‚Äôt matter all too much, but she was a girl for sure. How do I know you ask? Why, her smile of course! It was the way she walked, the way she talked, the way she greeted everyone with a shimmer in her eyes that made her warmth present. The faint colour along her cheeks, and the wonderful approving speech, oh how she loved whatever her eyes looked on, and her looks went everywhere! Oh how I wish I had the hope she did.\nThis nameless girl, the girl of hopes and dreams, she frolicked around the paddocks and fields, until one day she met a man. Now they frolicked together instead, a pair of inseparable nature, the hope gleaming from one to the other, until one day, he got down on one knee and asked the question every girl wants to here: ‚ÄúWill you be mine?‚Äù\nShe said yes, but like us all, she didn‚Äôt realise. It was a loan. He gave her hope, she gave him herself. ‚ÄúWill you be mine?‚Äù Surely she thought ‚ÄúOh, why yes of course!‚Äù rather than whats she should have thought: ‚ÄúWell of course I‚Äôll be yours! Until death do us part, I will be your property, with modesty, I‚Äôll do whatever you please, I‚Äôm properly yours‚Äù\nSo she was his, the same as all brides in any marriage, and when it all came to an end, he came to collect her hope as well"},"notes/School-Subjects/Literature/The-Penelopiad/Truth-and-Storytelling":{"title":"Truth and Storytelling","links":["tags/flashwrite","tags/thepenelopiad","tags/lit"],"tags":["flashwrite","thepenelopiad","lit"],"content":"#flashwrite#thepenelopiad#lit\n\n\n                  \n                  Truth vs Storytelling \n                  \n                \nWhat do you understand about truth and storytelling in the novel?\n\nThese chapters tell us some key information about how the world of the Penelopiad views the truth and myth. In the Anthropology Lecture, the maids deeply interpret their own lives as legend, a chapter that may initially be viewed as reaching for meaning, but as the maids address, is as valid as any other myth in Ancient Greek mythology. Men place such deep value on their lives, over interpreting the mundane and making that their own truth. Each Chorus Line chapter is a different rendition of this truth, told in a great variety of mediums from many different stories and perspectives, highlighting a key idea that Atwood tries to express: the truth is what we make it. In this chapter, the Maids are taking back the voice and agency that they never had in their lives, the ability to tell their own story and hence express their own truth."},"notes/School-Subjects/Literature/The-Penelopiad/What-is-The-Penelopiad-About-q":{"title":"What is The Penelopiad About?","links":["tags/lit","tags/essay","tags/thepenelopiad"],"tags":["lit","essay","thepenelopiad"],"content":"#lit#essay#thepenelopiad\n\n\n                  \n                  Info \n                  \n                \nWhat is The Penelopiad about?\n\nMyth is always ambiguous. In countless retellings and recounts, what is considered to be true or the relevance of a truth even mattering is warped and moulded, recontextualised to be timeless and universal. Such is demonstrated by Margaret Atwood‚Äôs 2005 novel The Penelopiad, which retells and appropriated Homer‚Äôs epic, The Odyssey from the perspective of Penelope, an otherwise overshadowed character. Atwood reshapes the narrative to reflect contemporary contexts and values, and tells a story that is pertinent to our society. The Penelopiad is a book about truth and power, and how those who have the voice and power are the ones that decide what is true, holding the lives of other in the palm of their hand.\nOne of the main themes of the book is truth: who the story is told by. Penelope states that ‚Äúmany people have believed that [Odysseus‚Äôs] version of events was the true one‚Äù, so to set the record straight ‚Äú[she‚Äôll] spin a thread of [her] own‚Äù. Atwood brings up the idea, time and time again, that people with power (in most cases men) are the ones who have the ability to dictate what is true and what is not. Odysseus made up any fictitious remark about himself, deeply interpreting his own life, yet his account was taken as meaningful due to his reputation and position. This theme permeates the novel from the beginning to end, Penelope never getting a chance to tell her story while she was alive, and the maids still voiceless in death, all of which are structured in a power hierarchy that ruthlessly rips agency away from those born less notable.\nOn the counter-side to this, the novel is filled with deceit and lies. The same quote from above sees Penelope mention how ‚Äú[Odysseus] was always so plausible ‚Ä¶ even I believed him from time to time‚Äù. Atwood wonders how Odysseus, actively known for his trickery and lies, still holds academic merit. She is haunted by these lies, where anyone with power can spin up their own tale and retell other people‚Äôs truth, enacting it into reality. From the moment they meet, Penelope comments that ‚Äúthe way Odysseus told the story made me suspect there was more to it‚Äù, and this follows for the rest of her marriage, where she states ‚Äúthe two of us were‚Ä¶proficient and shameless liars of long standing. It was a wonder either of us believed a word the other said. But we did. Or so we told each other‚Äù.\nOverall, Atwood tells a story of how power is truth, more these days than ever. By recontextualising a novel told from the male perspective about glorified events embedded in myth, Atwood is able to use The Penelopiad as a means of touching on important societal issues such as sexism, wealth inequality and power imbalance, all through a unique but subtle novel that leaves the reader wondering one question: what was actually true?"},"notes/School-Subjects/Maths-Methods/Exam-1":{"title":"Exam 1","links":[],"tags":[],"content":"Suppose that the queuing time, T (in minutes), at a customer service desk has a probability given by\nf(t)={641‚Äãt(16‚àít2)0‚Äã0‚â§t‚â§4elsewhere‚Äã\nWhat is the probability that a person has to queue for more than two minutes, given that they have already queued for one minute?"},"notes/School-Subjects/Maths-Methods/Methods-Mega-Quiz":{"title":"Methods Mega Quiz","links":[],"tags":[],"content":"Tech Free ¬ß\nCalculus ¬ß\nQuestion 1 (2016 MAV Trial Exam 1, Q1b) ¬ß\na) Factorise x3‚àí3x2+3x‚àí1.\nb) Hence, anti-differentiate (1‚àíx)(x3‚àí3x2+3x‚àí1)1‚Äã.\nQuestion 2 (2016 MAV Trial Exam 1, Q5) ¬ß\nLet f(x)=xe2x.\na) Find f‚Ä≤(x).\nb) Hence, find the average value of f over the interval [0,21‚Äã].\nFunctions &amp; Graphs ¬ß\nQuestion 1 (2016 MAV Trial Exam 1, Q3) ¬ß\nConsider the function g:[0,2]‚ÜíR,g(x)=2x5‚àí10x4+20x3‚àí20x2+10x+2.\na) Find A,B and C given g(x)=A(x+B)5+C, where A,B and C are real constants.\nb) Sketch the graph of g on the set of axes below. Label the endpoints and any stationary points with their coordinates.\nAlgebra ¬ß\nQuestion 1 (2016 MAV Trial Exam 1, Q4) ¬ß\na) Show that x=loge‚Äã(3) is a solution of the equation e2x9‚Äã‚àíex6‚Äã+2ex=5.\nb) Hence, or otherwise, solve the equation e2x9‚Äã‚àíex6‚Äã+2ex=5 for x, given that there are only two real solutions.\nQuestion 2 (2016 MAV Trial Exam 1, Q6) ¬ß\nFind the values of A and B, where A and B are real constants, if the graph of y=Aloge‚Äã(x‚àíB) passes through the points (2,10) and (8,20).\nTech Active ¬ß\nProbability ¬ß\nQuestion 1 ¬ß\nThe time (in minutes) it takes Jerry to cycle to school is given by the random variable T with the pdf:\nf(t)={241‚Äã(t‚àí6)481‚Äã(K‚àít)‚Äã6‚â§t‚â§1010‚â§t‚â§K‚Äã\na) Find K. Hence state the minimum and maximum times it could take Jerry to cycle to school.\nb) Sketch the pdf on the set of axes below.\nc) Find the median time it takes Jerry to cycle to school.\nd) Find the expected time it takes Jerry to cycle to school.\ne) Find, correct to three decimal places, the probability that Jerry takes longer than 10 minutes at least twice in a 5-day school week."},"notes/School-Subjects/Physics/Electricity/Applications-of-Electric-Circuits":{"title":"Applications of Electric Circuits","links":["tags/physics","tags/electricity","notes/School-Subjects/Physics/Electricity/Internal-Resistance"],"tags":["physics","electricity"],"content":"#physics#electricity\n\n\n                  \n                  How can we model the nehaviour of real electrical components, such as light bulbs? \n                  \n                \nLight bubls produce light by passing a current through the filament, causing it to heat up and glow. Resistance is dependant on temperature, so when the filament heats up, its resistance increases.\n\nThis produces the following I-V graph of an incandescent bulb.\n---\ntitle: Current &amp; Potential Difference in Light Bulb\nxLabel: V (V)\nyLabel: I (A)\nbounds: [0,10,0,4]\ndisableZoom: false\ngrid: true\n---\nf(x)=sqrt(x)\nInternal Resistance ¬ß\nHow to determine voltage provided to the load resistor, RL‚Äã:\nVL‚Äã=Ri‚Äã+RL‚ÄãRL‚Äã‚Äã√óVin‚Äã\nDiodes ¬ß\n![Diode Diagram.png](Diode Diagram.png)\nA diode only allows the current to go through in one direction, which is the direction of the arrow. In the other direction, it blocks that.\nMost diodes ‚Äúswitch on‚Äù at about 0.7V. Refer to the graph below.\n![Knee Voltage.png](Knee Voltage.png)"},"notes/School-Subjects/Physics/Electricity/Fundamentals-of-Electricity":{"title":"Fundamentals of Electricity","links":["tags/physics","tags/electricity"],"tags":["physics","electricity"],"content":"#physics#electricity\n\nParticles with ‚Äúcharge‚Äù\n\nSubatomic e‚àí,p+\n\n\nCoulomb - 6.24√ó1018 e‚àí or p+\n\n‚à¥ charge on 1e‚àí or p+\n6.24√ó10181‚Äã=1.603√ó10‚àí19C\n\n\n\nm=mass¬†in¬†kg\nq=charge¬†in¬†Coulomb¬†(C)\nI=current¬†in¬†Amps¬†SC‚Äã or Q/T\ncoulombs per second\nVoltage =CJ‚Äã (joules per coulomb)\nVoltage is Potential Difference, essentially the difference between two points\nP=IV, Power = Current √ó Voltage\nV=IR, Voltage = Current √ó Resistance\nR=IV‚Äã Resistance is in the unit \\ohm (ohm)\n*\\ohm=s3A2m2kg‚Äã in S.I units, s = seconds, A = area\nResistance limits and controls I in a circuit\n\nThe electrical potential energy of the charge carriers is turned into thermal energy\nA resister is a load, so any load can be modelled by a resistor\n\nBy conventional direction: red wire is first, by electron direction, black is first"},"notes/School-Subjects/Physics/Electricity/Internal-Resistance":{"title":"Internal Resistance","links":["tags/physics","tags/electricity","notes/School-Subjects/Physics/Electricity/Applications-of-Electric-Circuits"],"tags":["physics","electricity"],"content":"#physics#electricity\nInternal Resistance refers to the resistance of a component itself. For example, a battery at 20¬∫ may have an internal resistance of 20\\ohm but at 30¬∫ may have an internal resistance of 30\\ohm. This is modelled by both a battery and resistor in the diagram.\nThis links into the Applications of Electric Circuits, since the resistance needs to be modelled well."},"notes/School-Subjects/Physics/Electricity/Ohm's-Law":{"title":"Ohm's Law","links":["tags/physics","tags/electricity"],"tags":["physics","electricity"],"content":"#physics#electricity\n\n\n                  \n                  Ohm&#039;s Law \n                  \n                \nV=IR\na higher P.D. ‚Üí higher current\n‚à¥R=IV‚Äã\n\nIn a series circuit, current is constant.\nCalculating Total Resistance ¬ß\nSeries: Rt‚Äã=R1‚Äã+R2‚Äã+‚ãØ+Rn‚Äã\nIn parallel: Rt‚Äã1‚Äã=R1‚Äã1‚Äã+R2‚Äã1‚Äã‚ãØRn‚Äã1‚Äã"},"notes/School-Subjects/Physics/Energy/Forms-of-Energy":{"title":"Forms of Energy","links":["tags/energy"],"tags":["energy"],"content":"#energy\nKinetic Energy ¬ß\n\nEk‚Äã or KE\nEnergy due to movement of an object with mass\nEk‚Äã=21‚Äãmv2 (for speeds &lt;0.1¬†speed¬†of¬†light)\nUsually (like always, but only if you remove it lol), mass is conserved\n‚à¥Œîv‚ÜíŒîEk‚Äã\nŒîEk‚Äã=21‚Äãm(vf2‚Äã‚àívi2‚Äã) or ŒîEk‚Äã=21‚Äãm(v2‚àíu2)\n\nGravitational Potential Energy ¬ß\n\nEg‚Äã or GPE\nEnergy due to position in a gravitational field of an object with mass\nEg‚Äã=mgh\n\nSprings ¬ß\nk (the spring constant) = xF‚Äã or the gradient of a F vs x graph\n\nNote: As the displacement is a square relationship in Us‚Äã=21‚Äãk(Œîx)2, when two springs are at equilibrium with the same fixed hanging mass, the spring with the lower spring constant (k) has a larger potential energy ‚àµ the displacement outweighs the spring constant.\n"},"notes/School-Subjects/Physics/Kinematics/Forces":{"title":"Forces","links":["tags/physics","tags/kinematics"],"tags":["physics","kinematics"],"content":"#physics#kinematics\n\n\n                  \n                  Info \n                  \n                \nForces - make a change in movement\n\nFg‚Äã= gravitational force\nFr‚Äã= frictional force\nFrictional forces can either slow something down or speed it up\nT= tensile force\nFor example, tug of war, the force in the rope when it‚Äôs being pulled, or perhaps a hanging mass\nFN‚Äã= normal contact force (perpendicular to the surface), same magnitude as Fg‚Äã if no motion\n![Constant Acceleration Equations.png](Constant Acceleration Equations.png)\nAdditionally, the equation for the vertical displacement of a horizontally launched projectile is:\ny=21‚Äãgt2\nThe horizontal displacement is only influenced by the speed at which it moves horizontally, vix‚Äã so x=vix‚Äã√ót.\nAlso\n\nvx‚Äã=vcosŒ∏\nvy‚Äã=vsinŒ∏\nv2=vx2‚Äã+vy2‚Äã\n"},"notes/School-Subjects/Physics/Kinematics/Inclined-Planes":{"title":"Inclined Planes","links":[],"tags":["physics","kinematics"],"content":"![Inclined Planes.png](Inclined Planes.png)\nFN‚Äã=mgcos(Œ∏)\nFnet‚Äã=mgsin(Œ∏)"},"notes/School-Subjects/Physics/Kinematics/Momentum":{"title":"Momentum","links":[],"tags":["physics","kinematics"],"content":"Describes a characteristic of the motion of an object, or the ‚Äùmass in motion‚Äù\np - momentum (kg m s^-1)\nm - mass (kg)\nv - velocity (m s^-1)\np = mv\nChange in Momentum ¬ß\nTo change the momentum of an object (Œîp), a net force needs to be applied over time.\nA change in momentum would in most cases require a change in velocity, so Œîp=mŒîv and ‚à¥Œîp=m(v‚àíu).\nThis means that if ‚àëp=0 then pi‚Äã=pf‚Äã meaning that if the sum of all momentum in a system is zero then the initial momentum will equal the final momentum.\nBecause a net force is required, Œîp=Fnet‚ÄãŒît or Œîp=Ft, which is a change in momentum over time. Changes in momentum don‚Äôt happen instantaneously, there is always some period (no matter how small) over which this occurs.\nImpulse ¬ß\nAn impulse is the net force experienced by an object over time. It results in a change in momentum.\nFnet‚Äã=ŒîtmŒîv‚Äã\nDerivation ¬ß\nFrom Newton‚Äôs Second Law, we know that Fnet‚Äã=ma. We also know that a=ŒîtŒîv‚Äã=Œîtv‚àíu‚Äã. Subbing this into Newton‚Äôs Second Law, we get Fnet‚Äã=Œîtm(v‚àíu)‚Äã=ŒîtmŒîv‚Äã=ŒîtŒîp‚Äã."},"notes/School-Subjects/Physics/Kinematics/Newton's-First-Law":{"title":"Newton's First Law","links":["tags/physics","tags/kinematics"],"tags":["physics","kinematics"],"content":"#physics#kinematics\nInertia is the property of an object that represents the resistance to a change in motion of that object. Every object, whether initially at rest or moving with a certain velocity, possesses inertia.\nThe greater the mass, the greater the inertia and vice versa\nConditions: ¬ß\nFirst Half: ¬ß\n\nAn object at rest where ‚àëF=0 stays at rest\nAn object not at rest where ‚àëF=0 continues in motion\n\nSecond Half ¬ß\n\nAn object will change its motion if ‚àëFÓÄ†=0\nmotion is a change in position: i.e. velocity\n"},"notes/School-Subjects/Physics/Kinematics/Newton's-Second-Law":{"title":"Newton's Second Law","links":["tags/physics","tags/kinematics"],"tags":["physics","kinematics"],"content":"#physics#kinematics\n‚àë(F)=ma\nFon¬†B¬†by¬†A‚Äã=mB‚Äã√óaB‚Äã\nThe force on B is impacted by the mass of B and the acceleration of B"},"notes/School-Subjects/Physics/Kinematics/Newton's-Third-Law":{"title":"Newton's Third Law","links":["tags/physics","tags/kinematics"],"tags":["physics","kinematics"],"content":"#physics#kinematics\nFon¬†B¬†by¬†A‚Äã=‚àíFon¬†A¬†by¬†B‚Äã\nAction¬†Force=‚àíReaction¬†Force\nFor example:\n\n\n\n\n\n\n\n\n\n\n\n\n\nAction forceReaction forcePush on planetPlanet pushes on skater"},"notes/School-Subjects/Physics/Kinematics/Projectile-Motion":{"title":"Projectile Motion","links":[],"tags":[],"content":"projectile motion :: an object launched into space without motive power of its own is called a projectile\nIf we neglect air resistance, the only force acting on a projectile is its weight, which causes its path to deviate from a straight line.\nThe projectile has a constant horizontal velocity and a vertical velocity that changes uniformly under the influence of gravity.\nHorizontal and vertical motion of projectiles are independent, meaning horizontal motion does not influence vertical motion. The link between the two is time only.\nOblique Projectile Motion ¬ß\nOblique projectile motion is when an object is launched at an angle."},"notes/School-Subjects/Physics/Logbook/13-2-2023":{"title":"13-2-2023","links":["tags/physics","tags/prac","notes/School-Subjects/Physics/Logbook/Refraction/I_R_Snells-law-prac_20231.xlsx","notes/School-Subjects/Physics/Logbook/Refraction/CGS-Refraction-of-light-prac-2023.docx"],"tags":["physics","prac"],"content":"#physics#prac\n\nAlso put data into an excel worksheet that you can find here, along with some questions from a word document here"},"notes/School-Subjects/Physics/Logbook/20-6-2023":{"title":"20-6-2023","links":["tags/physics","tags/prac"],"tags":["physics","prac"],"content":"#physics#prac\n\n\nWhat does your graph indicate about the relationship between potential difference and current for the wire? State the relationship in mathematical form.\nThe graph for the light bulb indicates that as current increases at a constant rate, potential difference increases at an increasing rate, following a parabolic relationship of V=15120√óI+88.638√óI‚àí0.0727.\n‚à¥ The light bulb is non-ohmic.\nMeanwhile, the fixed resistor indicates a direct proportionality, where an increase in current at a constant rate results in the potential difference increasing at a constant rate, following the linear relationship of V=10.63√óI‚àí0.042.\n‚à¥ The fixed resistor is ohmic.\n\n\nIs the resistance constant for each component?\nNo, the resistance is not constant for the light bulb, but was constant for the fixed resistor. This is demonstrated by calculating the resistance for each date points using the rule R=IV‚Äã.\nLight Bulb:\n\nFor V=1.7 and I=0.009, R=118.89\\ohm\nFor V=3.4 and I=0.0127, R=267.72\\ohm\nEvidently these two values are not very similar, so not a constant resistance.\nFixed Resistor:\nFor V=2 and I=0.2, R=10\\ohm\nFor V=3.47 and I=0.33, R=10.52\\ohm\nEvidently these two values are relatively close, so there is a constant resistance.\n\n\n\nThe unit of resistance is OHM. Sow what 1 ohm is equal to in terms of volts and ampere.\nR=IV‚Äã‚à¥  If V = 1 and A = 1, R will = 1.\n\n\nAn ohmic component is one for which the resistance is constant, at any voltage. Are these components ohmic? Justify your answer.\nThe fixed resistor is ohmic, as demonstrated above and the light bulb is non-ohmic.\n\n\nIn the column headed ‚Äòpower‚Äô in your results table, calculate the power for the light globe. Plot a graph of power against current for the light globe\n\nWhat relationship is suggested by this graph.\nAs current increases at a constant rate, power increases at an increasing rate.\nUse the formula for power (P=VI) and Ohm‚Äôs Law (V=IR) to derive an equation for power as a function of current as suggested by your graph\ny=10.496√óx2+0.0717√óx‚àí0.0136.\n\n\n\nWhat sources of error are there in this experiment? Think about the assumptions that have been made - are they valid assumptions? (For example, it is assumed that the ammeter and wires have no resistance.)\n\n"},"notes/School-Subjects/Physics/Logbook/30-11-2022":{"title":"30-11-2022","links":["tags/physics","tags/waves","tags/prac"],"tags":["physics","waves","prac"],"content":"#physics#waves#prac\nDid a prac with slinkies to explore longitudinal and transverse waves\n"},"notes/School-Subjects/Physics/Logbook/Logbook":{"title":"Logbook","links":["tags/physics","notes/School-Subjects/Physics/Logbook/30-11-2022","notes/School-Subjects/Physics/Logbook/13-2-2023","notes/School-Subjects/Physics/Logbook/20-6-2023"],"tags":["physics"],"content":"#physics\n30-11-2022 ¬ß\n30th November 2022: Waves Practical with Slinkies\n13-2-2023 ¬ß\n13th February 2023: Refraction of Light with Snell‚Äôs Law\n20-6-2023 ¬ß\n20th June 2023: Ohm‚Äôs Law Prac with Electrical Components"},"notes/School-Subjects/Physics/Physics":{"title":"Physics","links":["tags/physics","tags/subject","notes/School-Subjects/Physics/Logbook/Logbook","notes/School-Subjects/Physics/Waves/Wave-Definitions","notes/School-Subjects/Physics/WCCC/WCCC-1","notes/School-Subjects/Physics/WCCC/WCCC-3","notes/School-Subjects/Physics/WCCC/WCCC-4","notes/School-Subjects/Physics/Thermodynamics/Laws-of-Thermodynamics","notes/School-Subjects/Physics/Thermodynamics/Wien's-Law"],"tags":["physics","subject"],"content":"#physics#subject\nYou can also view my Logbook which is a log of all practicals\nUnit 1 ¬ß\n\nWeek 1: Waves\n\nWave Definitions for the parts of a wave\nWCCC 1: a weekly quiz handout to check our stage of learning\n\n\nWeek 3: Refraction\n\nSnell‚Äôs Law, etc\nWCCC 3: Weekly Quiz, this time of refraction!\n\n\nWeek 4: Thermodynamics\n\nWCCC 4 on heat and temperature!\nLaws of Thermodynamics\n\n\nWeek 5: Thermal Radiation\n\nWien‚Äôs Law\n\n\n"},"notes/School-Subjects/Physics/Radiation/Fundamental-Forces":{"title":"Fundamental Forces","links":["tags/physics","tags/radiation","tags/card"],"tags":["physics","radiation","card"],"content":"#physics#radiation\n![Fundamental Forces.png](Fundamental Forces.png)\nStrong Force#card ¬ß\nThe strongest fundamental force is the force that holds the nucleus together, binding quarks and holding nucleons together. This has a strength of 1 and the exchange particle is a gluon.\nIt has a range of 10‚àí15 (a medium sized nucleus) and ‚à¥ larger sized nuclei decay.\n\n\nThe strong nuclear force is so short range that its attraction can only be between adjacent nucleons\nThink of the force like a spring linking nucleons, the harder you try to pull them, the more the spring reacts to hold them together until they are separated by too much¬† and the spring snaps. The particles go out of reach of the attractive nature of the strong nuclear force and repel away from each other by the electromagnetic force.\n\n![Attractive and replusive force in atomic nuclei.png](Attractive and replusive force in atomic nuclei.png)\nStable isotopes usually require the strong force to be slightly stronger than the electrostatic force within the nucleus. This means the nucleus is more attracted to itself than it is repelled by itself.\nElectro-magnetic Force#card ¬ß\nThe force that attracts opposite charges and repels like charges. It has a strength of 1371‚Äã and a range of infinity, and it has a greater effect than the strong force beyond a certain range, causing decayed nuclei to repel each other (alpha decay).\nExchange particle is a proton.\n\nWeak Force#card ¬ß\nThe force that allows quarks to rearrange themselves, so neutrino (short lived fundamental particle) interaction induces beta decay. The weak force changes the spin of quarks, but essentially it causes beta decay. Exchange particles are W and Z bosons.\nIt has a strength of 10‚àí6 and a range of 10‚àí18 (0.1% of the diameter of a proton)\n\nGravity#card ¬ß\nAny objects of mass are attracted to each other. This is gravity, and is the weakest force, with a strength of 6√ó10‚àí39 and range of ‚àû\n"},"notes/School-Subjects/Physics/Radiation/Nuclear-Half-Life":{"title":"Nuclear Half-Life","links":["tags/card"],"tags":["card"],"content":"Half-life#card ¬ß\nThe time it takes for half of a radioactive sample to decay (generally in seconds or years).\nIt can also be defined as the time after which there is a 50% chance that an individual nucleus has decayed.\n\nIf the mass is 100g, after one half life it would be 50g, After another it would be 25g, and 12.5g, 6.25g, etc. This is a logarithmic relationship.\nYou cannot speed up or slow down half-lives.\nHalf Life Formula#card ¬ß\nN=N0‚Äã(21‚Äã)n\nN = remaining nuclei\nN0‚Äã = initial no. nuclei\nn = no. half lives since N0‚Äã calculated\n\nActivity#card ¬ß\nThe number of decays per second of a sample, also called the decay rate.\nAs more nuclei have decayed (time has passed), the activity of the substance will decrease (the rate decreases).\n\nA=A0‚Äã(21‚Äã)n\nA = the activity at a given time (Bq)\nA0‚Äã = the initial activity (Bq)\nn = no. half-lives since the initial measurement (no units)\nRate: the number of nuclei decaying per unit of time\n‚à¥ 1 Bq = 1 decay/disintegration per second (becquerel)"},"notes/School-Subjects/Physics/Radiation/Radiation":{"title":"Radiation","links":["tags/physics","tags/radiation","tags/card"],"tags":["physics","radiation","card"],"content":"#physics#radiation\nDefinitions ¬ß\nRadiation#card ¬ß\nEnergetic waves and particles (Œ±=24‚ÄãHe, Œ≤=e‚àí/e+)\n\nRadioactivity ¬ß\nAny form of particles emitting radiation\n\nNatural: 88% of annual human dosage\n\nTerrestrial radioactive sources within the Earth\nCosmic rays from outer space\n\nShielded by atmosphere -&gt; higher doses at higher altitudes\n\n\n\n\nArtificial: 12% of annual human dosage\n\nMainly Medical sources (eg X-ray)\nNuclear power industry\n\n\n\nTimeline of Discovery ¬ß\n\n1895 - German scientist, Wilhelm Rontgen, discovers that X-rays are being emitted from cathode ray tubes\n1896 - Frenchman, Henri Becquerel, investigates X-rays in a series of tests on potassium uranyl sulfate with photographic plates. He discovers that the uranium salt produces radiation (these are called Becquerel rays).\nLate 1890‚Äôs - Marie Curie first uses the term ‚ÄòRadioactivity‚Äô to describe the spontaneous and uncontrollable decay of an atomic nucleus, resulting in an emission of particles and rays (an atom that is emitting particles).\n\nX-rays ¬ß\n\nX-rays are short wavelength electromagnetic waves formed from the sudden deceleration of an electric charge. (e.g. when electrons hit the end of a cathode ray rube)\nWavelengths range from 0.001nm to 10nm.\nX-rays can penetrate flesh but not bone, and are thus used extensively for medical diagnosis.\n\nTypes of Radiation ¬ß\nAlpha (Œ±) Decay ¬ß\n\nAlpha decay occurs when an unstable parent nuclear ejects an alpha particle.\nŒ±- particles are positively charged and consist of 2 protons and 2 neutrons, and is equivalent to a helium nucleus.\nThe daughter nucleus becomes more stable. (the daughter is what is left behind)\n\nBeta (Œ≤) Decay ¬ß\n\nŒ≤-particles are ejected from a parent nucleus when one of the neutrons spontaneously turns into a proton and an electron.\nThe electron is emitted from the atom as a Œ≤-particle.\n\np+‚Üín0+e+¬†(Œ≤+)\nn0‚Üíp++e‚àí¬†(Œ≤‚àí)"},"notes/School-Subjects/Physics/Thermodynamics/Laws-of-Thermodynamics":{"title":"Laws of Thermodynamics","links":["tags/physics","tags/thermodynamics","tags/card"],"tags":["physics","thermodynamics","card"],"content":"#physics#thermodynamics\n\n\n                  \n                  Info \n                  \n                \nWhat is heat? :: Heat is the energy transferred between objects because of a temperature difference.  \nObjects are in thermal contact if heat can flow between them.\nWhen the transfer of heat between objects in thermal contact ceases, they are in thermal equilibrium.\n\n\nZeroth Law#card ¬ß\nThe zeroth law states that if two¬†thermodynamic systems¬†are in¬†thermal equilibrium¬†with each other, and also separately in thermal equilibrium with a third system, then the three systems are in thermal equilibrium with each other.\n\nFirst Law#card ¬ß\nEnergy cannot be created or destroyed. In other words, the total amount of energy in a system is conserved (constant), however, energy can be transformed from one from to another.\n\nU stands for the internal energy of a substance, which is the sum of all the energy in the substance, including:\n\nPotential energy in the bonds\nRotational energy\nVibrational energy\nTranslational (kinetic) energy of the particles in the substance.\n\nQ stands for the thermal energy of a substance in Joules.\nW stands for the work done, and work is done when a force acts on an object and moves the object through a distance.\n\nWork by the system: ‚ÄúSystem pushes back on plunger and it goes up‚Äù (positive work)\nWork on the system: ‚ÄúI push down on plunger to compress system‚Äù (negative work)\n\nNegative work increases the energy of a system\nThis is because when work is done on a system, the system isn‚Äôt really doing anything and it gets work done for it, ‚à¥ it is negative\nŒîU=Q‚àíW\nWork BY the system is positive work.\n^1677225721447\nWork ON the system is  negative work.\n\nSpecific Heat Capacity#card ¬ß\nThe way the temperature increases when an object gains thermal energy depends on the material from which the object is made.\n\nThe amount of thermal energy (heat energy) required to increase the temperature of an object by 1¬∞C is termed the thermal capacity of the object (with the unit being J¬∞C‚àí1, Joules per degree Celsius/Kelvin)\n\n\nTo make comparisons easier we can compare the amount of thermal energy required to increase 1 kg of the material by 1¬∞C. This is termed the specific heat capacity of the material.\nThe symbol for specific heat capacity c with the unit Jkg‚àí1¬∞C‚àí1 or Jkg‚àí1¬∞K‚àí1.\nThis can also be written as c=Kg√óKJ‚Äã\nThis can be rearranged to c√ókg√óK=J and if we replace J with ŒîQ, kg with m for mass and K with ŒîT, we get ŒîQ=mcŒîT\nExample#card ¬ß\nHow much heat energy is required to increase the temperate of 5kg of water by 80¬∞C?\nŒîQ=mcŒîT\n=5√ó4200√ó80\n=1680000\n=1.68√ó106J\n\nLatent Heat ¬ß\nLatent (meaning ‚ÄúHidden‚Äù) Heat refers to the heat curve of changes in phases. This means that during the phase change, the energy that would normally manifest itself in a change in temperate (ŒîT) is instead put towards the process of rearranging the atoms to change the phase of the material.\nSpecific Latent Heat ¬ß\nThe amount of energy required to change 1 kg of a substance from one state to another is called the Specific latent Heat. The unit is J¬†kg‚àí1\n\nLvap‚Äã= specific latent heat of vaporisation\nLfus‚Äã= specific latent heat of fusion\n\nTo calculate the amount of energy required to change the state of mass m\nQ=mL"},"notes/School-Subjects/Physics/Thermodynamics/Wien's-Law":{"title":"Wien's Law","links":["tags/physics","tags/thermodynamics"],"tags":["physics","thermodynamics"],"content":"#physics#thermodynamics\n\n\n                  \n                  Note \n                  \n                \nRelationship between temperature and emission of radiation.\n‚à¥ Any object that is above 0 K will be emitting some radiation\n\n\nCool objects, such as the human body, emit radiation at long wavelengths with lower energy, such as infrared radiation. Infrared radiation is not visible by the naked human eye under normal circumstances.\nAt higher temperatures, objects emit radiation with a higher frequency and you can see it glow red. An example is a bar heater that glows red hot.\nAt even higher temperatures, say 2000¬†K, objects such as the filament of an incandescent light glow yellow or white.\nVery hot objects, at temperatures of 106¬†K or more, emit the majority of their radiation within the gamma and X-ray regions of the electromagnetic spectrum.\n\nWien discovered that the peak wavelength at which an object will emit the maximum intensity of radiation is dependant on its surface temperature.\n\n\n                  \n                  Wien&#039;s Law \n                  \n                \nŒªmax‚Äã√óT=2.898√ó10‚àí3¬†m¬†K\nwhere Œªmax‚Äã is the peak wavelength of the emitted radiation in metres (m) and T is the surface temperature of the object in kelvin (K).\n"},"notes/School-Subjects/Physics/WCCC/WCCC-1":{"title":"WCCC 1","links":["tags/physics","tags/wccc","tags/waves"],"tags":["physics","wccc","waves"],"content":"#physics#wccc#waves\n\nDescribe the motion of particles within a medium as a mechanical wave passes through the medium:\n\nThe particles oscillate around a mean position, allowing for energy to be transferred through them without a net transfer of matter with zero displacement\n\n\nWhich of the following statements are true and which are false? For the false statements, rewrite them so they become true.\n\nA: Longitudinal Transverse waves occur when particles of the medium vibrate in the opposite direction to the direction of the wave: False, needs to be transverse\nB: Transverse waves are created when the direction of vibration of the particles is at right angles to the direction of the wave: True\nC: A longitudinal wave is able to travel through air: True\nD: The vibrating string of a guitar is an example of a transverse wave: True\n\n\nThe diagram below represents a slinky spring held at point A by a student.\n[Insert Imaginary Diagram]\nDraw an image of the pulse a short time after that shown in the diagram and determine the motion of point B. Is point B moving upwards, downwards or is it stationary?\n\nPoint B is moving downwards in the image shown\n\n\nWhich of the following are examples of mechanical waves?\nlight, sound, ripples on a pond, vibrations in a rope\nThe diagram below shows dots representing the average displacement of air particles at one moment in time as a sound wave travels to the right.\n[Insert Imaginary Diagram]\nDescribe how particles A and B have moved from their equally-spaced undisturbed positions to form the compression.\n\nThey oscillate around their mean position causing them to produce compression in certain areas, which causes them to move back in the other direction.\n\n\nA sound wave is emitted from a speaker and heard by Lee who is 50m from the speaker. He made several statements once he heard the sound. Which one or more of the following statements made by Lee would be correct? Explain your answers.\n\nA: Hearing a sound wave tells me that air particles have travelled from the speaker to me.\nB: Air particles carried energy with them as they travelled from the speaker to me.\nC: Energy has been transferred from the speaker to me.\nD: Energy has been transferred from the speaker to me by the oscillation of air particles.\nExplanation: The particles do not have a net transfer of matter but do transfer energy from the speaker to Lee\n\n\nA mechanical wave may be described as transverse or longitudinal. In a transverse wave, how does the motion of the particles compare with the direction of travel of the wave?\n\nIn a transverse wave, the motion of the particles is perpendicular to the direction of the wave\n\n\nClassify the waves described below as either longitudinal or transverse:\n\nA: sound waves - longitudinal\nB: a vibrating guitar string - transverse\nC: slinky moved with an upward pulse - transverse\nD: slinky pushed forwards and backwards - longitudinal\n\n\nMechanical waves generally travel faster in solids than in gases. Provide an explanation for this.\n\nThe particles of the solid are packed closer to each other, meaning that the speed of the oscillations can be faster with same amount of energy due to the smaller distance that has to be travelled for the particles to change direction\n\n\nFor the wave shown below, describe the direction of energy transfer of the sound between the tuning fork and point X. Justify your answer.\n\nThe direction of energy transfer is parallel to the point of the sound‚Äôs origin, meaning it will move directly from the tuning fork to point X\n\n\n"},"notes/School-Subjects/Physics/WCCC/WCCC-3":{"title":"WCCC 3","links":["tags/physics","tags/wccc","tags/refraction"],"tags":["physics","wccc","refraction"],"content":"#physics#wccc#refraction\n\n\n                  \n                  Question \n                  \n                \nLight is incident on a piece of glass. The light travels from air (assume n = 1.00) in to the glass. In the air, the light beam makes an angle of 32.0¬∞ with the normal. In the glass it makes an angle of 21.0¬∞ with the normal.\n\n\nList the angles of incidence and refraction in this situation\nAngle of Incidence: 32.0¬∞, Angle of Refraction: 21.0¬∞\nWhat is the refractive index of the glass?\nSnell‚Äôs Law tells us that\nn1‚ÄãsinŒ∏1‚Äã=n2‚ÄãsinŒ∏2‚Äã\n‚à¥ Given the information from the question we can create the following equation where n2‚Äã is the refractive index of the glass:\n1√ósin32¬∞=n2‚Äãsin21¬∞\nn2‚Äã=sin21¬∞sin32¬∞‚Äã\n‚à¥ The refractive index of glass is approx. 1.4787\nThe light beam re-emerges from the other side of the glass. What is the angle from the normal at which it emerges?\n32.0¬∞\n\n\n\n                  \n                  Question \n                  \n                \nCalculate the speed of light in seawater that has a refractive index of 1.38\n\nvc‚Äã=n\nv3√ó108‚Äã=1.38\nv=1.383√ó108‚Äã\n\n\n                  \n                  Question \n                  \n                \nLight travels at a speed of 2.25√ó108ms‚àí1 in water and 2.29√ó108ms‚àí1 in ice. If water has a refractive index of 1.33, use this information to calculate the refractive index of ice.\n\nn2‚Äã=vc‚Äã\nn2‚Äã=2.29√ó1083√ó108‚Äã\nn2‚Äã=229300‚Äã\nn2‚Äã‚âà1.31\n\n\n                  \n                  Question \n                  \n                \nLight travels from water (n = 1.33) into glass (n = 1.60). The incident angle is 44¬∞. Calculate the angle of refraction\n\nn1‚ÄãsinŒ∏1‚Äã=n2‚ÄãsinŒ∏2‚Äã\n1.33sin44¬∞=1.60sinŒ∏2‚Äã\nsin‚àí1(1.601.33sin44¬∞‚Äã)=Œ∏2‚Äã\nŒ∏2‚Äã‚âà35.27\n\n\n                  \n                  Question \n                  \n                \nFor which of the following situations can total internal reflection occur?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIncident mediumRefracting mediumair (n = 1.00)glass (n = 1.55)glass (n = 1.55)air (n = 1.00)glass (n = 1.55)water (n = 1.33)glass (n = 1.55)glass (n = 1.55)\nAll but the first are possible"},"notes/School-Subjects/Physics/WCCC/WCCC-4":{"title":"WCCC 4","links":["tags/wccc","tags/physics","tags/thermodynamics"],"tags":["wccc","physics","thermodynamics"],"content":"#wccc#physics#thermodynamics\n\n\n                  \n                  Info \n                  \n                \nUse the following information to answer questions 9-11.\nA physics teacher is holding a hot cup of coffee in her hand as she marks exams. She is so busy marking the exams that she forgets to drink the coffee and, eventually, the cup of coffee reaches thermal equilibrium with her hand.\n\n\n\n                  \n                  Question \n                  \n                \nQuestion 9\nWhat is temperature a measure of?\n\n\nÔªøÔªøÔªøhow hot each particle in a system is\nÔªøÔªøÔªøthe total kinetic energy of a system\nÔªøÔªøÔªøthe internal energy of a system\nÔªøÔªøÔªøthe average translational kinetic energy of the particles in a system\n\n\n\n                  \n                  Question \n                  \n                \nQuestion 10\nWhat does it mean for the teacher‚Äôs hand to be in thermal equilibrium with the cup of coffee?\n\n\nÔªøÔªøÔªøThere is no force between the hand and the cup of coffee.\nÔªøÔªøÔªøThe hand and the cup of coffee are at the same temperature.\nÔªøÔªøÔªøThe particles in the hand and the cup of coffee have stopped moving.\nÔªøÔªøÔªøThe temperatures of the hand and the cup of coffee add to zero.\n\n\n\n                  \n                  Question \n                  \n                \nQuestion 11\nDescribe how the average translational kinetic energy of the particles in the teacher‚Äôs hand compares with the average translational kinetic energy of the particles in the cup of coffee throughout the process of reaching thermal equilibrium.\n\nAt the start, the average translation kinetic energy (i.e. temperate) of the teacher‚Äôs hand would be lower than that of the coffee, because the coffee‚Äôs kinetic energy means that the particles move much more than that of the hand. Throughout the process of reaching thermal equilibrium, the faster moving particles in the coffee collide with the slower ones in the hand and then they eventually average out to being the same speed.\n\n\n                  \n                  Question \n                  \n                \nQuestion 12\nThe surface of the planet Venus maintains a nearly constant temperature of 735 K. Convert the temperature of the surface of Venus to degrees Celsius.\n\n735¬∞K‚àí273.15=461.85¬∞C\n\n\n                  \n                  Question \n                  \n                \nQuestion 13\nThe surface of the planet Mercury can reach temperatures as high as 450¬∞C during the day, and as low as -170¬∞C at night. This large variation occurs because Mercury does not have an atmosphere to trap the thermal energy during the night.\n\n\nConvert the minimum night-time temperature on Mercury to kelvin.\n‚àí170¬∞C+273.15=103.15¬∞K\nÔªøÔªøÔªøCalculate the temperature range (the difference between the maximum and minimum temperatures) of the surface of Mercury. Provide your answer in kelvin.\nMaximum temp: 723.15¬∞K\nDifference: 723.15¬∞K‚àí103.15¬∞K=620¬∞K\n"},"notes/School-Subjects/Physics/Waves/Wave-Definitions":{"title":"Wave Definitions","links":["tags/physics","tags/waves"],"tags":["physics","waves"],"content":"#physics#waves\n\nŒª: wavelength (m)\n\nDistance between two spots on a wave where it repeats\n\n\n∆í: frequency (Hz)\n\nCycles per second\n∆í=T1‚Äã\n\n\nT: Period (s)\n\nTime taken for 1 cycle\n\n\nv: Velocity (m/s)\n\nv=TŒª‚Äã\nv=∆íŒª\n\n\n"},"notes/School-Subjects/School-Subjects":{"title":"School Subjects","links":["notes/School-Subjects/English-Language/English-Language","notes/School-Subjects/Algorithmics/Algorithmics","notes/School-Subjects/Physics/Physics","notes/School-Subjects/Literature/Literature","notes/School-Subjects/Specialist-Maths/Specialist-Maths"],"tags":[],"content":"English Language ¬ß\nAn analytical lens on the language of English as we know it and how it is used to communicate thoughts and ideas\nAlgorithmics ¬ß\nVCE Algorithmics examines how information about the world can be systematically represented and processed, and how such processes can be made sufficiently explicit and precise that they can be implemented in a computer program through ‚Äúalgorithmic thinking‚Äù\nPhysics ¬ß\nPhysics is a natural science based on observations, experiments, measurements and mathematical analysis with the purpose of finding quantitative explanations for phenomena occurring from the subatomic scale through to the planets, stellar systems and galaxies in the universe.\nLiterature ¬ß\nVCE Literature focuses on¬†the meaning derived from texts, the relationship between texts, the contexts in which texts are produced and read, and the experiences the reader brings to the texts.\nSpecialist Maths ¬ß\nSpecialist Maths focuses on the abstract side of maths, looking at proofs , imaginary numbers and more to delve deep into the theory behind maths and beyond."},"notes/School-Subjects/Specialist-Maths/Sequences---Challenge-Problems":{"title":"Sequences - Challenge Problems","links":[],"tags":[],"content":"Below are 3 challenge problems.\nPlease choose ONE problem and attempt to solve it.\nThen do your best to write a CLEAR EXPLANATION below of how to solve the problem. A classmate who reads your explanation should be able to follow and understand it. You can either type it, or write in your book and upload a photo below.\nEven if you are not able to solve the problem, please explain\nYOUR THINKING PROCESS‚Ä¶\n\nWhat did you try?\nWhy didn‚Äôt it work?\nWhat questions would you ask to help understand the problem?\n\nQuestion 1 ¬ß\n\n\n                  \n                  Question 1 \n                  \n                \nEach row and column in the grid below is an arithmetic sequence with 5 terms.\nFind the value of X in the centre cell.\n\n![Question 1 Diagram.png](Question 1 Diagram.png)\nSo, with the current square, we have 5 arithmetic sequences to solve.\n\n1‚Ä¶25:\n\nThis is the arithmetic sequence at the top, so $t_1=1$ and $t_5=25$\n\nThe first term is 1 so $a=1$ \t\n\n$\\therefore t_5=1+4d$ \n\n$24=4d$\n\n$d=6$\n\n$t_n=1+6\\left(n-1\\right)$\n\nThis means the sequence goes $1, 7, 13, 19, 25$\n\n\n1‚Ä¶17:\n\nThis is the arithmetic sequence at the left, so $t_1=1$ and $t_5=17$\n\nThe first term is 1 so $a=1$ \t\n\n$\\therefore t_5=1+4d$ \n\n$16=4d$\n\n$d=4$\n\n$t_n=1+4\\left(n-1\\right)$\n\nThis means the sequence goes $1, 5, 9, 13, 17$\n\n\n17‚Ä¶81:\n\nThis is the arithmetic sequence at the bottom, so $t_1=17$ and $t_5=81$\n\nThe first term is 17 so $a=17$ \t\n\n$\\therefore t_5=17+4d$ \n\n$64=4d$\n\n$d=16$\n\n$t_n=17+16\\left(n-1\\right)$\n\nThis means the sequence goes $17, 33, 49, 65, 81$\n\n\n25‚Ä¶81:\n\nThis is the arithmetic sequence at the right, so $t_1=25$ and $t_5=81$\n\nThe first term is 25 so $a=25$ \n\n$\\therefore t_5=25+4d$ \n\n$56=4d$\n\n$d=14$\n\n$t_n=25+14\\left(n-1\\right)$\n\nThis means the sequence goes $25, 39, 53, 67, 81$\n\nNow we have the following table:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n171319255399X5313671733496581\nWe can either solve the vertical or the horizontal arithmetic sequence now, so arbitrarily we can go with the horizontal.\nt1‚Äã=13 and t5‚Äã=49\nThe first term is 13 so a=13\n‚à¥t5‚Äã=13+4d\n36=4d\nd=9\ntn‚Äã=13+9(n‚àí1)\nThis means the sequence goes 13,22,31,40,49\n‚à¥ X is 31\nQuestion 2 ¬ß\n\n\n                  \n                  Question 2 \n                  \n                \nFor each positive integer k; let ak‚Äã denote the increasing arithmetic sequence of integers whose first term is 1 and whose common difference is k:\nFor example, a3‚Äã is the sequence 1,4,7,...\nFor how many values of k does ak‚Äã contain the term 2023?\n\nLet the nth term of the sequence ak‚Äã be 2023:\nan‚Äã=1+k(n‚àí1)\n‚à¥2023=1+k(n‚àí1)\n2022=k(n‚àí1)\nNow we have two terms, k and (n‚àí1) whose product produces the number 2022. By this logic, we should be able to list the factors of 2022 to produce all the possible values of k.\n1√ó2022=2022\n2√ó1011=2022\n3√ó674=2022\n6√ó337=2022\n337√ó6=2022\n674√ó3=2022\n1011√ó2=2022\n2022√ó1=2022\nTherefore there are 8 possible values of k that contain the term 2023.\nQuestion 3 ¬ß\n\n\n                  \n                  Question 3 \n                  \n                \nThe terms of an arithmetic sequence add to 2023.\nThe first term of the sequence is increased by 1, the second term is increased by 2, the third term is increased by 3, and so on.\nThe terms of the new sequence add to 2176.\nFind the middle term in the original sequence.\n\nThe new sequence will have n added onto the end each time\nFor the sequence 1,2,3,4,5,‚Ä¶\nSn‚Äã=2n‚Äã(2+(n‚àí1))\nSn‚Äã=2n‚Äã(n+1)\nSn‚Äã=2(n2+n)‚Äã\nThe difference between 2023 and 2176 must equal 2(n2+n)‚Äã  so we get the equation:\n153=2(n2+n)‚Äã\n306=n2+n\nn2+n‚àí306=0\n(n‚àí17)(n+18)=0\nn&gt;0‚à¥n=17\nThis means there are 17 terms in the sequence, and if the sum of all these terms is 2023, the mean must be 172023‚Äã=119\nSince the sequence has a ‚Äúmiddle‚Äù term, there must be an odd number of terms in the sequence and this middle term must be equivalent to the mean.\n‚à¥ The middle term is 119"},"notes/School-Subjects/Specialist-Maths/Specialist-Maths":{"title":"Specialist Maths","links":["notes/School-Subjects/Specialist-Maths/Sequences---Challenge-Problems"],"tags":[],"content":"I probably won‚Äôt put much stuff here but here are some cool challenge problems!"},"notes/Tutoring/Social-Media-Post":{"title":"Social Media Post","links":[],"tags":[],"content":"Hi all, I‚Äôm Garv and in 2024, I‚Äôll be offering flexible and affordable Maths Methods and Software Development 1/2 &amp; 3/4 private and group tutoring.\nI am currently open to taking students for my carefully crafted 40-week excellence program for both subjects, which can be held online.\nIf interested, feel free to leave a private message, or email me at gshah.6110@gmail.com for more information.\nIf you‚Äôre still on the fence, I am offering the first class FREE to decide, and a further FREE class if you can form a tutoring group with friends, so don‚Äôt hesitate to PM me or shoot an email.\nABOUT ME:\nüëä Went to CGS, receiving a 44 in Methods (2023) and a 45 in Software Development (2022)\nüëä Over 200 hours of teaching and tutoring experience\nüëä Freelance developer with experience in the software industry, based in the Glen Waverley\nWHY ME? WHAT I PROVIDE:\nüí• Effective, flexible and affordable small-group tutoring\nüí• Weekly class notes breaking down foundations with easy-to-follow steps covering content in detail\nüí• FREE one-on-one consultations upon request by students (out of class)\nüí• FREE introductory class\nüí• FREE recorded online lessons for later access and review\nüí• FREE bank of UDFs + CAS Skills to level up your speed and accuracy\nüí• UNLIMITED marking and feedback\nüí• HOT TIPS to help perform under exam pressure\nüí• Practice SACs, worksheets, and exams tailored to individual needs\nüí• A 40-week structured plan, crafted to strengthen both foundational and high-order skills, essential for exam performance\nWHAT CAN YOU EXPECT?\nüíØ Hour and a half classes via Zoom, with live annotations\nüíØ Weekly worksheets and teaching, plus access to annotated notes after class\nüíØ 24/7 feedback and study support + advice for all subjects, including Methods, Specialist Maths, Software Development, Algorithmics, English Language, Physics and UMEP Maths\nüíØ Flexible and affordable rates of 50/hourforone‚àíon‚àíoneclassesand30/hour for group classes\nMY GOALS:\n‚≠êÔ∏è Provide flexible tutoring, which will make the subject rewarding and engaging\n‚≠êÔ∏è Build a strong understanding of the Methods/Software Development content\n‚≠êÔ∏è Increase speed, with handy tips and tricks\n‚≠êÔ∏è Build confidence in students to perform under pressure\n‚≠êÔ∏è Mentor, support and guide students through VCE\n‚≠êÔ∏è Help students achieve their full potential and meet their academic goals\nMORE THAN JUST TUITION:\nWith my experience throughout VCE, I will provide students with mentorship and equip students to tackle the challenges of high school. Moreover, I will provide students with efficient study tips to avoid burnout and achieve excellent results. I believe that a student‚Äôs potential is limitless, and I will ensure you are rewarded for your hard work, which will set up students for future aspirations and career pathways.\nThank you! I look forward to assisting you in achieving the best study scores possible!\nReady to achieve academic excellence? Email me at¬†gshah.6110@gmail.com¬†to book your first FREE class today!"},"notes/University-Applications/Strategist-Meetings/Thu-August-10th-2023":{"title":"Thu August 10th 2023","links":["tags/crimson","tags/meeting"],"tags":["crimson","meeting"],"content":"#crimson#meeting\nMeeting Notes ¬ß\nWith: Jon Javier\nDate: 10/08/2023\nYellow = To Action\nGreen = Dates/Info\nStudied at UCLA and did a language major in French\n\nFigure out when to next take the SATs\n\nWrite down all the honours\nName, What I got, like place out of people, level (regional, etc)\nPlay around with Crimson app and fill it out\nTake a peak at ideas\n\n\n                  \n                  Session Notes \n                  \n                  \n                \n                \n![Thu August 10th 2023.png](Thu August 10th 2023.png)\n\nAwards ¬ß\nHere‚Äôs are the noteworthy honours/awards:\n\n\nApple Scholarship, formally the Swift Student Challenge, awarded in 2021 one of 300 global students, overall number of applicants not published\n\n\nInternational Mathematical Modelling Challenge, Award of Meritorious Achievement: 2nd in Australia, one of two teams chosen to represent Australia at the international round. 93 teams across Australia registered\n\n\nAustralian Maths Challenge: Prize Award, top 0.3% one in 300 students\n\n\nAustralian Defence Force 2022 Future Innovators Award - awarded to 5000 students across years 10 and 12\n\n\nPrimary School ¬ß\nVEX IQ Academy Certification Level 3 of 3: Grade 5\nCPM Drum Kit: Step 2\nVEX Robotics National Finals: 2nd Place\nScholarship to Caulfield Grammar\nYear 7 ¬ß\nOutstanding Academic Achievement:\n\n\nMaths Enrichment, Science, Art, Theatre Studies, Geography, Robotics and Engineering: STEM Sem 1\n\n\nMaths Enrichment, History, Science\n\n\nClass Academic Achievement:\n\n\nChinese Phase 1, English Sem 1\n\n\nPhysical Education, English, Chinese Phase 1 Sem 2\n\n\nState Wide Maths Games Day\nHouse Commendation\nSchool Service Award\nMusic Distinction\nColours for Academic Excellence\n2019 Australian Maths Challenge: Distinction\n2019 Australian Maths Challenge: High Distinction\nAPSMO Maths Olympiad: top 10% achiever + highest individual score\nAIMO: Participation\nGeneral Excellence Semester 1 and 2\nICAS:\n\n\nHigh Distinction: Science, Maths, Digital Technologies\n\n\nDistinction: English\n\n\nYear 8 ¬ß\nOutstanding Academic Achievement:\n\n\nDesign &amp; Technology, English, History, Maths Enrichment, Music Technology, Theatre Studies Sem 1\n\n\nEnglish, Art, Theatre Studies Sem 2\n\n\nClass Academic Achievement:\n\n\nPhysical Education Sem 1\n\n\nGeography, Science, Physical Education, Maths Enrichment, Classroom Music, Animation Fixation Sem 2\n\n\nHouse Commendation\nThe M.E Award (Best Team Player)\nMusic Emblem\nDouble Colours for Academic Excellence\nSchool Service Award\n2020 Australian Maths Challenge: Distinction\nAPSMO Maths Olympiad: top 10% achiever + highest individual score\nAIMO: Credit\nAMC: Score of 92 in non-competition round\nAustralian Geography Competition: High Distinction\nIMMC: Participation\nAustralian Informatics Olympiad: Bronze Certificate\nGeneral Excellence Semester 1 and 2\nICAS:\n\nDistinction: English, Maths, Digital Technologies, Science\n\nYear 9 ¬ß\nOutstanding Academic Achievement:\n\n\nEnglish, Science, Learning Journeys, Media, Design &amp; Technology Sem 1\n\n\nEnglish, Science, Enrichment Maths, Learning Journeys, Coding and Computers\n\n\nClass Academic Achievement:\n\nEnrichment Maths Sem 1\n\nMiddle School Committee Award\nMiddle School Langley House Captain\nApple Scholarship - One of 300 global students, for app submission\nOxford University Computing Challenge: Participation\nComputational and Algorithmic Thinking Competition: Credit, top 27%\nState Wide Maths Games Day\nThe Mike Ellis and Michael Michalakopoulos Award for House Leadership\nBoys‚Äô Soccer Commendation\nIMMC: Participation\nSchool Service Award\nMusic Colours\nAIMO: Credit\nTriple Colours for Academic Excellence\nHouse Distinction\nCommendation for Theatre\nInternational Chemistry Quiz: High Distinction\n2021 Australian Science Olympiad: Distinction\nGeneral Excellence Semester 1 and 2\nAustralian History Competition: High Distinction\nAustralian Geography Competition: High Distinction\nAustralian Informatics Olympiad: Bronze Certificate with score of 230\nAustralian Maths Challenge: Prize Certificate, top 0.3%\nICAS:\n\nDistinction: Writing, Digital Technologies, English, Maths\n\nYear 10 ¬ß\nOutstanding Academic Achievement:\n\n\nEnglish, History: Australia and the Modern World Sem 1\n\n\nEnglish Sem 2\n\n\nClass Academic Achievement:\n\nEthics Sem 1\n\nIMMC Award of Meritorious Achievement: 2nd in Australia, chosen out of two teams to represent Australia at the international round\nCommunity Service Emblem\nDouble Colours for Music\nColours for Debating\nState Wide Maths Games Day\nHouse Colours\nThe Tom N. Rowe Prize for Service\nThe Keith V. Crawley Prize for Academic Excellence\nOxford University Computing Challenge: Participation\nComputational and Algorithmic Thinking Competition: Credit\n50 hours of community service to Balyam Orphanage in India\nBig Science Competition: High Distinction\nAustralian Maths Challenge: Distinction\nAustralian Science Olympiad: High Distinction\nAustralian Defence Force 2022 Future Innovators Award\nThe University of Melbourne Kwong Lee Dow Young Scholar\nTriple Colours for Academic Excellence Re-awarded\nAIMO\nGeneral Excellence Semester 1 and 2\nYear 11 ¬ß\nSemester 1:\n\n\nCheer Squad Emblem\n\n\nCommunity Service Colours\n\n\nDebating Double Colours\n\n\nMusic Triple Colours\n\n\nPublication Emblem\n\n\nPublic Speaking Emblem\n\n\nService to Debating Colours\n\n\nService to Music Emblem\n\n"},"notes/University-Applications/Strategist-Meetings/Thu-August-24th-2023":{"title":"Thu August 24th 2023","links":["tags/crimson","tags/meeting"],"tags":["crimson","meeting"],"content":"#crimson#meeting\nMeeting Notes ¬ß\nWith: Jon Javier\nDate: 24/08/2023\nYellow = To Action\nGreen = Dates/Info\nResearch into:\n\nGeorgia Institute of Technology\nUIUC\nUniversity of Washington\nUniversity of Texas - Austin\nUniversity of Michigan - Ann Arbor\n\ndad said we can afford $20,000, but when book meeting double check with dad, first 5 min discussion\nWill do SATs again in March, tutoring probably around January, grind it out during the holidays\nForgot to list activities last time:\n\nPlay sports: table tennis top level team, currently do badminton did tennis too\nCommunity service with the school, conducting school tours etc (this is more of an award rather than activity)\nEditorial Committee, write pieces that get published in the yearbook ‚ÄúThe Grammarian‚Äù\nFOTA Director and Captain\nResearch (work in progress, hasn‚Äôt been to successful so far)\n\nIMPROVE ACADEMICS\nResearch ¬ß\nJust write something, anything\n\nLook into Busy Beaver problem\nCollate the Algorithmics SAT into something usable\nAny other research ideas\n\nJust write it all out, look at what other people have done and how you can do the same.\nEmail 2nd rate universities, doesn‚Äôt have to be good. All you want is someone with a PhD looking over your work so it is reputable. Better to get it published than not published at all"},"notes/University-Applications/University-Applications":{"title":"University Applications","links":["tags/university","Stanford","University-of-California-Berkley","notes/University-Applications/Crimson-Alex-Meeting.canvas"],"tags":["university"],"content":"#university\nWelcome to the home page for my University Admissions resources! Currently I‚Äôm trying to go overseas and get into a computer science university like Stanford or University of California Berkley.\nResources ¬ß\n\nInitial Mindmap Pathway\n"}}