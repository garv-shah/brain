{"/":{"title":"üè† Home","content":"\nHi! Welcome to my notes :)\nCurrently you can explore my [[School Subjects]] or [[University Applications]].\n\n\u003e [!note] School Subjects\n\u003e\n\u003e Currently I'm doing [[English Language]], [[Literature]], [[Physics]], [[Algorithmics]], [[Specialist Maths]] and Maths Methods for VCE!","lastmodified":"2023-09-07T08:27:08.468881612Z","tags":[]},"/To-Do":{"title":"To-Do","content":"```tasks\ngroup by status.type\ngroup by function task.tags\nshort mode\n```","lastmodified":"2023-09-07T08:27:08.468881612Z","tags":[]},"/notes/Daily-Notes/Mon-August-14th-2023":{"title":"Mon August 14th 2023","content":"\n1. Uniform - scenario question: you are on the committee, and you have a job to encourage more students to wear their uniform with pride. How could you do this? \n- I think the school uniform looks wonderful, and with the new uniform being able to mix and match makes it much more convenient, which increases school pride\n- I think allowing for variation was key and I can see the benefit around me\n- Could possibly allow and maybe even encourage accessories that adhere to the school environment and vision to let students get creative. Could make a fashion show day where people get creative!\n- Awards and embroideries are good, could move to make these cheaper as achievements\n- Ensure that the dress code is fair and that everyone knows about it\n\n2. What is your best leadership characteristic and why? \n   - Best trait is curiosity and love of learning\n   - I always love learning new things, whether that be other people's approaches to problems or skills that benefit the team\n   - Useful for being open to new ideas and being pushed out of my comfort zone\n\n3. What‚Äôs a time and example that you have displayed service to someone or something? \n\n4. A time where you‚Äôve had to make a decision that you knew you would affect others, but you also knew was right. \n\n5. A time that you have stood up for something that you believe in.","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/Daily-Notes/Mon-July-17th-2023":{"title":"Mon July 17th 2023","content":"\nI'm in the city today! I got invited to [Tildes](https://tildes.net/) which is really cool and I've been having some fun with that. Right now I'm in the Melbourne Connect building and I'm meeting with [Prof Alistair Moffat](https://findanexpert.unimelb.edu.au/profile/13222-alistair-moffat). \n\n## Questions for Mr. Moffat\nBelow are the main discussion points I want to have with him:\n- Hi hello introduce myself, explain how I'm very interested in his work, namely on text retrieval systems and search engines. \n- Been studying Algorithmics at school, and I've worked on a lot of frontend programming for apps and such, but have recently gotten a lot more interested in the theoretical side of computer science from books and the internet.\n- I could help with anything to do with actual programming, which I really enjoy and have experience with. I can also help with anything that's rather repetitive, I just simply want to be involved with and see how research it done at universities, since it a very different side to the field I am interested in that I haven't viewed before.\n- My strengths lie in the actual programming itself, mainly frontend things so far, since I have made plenty of apps and websites for countless purposes. If anything like this is ever needed, especially with any of his PhD students, then I'd be incredibly pumped if I could have an informal assistant role with any of his students and see what I can help out with.\n\n## Notes for Two Cousins\n\u003e These should be added into the issue tracker later\n- the list of available jobs should also have a section underneath it, maybe a button that says view other jobs, and this section should list jobs that are free but that don‚Äôt match the availability of the user since some may have more flexible schedules. Also it is not immedietly clear that the cards are interactive/clickable, so there should be an indicator saying ‚Äú16 times available‚Äù to make that more clear.\n- preferably once a lesson time slot is locked in, it should also display on the manage jobs card so that it‚Äôs more clear when the lesson is.\n- volunteers should be able to click the start shift button up to 15 mins before the lesson has started, but logic needs to be put in place to ‚Äúsnap‚Äù this to lesson times\n- there will be a 2x multiplier for australian volunteers and an 8x multiplier for american volunteers, based on their location\n- it needs to he made *veryy* clear that volunteers need to click the start shift button, so it should be made clear in the onboarding email along with an email when the lesson is claimed and before the lesson itself\n- volunteers should have a similar manage jobs view to the orphanages but only show their own jobs (orphanage should only show their own jobs too). Try to make emailing people easier by making the email very prominent, and time present too.\n- rename the availability at the top to \"Weekly Availability\" and remove the numbers because that was a bit confusing (might have to fork the syncfusion calendar or add in an option to hide them).\n\n## To Do For Today\n- [x] Finish Englang Exercises 2-12 #englang üî∫\n- [ ] Start watching Physics Videos #physics\n- [ ] Fix Username Issue #programming \n- [ ] Fix date pickers for post creation #programming \n- [ ] Fix the translation layer for rending from quill delta #programming ","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/Daily-Notes/Mon-July-24th-2023":{"title":"Mon July 24th 2023","content":"\nToday is much better than the weekend, twas very depressing.\n\n- [x] Keep working on Algorithmics SAT #algo","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/Daily-Notes/Sat-July-8th-2023":{"title":"Sat July 8th 2023","content":"\n# Starting to use Daily Notes!\n- [x] Setup Obsidian how I like\n","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/Daily-Notes/Sun-July-30th-2023":{"title":"Sun July 30th 2023","content":"\nSchool leadership!\n\nPersonal brand is about how I genuinely find it really fun and enjoyable to help other people and school leadership is an opportunity to make a wider impact and have others realise their abilities\n- talk about student mental health\n- connection with other campuses\n- connection with many facets of the school, bring together communities\n- year levels working more with each other, after covid only gotten to know own year level, personally only gotten much closer to year level below me this year, could try to have more of that, maybe a buddy system with year 12s and 7s","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/Daily-Notes/Tue-August-15th-2023":{"title":"Tue August 15th 2023","content":"\nMs. Parfett for letter of recommendation","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/Daily-Notes/Tue-July-11th-2023":{"title":"Tue July 11th 2023","content":"\nNew day! I made a good amount of progress on the Aporia Network last night, and I was able to get Google Meets links generating using the Google Calendar API!! :D\n\nToday I have a Dusty rehearsal from 10am to 4pm, so I'll probably just be programming while I'm doing that üëç\n\n- [x] Create PR for theme fix #programming\n- [x] Make is possible to render Delta #programming\n- [x] Do some Maths homework #methods\n- [x] Start working on schedule view #programming\n\nFor Dusty, I got assigned [Eden Kane](https://en.wikipedia.org/wiki/Eden_Kane) as well, which is a short talking role during the start of Scene 12. Basically, Dusty is just trying to go out to dinner with this guy but the paparazzi is relentless, but she's spinning up this story that they're dating even though they're not. Check it out on the script when we get to it. ","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/Daily-Notes/Tue-July-18th-2023":{"title":"Tue July 18th 2023","content":"\nFirst day of school today! I really need to do algo üò≠\nFor englang: there's a SAC which is a 1 outcome essay in week 8 monday and a formative practice essay in week 5.\n\n- [x] Email Neil if you dont find an answer to the quiz [q4](https://lms.vsvonline.vic.edu.au/mod/quiz/review.php?attempt=654551\u0026cmid=259933#question-677339-4)","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/Daily-Notes/Wed-August-16th-2023":{"title":"Wed August 16th 2023","content":"\nHi Everyone! My name's Garv and I'd like to be your House Captain for 2024, because how bad can I be? I've asked that question to myself a lot recently and I think it's a question that embodies Langley: how bad can I possibly be?\n\nIt's kind of crazy that I'm standing here right now, it felt like just yesterday that I was in Year 7, watching our soon to be House Captain, Steven, come and stand here with a guitar for his rendition of Baby by Justin Bieber. I asked him later why he wanted to be house captain, and he said \"well, how bad could it really be?\"\n\nWhen I first joined the house, the sheer choice was *overwhelming*. There was so much to do, so much possibility, so I ended up doing what came naturally, I signed up to everything that I could, just to give it a shot. How bad can I be? Well, the answer is quite very bad, but honestly it didn't matter, I was having a blast while doing it. So many things just fell flat on their face, I think 90% of the things I've tried have just failed completely, but I kept going because it's what felt natural to me. \n\nWhen I imagine Langley House, I think of one word. Perseverance. We're the loudest and proudest house, and we'll give anything a shot, because at the end of the day, how bad can we be?? I know that I and all my fellow Langleyites will give it their all, that's just what we do. I want to be house captain because it feels natural to me, a natural continuation of how much I've received from this community and how much I wanna give back. I love this house, I love making an impact, and I love just giving things a shot. So why not? Give me a shot, because really, how bad can I be?","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/Daily-Notes/Wed-July-12th-2023":{"title":"Wed July 12th 2023","content":"\nAnother day of app development.\n\nIn the morning I had a quick call with Guddi Masi and Advaith, which was really good and I got to show them the app so far. It's 1:18pm right now, and I've mostly spent the day refactoring code and trying to make it a bit neater.\n\nAt the Dusty rehearsal, Ms. Mellington also gave me the role of the Guardsman in Scene 18. He's kind of dim witted, and Zara's character Peg is explaining to him why Paul McCartney is coming to the party, but he doesn't really understand. Check your photos for what you gotta do!","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/Daily-Notes/Wed-July-19th-2023":{"title":"Wed July 19th 2023","content":"\nHello!\n- [x] Finish Englang Essay #englang","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/School-Subjects/Algorithmics/ADT-Terminology":{"title":"ADT Terminology","content":"#algo \n\n## List #card\nA¬†**list**¬†is a collection of similar items, in no particular order. In the traditional use of lists as ADTs in algorithms and coding languages, only the first and last item of a list may be viewed, updated and deleted. However, this is not strictly implemented in all coding languages, including Snap! and Snap/Edgy. Unlike mathematical sets, ADT lists can have repeated values.\n^1689818683618\n\n## Array #card \nAn¬†**array**¬†is a collection of similar items in a¬†**fixed length**, non-expandable structure of items that are accessible by index position.\n^1689818683626\n\n## Stack #card \nA stack is a collection of similar items where item access is restricted for viewing (top/peek), adding (push) and deleting (pop) at one end of the stack only, referred to as the¬†**top of the stack**. Items are accessed in order Last In First Out (LIFO).\n^1689818683629\n\n## Queue #card \nA¬†**queue**¬†is a collection of similar items where item access is restricted for viewing and deleting (dequeuing) from the front of the queue, while new items can only be added (enqueued) to the back of the queue. Items are accessed in the order First In First Out (FIFO).\n^1689818683631\n\n## Priority Queue #card \nA¬†**priority queue**¬†is a collection of similar items where each item is assigned a ranking or priority that determines its importance or urgency. Access is restricted for viewing and deleting from the front of the priority queue. New items, when added, move forward in the priority queue according to the priority ranking given to the item.\n^1689818683632\n\nPriority queues can be¬†**minimum ranking**, where the smallest priority item goes further to the front of the priority queue, or they can be¬†**maximum ranking**, where the largest priority item goes further to the front of the priority queue.\n\n## Dictionary #card \nA¬†**dictionary**, also known as an¬†**associated array**, is an information structure of \u003ckey, value\u003e pairs where the 'key' is used to access the 'value' items, which give more detailed information related to the 'key'.\n^1689818683634\n\n## List/Array Signatures #card\n![[List Signature.png]]\n^1689818683635\n","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/School-Subjects/Algorithmics/Algorithmics":{"title":"Algorithmics","content":"#algo #subject \n\n## Unit 1\n- Week 1: Complete [[3.1 HW Graph Worksheet.pdf|3 Tasks]] (here's [[Task 3]])\n\t- Modelled [[Goat Cabbage Wolf Hunter]]\n- Week 2: [[Writing Pseudocode|Introduction to Pseudocode]] with [[Sweet Treats Pseudocode|Sweet Treats]]\n\t- Also modelled [[Locker Door Problem]]\n- Introduction to ADTs.\n- Week 3: \n  - Lesson 1: \n    - [[Graphs as ADTs]]\n    - [[Bridge Crossing Problem]]\n  - Week 4:\n    - [[Glossary|Key Graph Terminology]]\n","lastmodified":"2023-09-07T08:27:08.47688168Z","tags":[]},"/notes/School-Subjects/Algorithmics/Glossary":{"title":"Glossary","content":"#algo \n\n## How do you notate a graph? #card\nA **graph $G=(V,E)$** is a set of vertices $V(G)$, a set of edges $E(G)$, and a relation that associates two vertices via an edge.\n^1678270591198\n\n## Adjacent Nodes #card\nTwo vertices $v$ and $w$ in graph $G$ are¬†**adjacent**, denoted $v-w$, if there is an edge between them.\n^1678270591202\n\n## Incident #card \nIf the vertex v is an endpoint of the edge e, then e and v are¬†**incident**.\n^1678270591203\n\n## Degree #card \nThe¬†**degree**¬†d(v) of a vertex v is the number of edges incident to it, counting loops twice.\n^1678270591204\n\n## Path #card \nA path is a trail in which neither vertices nor edges are repeated. A path is also a trail, thus it is also an open walk. \n![](https://media.geeksforgeeks.org/wp-content/uploads/Untitled-drawing-2-2.png)\nHere 6-\u003e8-\u003e3-\u003e1-\u003e2-\u003e4 is a Path\n^1678270591205\n\n## Complete Graph #card \nThe¬†**complete graph** is the graph ('$n$' vertices) in which every pair of vertices are adjacent.\nSince each node is connected to every other node by an edge, each node has a degree of $n-1$ and there are $\\frac{n(n-1)}{2}$ edges.\n![[Connected Graph.png]]\n^1678270591206\n\n## Bipartite Graphs #card \nA bipartite graph, also called a bigraph, is¬†a set of graph vertices decomposed into two disjoint sets such that no two graph vertices within the same set are adjacent.\n![Bipartite graph - Wikipedia](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Simple_bipartite_graph%3B_two_layers.svg/640px-Simple_bipartite_graph%3B_two_layers.svg.png)\nThis graph is bipartite because none of the red nodes connect to other nodes.\n^1678270591207\n\n## Adjacency Matrix #card \nThe¬†**adjacency matrix**¬†$A$ of a graph G with $n$ vertices is the $n\\times n$ matrix with rows and columns indexed by the vertices of $G$, where the number in the $i^{th}$ row and $j^{th}$ column of $A$ is the number of edges between the $i^{th}$ and $j^{th}$ vertex, counting loops twice.\n![AdjacencyMatrix](https://mathworld.wolfram.com/images/eps-svg/AdjacencyMatrix_1002.svg)\n^1678270591208\n\n## Walk #card \nA **walk** is going from any node to another node, and is the most general definition of this process for a graph.\n![[Walk Diagram.png]]\n^1678327509204\n\n## Trail #card \nA¬†**trail**¬†is a walk with no repeated edge.\n^1678270591209\n\n## Oath #card \nA¬†**oath**¬†is a walk with no repeated vertex.\n^1678270591210\n\n## Circuit #card \nA¬†**circuit**¬†is a trail whose first and last vertices are the same.\n^1678270591211\n\n## Cycle #card \nA¬†**cycle**¬†is a circuit with no repeated vertex other than the first and last vertex.\n![[Cycle Diagram.png]]\n^1678270591212\n\n## Length #card \nThe length of a walk, trail, path, circuit, or cycle in a graph is the number of edges in it (counting repeated edges multiple times).\n^1678270591213\n\n## Connected #card \nA graph G is¬†**connected**¬†if, for every pair of vertices in G, there exists a path between them.\n^1678270591214\n\n## Subgraph #card \nA¬†**subgraph**¬†H of a graph G is a graph such that V (H) is a subset of V (G) and E(H) is a subset of E(G).\n^1678270591215\n\n## Eulerian Circuit #card \nA¬†**Eulerian circuit**¬†of a graph G is a circuit which contains every edge of G.\n^1678270591216\n\n## Hamiltonian Cycle #card \nA¬†**Hamiltonian cycle**¬†of a graph G is a cycle which contains every vertex of G.\n^1678270591217\n\n## Neighbourhood #card \nThe¬†**neighbourhood**¬†of a vertex v is the set of vertices adjacent to v.\n^1678270591218\n\n## Tree #card \nA¬†**tree**¬†is a connected graph with no cycles.\n![[Tree Diagram.png]]\n^1678270591219\n\n## Leaf #card \nA¬†**leaf**¬†of a tree is a vertex of degree 1.\n^1678270591220\n\n## Spanning Subgraph #card\nA subgraph that is obtained only by edge deletions, so it therefore contains all the vertices of the original graph.\n^1678270591221\n\n## Distance #card \nThe¬†**distance**¬†between two vertices v and w is the length of the shortest path between them.\n^1678327509207\n\n## Forest #card \nA¬†**forest**¬†is a graph with no cycles. (and it only wouldn't be connected if there are multiple trees within the forest)\n^1678327509208\n\n## Diameter #card \nThe longest shortest path from any node to another. This means that is the maximum distance to get from any node to another.\n![](https://media.geeksforgeeks.org/wp-content/uploads/g1.jpg.jpg)\nThe diameter here would be 3!\n^1678327509209\n\n## Radius #card\nThe radius of a graph is the minimum distance you can take to get to any other node from a central node. For example, in this graph, C can get to any other node in 2 moves, so the radius would be 2.\n![[Radius Diagram.png]]\n^1678327509210\n\n## Eccentricity #card\nThe eccentricity is of a vertex is the maximum distance between the vertex and any other vertex. Below is a graph with each node labelled with its eccentricity.\n![enter image description here](https://i.stack.imgur.com/rHkBT.png)\n^1678327509211\n\n## Digraph #card \nA directed graph, or digraph, is a graph where each edge has a direction.\n![](https://media.geeksforgeeks.org/wp-content/uploads/20200630114438/directed.jpg)\nA digraph is strongly connected if there is a directed path from every vertex to every other vertex in the graph.\n^1678327509212\n\n## DAGs #card \nA directed graph that is acyclic (contains no cycles) is known as a DAG. All trees are DAGs with the added restriction that each child only has one parent.\n^1678327509213\n## Algorithm #card \nAn algorithm is a step-by-step process that describes how to solve a problem and/or complete a task, and which will always give the correct result.¬†\nAlgorithms are often expressed using a loosely defined language called¬†pseudocode, which is a hybrid language combining standard English with structures used in coding/programming languages.","lastmodified":"2023-09-07T08:27:08.480881714Z","tags":[]},"/notes/School-Subjects/Algorithmics/Graph-Algorithms":{"title":"Graph Algorithms","content":"#algo \n\n## Breadth First Search (BFS) #card \nBFS is a graph traversal algorithm that visits all neighbours of a source node, and keeps visiting neighbours of neighbours until the entire graph is traversed.\n**BFS algorithm step-by-step**\n1.  Add the initial node to the¬†**queue**¬†and mark it as¬†**seen**.\n2.  Remove the next element from the¬†**queue**¬†and call it¬†**current**.\n3.  Get all neighbours of the¬†**current**¬†node that are not yet marked as¬†**seen**.\n4.  Store all these neighbours into the¬†**queue**¬†and mark them all as¬†**seen**.\n5.  Repeat steps¬†**2 - 4**¬†until the¬†**queue**¬†becomes empty.\n![[Graph Algorithms.png]]\n^1684293406145\n\n## Depth First Search (DFS) #card\nDFS is a graph traversal algorithm that chooses any single neighbour node for each discovered node and proceeds searching from it. This produces long branches, because searching from other neighbours is only carried out once a branch has been fully explored.\n- Design Pattern: Decrease \u0026 Conquer ‚àµ grows MST by cheapest edge possible that does not make a cycle\n**DFS algorithm step-by-step**\n1.  Add the initial node to the¬†**stack**.\n2.  Remove the next element from the¬†**stack**¬†and call it¬†**current**.\n3.  If the¬†**current**¬†node was¬†**seen**¬†then skip it (go to step¬†**6**).\n4.  Otherwise mark the¬†**current**¬†node as¬†**seen**.\n5.  Get all neighbours of the¬†**current**¬†node and add all of them to the¬†**stack**.\n6.  Repeat steps¬†**2 - 5**¬†until the¬†**stack**¬†becomes empty.\n**Difference from BFS**\n-   We use a¬†**stack**¬†instead of the¬†**queue**¬†for storing nodes.\n-   Typically we do not check whether a node was¬†**seen**¬†when storing neighbours in the stack¬†‚Äì instead we perform this checking when retrieving the node from it.\n^1684293406148\n\n## Applications of DFS and BFS #card \n-   DFS and BFS will both give information about whether one node is connected to another via any path in a graph.\n-   If the graph¬†**is**¬†connected, BFS will visit all of its nodes.\n-   The traversal tree built by BFS represents the shortest paths from the initial vertex to any other for an unweighted graph.\n-   DFS is unsuitable for searching shortest paths for unweighted graphs.\n^1684293406149\n\n## Graph Colouring #card \nGraph colouring or vertex colouring is the process of colouring a graph such that no adjacent vertices have the same colour. A $k$-colouring of a graph uses $k$ colours, and the chromatic number is the minimum value of $k$ for which a $k$ colouring exists.\nApplications are generally to resolve conflicts, where certain objects cannot be next to each other or certain events cannot run at the same time.\nThese generally end up being **optimal resource allocation** problems.\n^1684293406150\n\n## Detecting Cycles #card \nDFS is used to detect cycles! With a small modification to DFS to maintain a list of visited nodes as well as processed nodes, DFS can detect cycles, and if a we visit a node we have already visited, a cycle is detected.\n^1684293406151\n\n## Topological Sorting #card \nThe DFS order of the processed list is the topological sorting, normally run from a source node. \nOne problem that can be solved by divide and conquer is topological sorting.¬†**Topological sorting**¬†is the ordering of information according to its dependencies and is typically represented by a directed graph showing the order of progress for a particular system.\n^1684293406152\n\n## Shortest Path in Unweighted Graphs #card \nBFS is used to find the shortest path in unweighted graphs from one node to another. By rippling out in layers from the starting node, it can find the first path to the end node.\n^1684293406153\n\n## Spanning Tree #card \nA¬†**spanning tree**¬†is a connected graph that has no circuits or cycles and which includes all the vertices or nodes of a graph.\nA¬†**minimum spanning tree**¬†(MST) is a spanning tree for a weighted graph whose edges add up to the smallest possible value.\n^1684293406154\n\n## Prim's Algorithm #card \n**Prim's Algorithm** is a greedy algorithm used for finding the MST in weighted undirected graphs.\n- Design Pattern: Marks each processed node and reduces problem sizer by one node in each iteration until all nodes processed\n**Prim's algorithm in plain English**\n1.  Begin at any vertex.\n2.  Select the¬†**cheapest**¬†(minimum-weight)¬†edge emanating from the vertex.\n3.  Look at edges coming from the vertices selected so far: select the¬†cheapest¬†edge; if the edge forms a circuit, discard it and select the next cheapest.\n4.  Repeat until all vertices have been selected.\n5.  Double-check by repeating the process with a different starting vertex.\n^1684293406155\n\n## Dijkstra's Algorithm #card \nDijkstra's algorithm finds the shortest path from the starting location to any other location, not just the desired destination. The algorithm works on weighted graphs and weighted digraphs,¬†**where no negative weight cycles exist.** \nDijkstra's algorithm is a¬†**greedy**¬†algorithm¬†‚Äì that is, one that starts at a given source node in a weighted graph and expands all possible paths from this node using the weights on the edges to all the immediate neighbours. It then repeats this process from the cheapest-cost neighbour at this point in the algorithm.¬†\nAs it calculates the shortest path, it marks nodes that have been explored and expanded to their immediate neighbours as 'visited' until all the nodes in the graph have been explored, processed, expanded and visited.\nWhen all nodes have been processed, the shortest path from the source node will have been calculated for all the other nodes in the graph.\n```\nWhile there are unvisited vertices do\n  find the vertex (V) with the smallest distance in the unvisited vertices list\n  remove V from the unvisited vertices list\n  for each neighbour (N) of vertex V do\n    thisDist:=distance to V plus the weight of the edge V-N\n    if thisDist \u003c distance to N then\n      A shorter path to N has been found\n      Update the shortest path to N distance to N := thisDist\n      set the shortest path predecessor to N as V\n^1684293406156\n\n    End if\n  End do\nEnd do\n```\n\n## Bellman-Ford Algorithm #card \nBellman-Ford, like Dijkstra's uses relaxation to find the shortest path, but it can also *detect* that a negative cycle exists. It will not be able to find the shortest path if this cycle exists. This being said, Bellman-Ford *works* on graphs with negative edge weights, but not negative cycles.\n**Unlike Dijkstra‚Äôs algorithm, the Bellman-Ford algorithm is not greedy and does not use a priority queue to process the edges.**\n^1684293406157\n\n## Dijkstra's vs Bellman-Ford vs Floyd-Warshall #card \n- Dijkstra's: shortest path from **one** node to all nodes\n- Bellman-Ford: shortest path from **one** node to all nodes, negative edges **allowed**\n- Floyd-Warshall's Shortest Path: shortest path between **all** pairs of vertices, negative edges allowed\nNegative cycles are not allowed in any of these algorithms, because shortest path doesn't make sense for negative cycles.\n^1684293406158\n","lastmodified":"2023-09-07T08:27:08.480881714Z","tags":[]},"/notes/School-Subjects/Algorithmics/Halting-Proof":{"title":"Halting Proof","content":"Let $H(a,i)$ be function that tells if $a$ halts given $i$ as an input.\nLet $H+(a,i)$ be the function that does the opposite.\n\nWhat will the output of $H+(H, H)$ be?\n\n```python\ndef H(algo: function, input: string):\n\treturn will algo halt with input\n\ndef H+(algo: H(a, i)):\n\tif H(algo, input) == true:\n\t\trepeat forever/don't halt\n\telse:\n\t\tterminate/halt\n\nprint(H+(H)) // should be a syntax error for datatype\n```\n\n```python\ndef addnum():\n\treturn 5 * int\n\naddnum(addnum)\n```\n\n```\nf(g) = |the minimum value of g|\nf(f) = 0\n```\ng(x) = f(x)+limx-\u003e 0\n\ng(x) = x^2","lastmodified":"2023-09-07T08:27:08.480881714Z","tags":[]},"/notes/School-Subjects/Algorithmics/SAT/Garvs-SAT-Friendship-Network":{"title":"Algorithmics SAT - Friendship Network","content":"\nThe general problem of planning trips with friends can be made more specific by considering scenarios for hangouts. In this particular scenario, my friends have decided that we want to travel in one big travel party and I will start and end my day at my house, picking up all my friends along the way. This form of hangout is quite common with my friends, where we pick up people along the way to get to a final destination.\nThe algorithm will find the quickest route to pick up all my friends, go to our desired location(s), and drop them all off before I go back to my own house. It will then return to me the traversal path, the time taken, and my cost for transport throughout the day.\n\n## Information to Consider\n\nThe following is key information to consider when modelling the real life problem. This will be done by representing the problem with an undirected network/graph, as all public transport methods go both ways, just at different times depending on the transport method.\n\n### Node Representation\n\nNodes represent key landmarks such as train stations, bus stops or a tourist attraction.\n\n### Edge Representation\n\nEdges represent a route (train, bus, tram, walking, etc) from one location to another\n\n### Weight Representation\n\nThe edge weights will represent:\n\n- the time taken to travel from one house to the other\n- the financial cost of the route, with buses being more expensive than trains, which are more expensive than walking, etc. These can be interchanged to prioritise the certain attribute, such as time or money being of higher importance in the algorithm.\n\n### Additional Information Modelled Outside Graph\n\nThe following would be modelled as dictionaries:\n\n- The arrival time/timetable of buses and trains\n- The cost of changing lines\n- Attributes of each friend, such as name, home, the time they wake up, the amount of time they take to get ready, and who is friends with whom or to what degree.\n- Proximity to all friends' houses (by walking), which would be a dictionary for each node separately. This information could be used to add further complications to make the model reflect real life more closely, such as different friends being ready earlier than others or requiring a certain number of \"close friends\" (by threshold) to be within the travel party at all times.\n\n## Abstract Data Types\n\nI have selected a number of stations, bus stops and locations which I feel are relevant to my friend group.\n\n| Property                     | Stored as                                                    | Notes                                                                                                                                                                 |\n| ---------------------------- | ------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Key Landmarks                | Node                                                         |                                                                                                                                                                       |\n| Landmark Name                | Node Attribute                                               |                                                                                                                                                                       |\n| Route                        | Edge                                                         |                                                                                                                                                                       |\n| Route Name                   | Edge Attribute                                               |                                                                                                                                                                       |\n| Transport Method/Line        | Edge Colour                                                  |                                                                                                                                                                       |\n| Time or Cost                 | Edge Weight                                                  | These can be interchanged to prioritise different aspects. Distance is more relevant than time, but cost may be important as well.                                    |\n| Time/Cost of Changing Lines  | Node attribute \"interchange_cost\" \u0026 \"interchange_time\"       |                                                                                                                                                                       |\n| Train and Bus Timetable      | Dictionary: Dict¬´String: Array¬´Dict¬´String: Int or String¬ª¬ª¬ª | Keys would be each line (bus or train), and the values would be arrays of dictionaries with what node they are at, arrival times and departure times.                 |\n| Attributes of Each Friend    | Dictionary: Dict¬´String: Dynamic¬ª                            | This will be a json style nested dictionary that has various attributes about each friend, such as waking up time, other close friends and other relevant information |\n| Proximity to Friends' Houses | Node Attribute: Dict¬´String: Float¬ª                          | Proximity of all houses as an attribute for each node, which has keys as friends' names and values as the distance or time to their house                             |\n\n## Possible Graph\n\n![Possible Graph](https://github.com/garv-shah/brain/blob/hugo/content/notes/Attachments/Algorithmics/Possible%20Friendship%20Network.png?raw=true \"Possible Graph\"){ height=360px } \n\n### Final Graph\n\n![Final Graph](https://github.com/garv-shah/brain/blob/hugo/content/notes/Attachments/Algorithmics/Garv's%20SAT-%20Friendship%20Network%20Final.png?raw=true \"Final Graph\"){ height=360px } \n\n## Signatures\n\n| Function Name    | Signature                                                           |\n| ---------------- | ------------------------------------------------------------------- |\n| add_landmark     | \\[name, timetable, latlong_coordinates] -\u003e node                     |\n| add_route        | \\[start_node, end_node, travel_method, time, line?] -\u003e edge         |\n| add_line         | \\[colour, zone, timetable] -\u003e dictionary                            |\n| add_friend       | \\[name, latlong_coordinates] -\u003e dictionary                          |\n| setup_graph      | \\[landmarks, routes, friends, timetable] -\u003e graph                   |\n| latlong_distance | \\[coord1, coord2] -\u003e floating point number                          |\n| calculate_nodes  | \\[friend_data, node_data] -\u003e dictionary\u003cstring, node or float\u003e      |\n| calculate_prices | \\[line_data, hamiltonian_path, concession, holiday] -\u003e float        |\n| dist             | \\[start, end, current_time] -\u003e float                                |\n| fetch_djk        | \\[start, end, graph, current_time] -\u003e dictionary with cost and path |\n| dijkstras        | \\[start, end, graph, current_time] -\u003e cost and path                 |\n| held_karp        | \\[start, end, visit, current_time] -\u003e cost and path                 |\nFunction signatures can also be found within the `main.py` Python file as comments within the code\n\n## Algorithm Selection\n\nWhile simplifying my problem, I found that starting and ending my day at my house while picking up all my friends along the way is simply an applied version of finding the shortest hamiltonian circuit. In other words, the shortest cost circuit that will visit every node that is needed to be visited to pick up my friends.\n\nWhile researching into how to solve this, I found that this was a classic example of the travelling salesman problem, which turns out to be an NP-hard problem. This means that there currently exists no exact solution to the problem in polynomial time, and the best I can currently do is the Held‚ÄìKarp algorithm, which has a time complexity of $O(n^{2}2^{n})$ which is not ideal at all in terms of efficiency, but will have to be sufficient for the use cases of this project.\n\n### Node Selection Algorithm\n\nBefore we can find the shortest circuit that visits a set of nodes, we need to know what nodes to visit in the first place!\nEach node, which is part of the public transport network, can be assigned latitude and longitude coordinates, and these can be compared with the coordinates of each of my friends' houses to determine the shortest distance they would need to walk to reach a transport hub that is represented as a node on our graph.\n\nThe process of finding the nodes can then $\\therefore$ be represented as the following informal steps:\n1. Get the latitude and longitude coordinates of all transport hubs and friends' houses.\n2. Loop over all friends and transport hubs, comparing the distance of each to find the closest transport hub to each friend.\n3. Finally store each friends' closest transport hub and distance into their respective dictionary entries.\n\nThe question still remains though: how can we find the distance between two lat/long coordinates? The answer is the [haversine formula](https://en.wikipedia.org/wiki/Haversine_formula)!\n\n#### The Haversine Formula\n\nThe haversine formula determines the distance between two points on a sphere given their latitude and longitude coordinates. Using the distance formula $\\sqrt{(y_{2}-y_{1})^2+(x_{2}-x_{1})^2}$ may be sufficient in terms of finding the closest transport hub, but the distances it provides only work on a flat cartesian plane, not spheres like the earth, distances which could be used for later computation such as time taken to walk to the transport hubs.\n\nThe haversine formula can be rearranged given that the Earth's radius is 6371km to give us the following equation (with $d$ representing the distance between two locations):\n\n$\\Delta lat=lat_{1}-lat_2$\n$\\Delta long=long{1}-long_2$\n$R=6371$\n\n$a¬†=¬†\\sin^{2}(\\frac{\\Delta lat}{2})¬†+¬†\\cos(lat_{1})\\cos(lat_{2})\\sin^{2}(\\frac{\\Delta long}{2})$\n$c¬†=¬†2\\operatorname{atan2}(\\sqrt{a},¬†\\sqrt{1-a})$\n$d¬†=¬†R\\times c$\n\nIt *is* somewhat long on not the cleanest formula, but it should be more than sufficient in our code.\n\n#### Pseudocode\n\nFinally we can use the informal steps above to construct the following pseudocode:\n```\ndistance_dict: dictionary = {}\n\nfunction calculate_nodes (\n\tfriend_data: dictionary,\n\tnode_data: dictionary\n):\n\tfor friend in friend_data:\n\t\thome: tuple = friend['home']\n\t\t// initial min vals that will be set to smallest iterated distance\n\t\tmin: float = infinity\n\t\tmin_node: node = null\n\t\t\n\t\tfor node in node_data:\n\t\t\tlocation: tuple = node['coordinates']\n\t\t\t// find real life distance (functional abstraction)\n\t\t\tdistance: float = latlong_distance(home, location)\n\t\t\tif distance \u003c min:\n\t\t\t\tmin = distance\n\t\t\t\tmin_node = node\n\t\t\n\t\tdistance_dict[friend]['min_node'] = min_node\n\t\tdistance_dict[friend]['distance'] = min\nend function\n```\n\nThis combines the haversine formula and simple iteration to find the minimum distance node for each and stores it into a dictionary. When translated to Python, the above code looks like this:\n```python\ndef lat_long_distance(coord1, coord2):\n    # assign lat/long from coords\n    lat1 = coord1[0]\n    long1 = coord1[1]\n    lat2 = coord2[0]\n    long2 = coord2[1]\n\n    # radius of earth\n    r = 6371\n\n    # equation definitions from haversine formula\n    phi_1 = math.radians(lat1)\n    phi_2 = math.radians(lat2)\n\n    delta_phi = math.radians(lat2 - lat1)\n    delta_lambda = math.radians(long2 - long1)\n\n    a = math.sin(delta_phi / 2.0) ** 2 + math.cos(phi_1) * math.cos(phi_2) * math.sin(delta_lambda / 2.0) ** 2\n\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    # distance in kilometers\n    d = r * c\n\n    return d\n\n\ndef calculate_nodes(friend_data, node_data):\n    distance_dict = {}\n    for friend in friend_data:\n        friend_home = friend_data[friend]['home']\n        # initial min vals that will be set to smallest iterated distance\n        min_dist = float('inf')\n        closest_node = None\n\n        for node in node_data:\n            location = node_data[node]\n            distance = lat_long_distance(friend_home, location)\n            if distance \u003c min_dist:\n                min_dist = distance\n                closest_node = node\n\n        distance_dict[friend] = {}\n        distance_dict[friend]['closest_node'] = closest_node\n        distance_dict[friend]['distance'] = min_dist\n    return distance_dict\n```\n\nThe output of this code on our data set is as follows:\n```\n{\n    'Garv': {'min_node': 'Brandon Park', 'distance': 0.4320651871428905},\n    'Grace': {'min_node': 'Caulfield', 'distance': 3.317303898425856},\n    'Sophie': {'min_node': 'Camberwell', 'distance': 10.093829041341555},\n    'Zimo': {'min_node': 'CGS WH', 'distance': 1.0463628559819804},\n    'Emma': {'min_node': 'Wheelers Hill Library', 'distance': 2.316823113596007},\n    'Sabrina': {'min_node': 'CGS WH', 'distance': 1.0361159593717744},\n    'Audrey': {'min_node': 'CGS WH', 'distance': 6.99331705920331},\n    'Eric': {'min_node': 'Glen Waverley', 'distance': 2.591823985420863},\n    'Isabella': {'min_node': 'CGS WH', 'distance': 2.048436485663766},\n    'Josh': {'min_node': 'CGS WH', 'distance': 0.656799522332077},\n    'Molly': {'min_node': 'Wheelers Hill Library', 'distance': 7.559508844793643},\n    'Avery': {'min_node': 'Mount Waverley', 'distance': 6.312529532145972},\n    'Sammy': {'min_node': 'Brandon Park', 'distance': 3.408577759087159},\n    'Natsuki': {'min_node': 'CGS WH', 'distance': 6.419493747390275},\n    'Liam': {'min_node': 'Mount Waverley', 'distance': 0.8078481833574709},\n    'Nick': {'min_node': 'Glen Waverley', 'distance': 1.3699143560496139},\n    'Will': {'min_node': 'Wheelers Hill Library', 'distance': 6.404888550878483},\n    'Bella': {'min_node': 'Wheelers Hill Library', 'distance': 0.7161158445537555}\n}\n```\nIf it takes any of my friends' more than 20 minutes to walk to their transport location, I'd probably want a little warning advising me to consider adding closer transport hubs, because that seems like an awfully long time to walk! This can be done by considering the average human walking speed of $5.1 \\textrm{km/h}$. Dividing their distance to transport hubs by this constant should give a good approximation of walking time.\nThis gives the following list of friends that it would be too long for, and we can consider expanding our graph for better results:\n```\nWarning! These 11 friends have to walk more than 20 minutes in order to get to their transport hub. Possibly consider adding hubs closer to their houses:  Grace (39.03), Sophie (118.75), Emma (27.26), Audrey (82.27), Eric (30.49), Isabella (24.1), Molly (88.94), Avery (74.27), Sammy (40.1), Natsuki (75.52) and Will (75.35)\n```\n\n#### Evaluation of Solution\n\nThe solution above works alright for short distances, but slightly breaks apart the further you have to go. This is because humans in the real world have to walk across set designated pathways that the algorithm is not aware of, which is simply calculating the direct distance, which could be walking directly through houses or shopping centres. As such, the distances and times taken for walking are very much approximations in this model that could be further refined by a path finding algorithm that has an awareness of roads and pathways, but as that is an immense amount of data, this approximation will have to suffice for the purposes of this SAT.\n\n### Fare Cost Calculation Algorithm\n\nAs well as the time taken to pick up all my friends, it would be useful for the algorithm to tell me how much the trip costs in ride fairs. PTV uses a \"zoning system\" that charges different for the zones you are in. It also charges a set rate for under 2 hours of travel, and a seperate \"daily rate\" for any more than that:\n\n| 2 hour     | Zone 1 + 2 | Zone 2 |\n| ---------- | ---------- | ------ |\n| Full Fare  | $4.60      | $3.10  |\n| Concession | $2.30      | $1.55  |\n\n| Daily      | Zone 1 + 2 | Zone 2 |\n| ---------- | ---------- | ------ |\n| Full Fare  | $9.20      | $6.20  |\n| Concession | $4.60      | $3.10  |\n\nThere are also caps on public holidays and weekends set to $6.70 for full-fare users and $3.35 to concession users. Zone 0 can be used to denote the free zone as well, or transport methods such as walking or cycling that have no associated cost.\n\nThis can be setup into the following conditional statements in pseudocode to calculate fare prices:\n```\nfunction calculate_prices (\n\tline_data: dictionary,\n\thamiltonian_path: dictionary,\n\tconcession: boolean,\n\tholiday: boolean\n):\n\tzones: set = {}\n\t// add all traversed zones into a set to see which zones were visited\n\tfor node in hamiltonian_path['path']:\n\t\tzones.add(line_data[node['line']]['zone'])\n\t\t\n\tmoney = 0\n\t\n\t// if it took us 2 hours or less\n\tif hamiltonian_path['time'] \u003c= 120:\n\t\t// 2 hour bracket\n\t\tif zones has 1 and 2:\n\t\t\tif concession:\n\t\t\t\tmoney = 2.30\n\t\t\telse:\n\t\t\t\tmoney = 4.60\n\t\telse if zones has 2:\n\t\t\t// just zone 2\n\t\t\tif concession:\n\t\t\t\tmoney = 1.55\n\t\t\telse:\n\t\t\t\tmoney = 3.10\n\telse:\n\t\t// daily fare bracket\n\t\tif zones has 1 and 2:\n\t\t\tif concession:\n\t\t\t\tmoney = 4.60\n\t\t\telse:\n\t\t\t\tmoney = 9.20\n\t\telse if zones has 2:\n\t\t\t// just zone 2\n\t\t\tif concession:\n\t\t\t\tmoney = 3.10\n\t\t\telse:\n\t\t\t\tmoney = 6.20\n\t\n\t// if it is a weekend or a holiday\t\t\t\n\tif holiday:\n\t\tif concession and money \u003e 3.35:\n\t\t\tmoney = 3.35\n\t\telse if money \u003e 6.70:\n\t\t\tmoney = 6.70\n\t\n\treturn money\nend function\n```\n\n### Held-Karp Algorithm\n\nThe Held-Karp algorithm is a method for finding the exact shortest hamiltonian circuit in the exponential time complexity of $O(n^{2}2^{n})$, which is much better than if we to brute force it, which would have a complexity of $O(n!)$.\n\nThe Travelling Salesman problem does not allow us to be greedy, because for us to choose the best choice at any moment, we have to be able to discard all other solutions. TSP is too complex for this, as going down any node may lead to a shorter solution later on. Because of this, solving for the TSP has to use the decrease and conquer principle to make our problem smaller piece by piece, which can be done by recursion or using dynamic programming if the results of operations are saved.\n\nHeld-Karp works by utilising the the following information.\n\nLet $A =$ starting vertex\nLet $B =$ ending vertex\nLet $S = \\{P, Q, R\\}$ or any other vertices to be visited along the way.\nLet $C \\in S$ (random node in $S$)\n\nWe $\\therefore$ know that the minimum cost of going from $A$ to $B$ while visiting all nodes in the set $S$ can be split up into the following two parts:\n- Going from $A$ to $C$ (a random node in $S$) while visiting all nodes in the set $S$ besides $C$\n- Going from $C$ to $B$ directly\nEssentially, this goes through the set $S$ and makes any node $C$ the last node, giving us the same problem with a smaller set. This then allows us to identify that the problem is recursive, as the larger path can be split up into smaller and smaller sub-paths by the above logic, until we reach a base case of $S$ having length 0, where we can then just calculate the direct distance.\n\nTo reiterate more formally: $\\textrm{Cost}_{\\textrm{min}} \\space A \\rightarrow B \\space \\textrm{whilst visiting all nodes in S}$ = $\\textrm{min}(\\textrm{Cost} \\space A \\rightarrow C \\space \\textrm{visiting everything else in S} + d_{CB})$. As such, we can find the smallest cost hamiltonian path by gradually building larger and larger subpaths from the minimum cost to the next node in $S$, using dynamic programming to combine the subpaths to form the larger hamiltonian path.\n\nThis logic leads to the following pseudocode:\n\n```\nfunction held_karp (\n    start: node,\n    end: node,\n    visit: set\u003cnode\u003e\n):\n\t// base case: if no visit set then we can just return direct distance\n    if visit.size = 0:\n        return dist(start, end)\n    else:\n        min = infinity\n        // find the minimum subpath\n        For node C in set S:\n\t        // uses property described above to split larger path into smaller subpath, and solves recursively\n\t        sub_path = held_carp(start, C, (set \\ C))\n\t        cost = sub_path + dist(C, end)\n\t        if cost \u003c min:\n\t            min = cost\n\t    return min\nend function\n```\n\nAfter being implemented in Python (with a slight modification to return the path as well), this pseudocode looks like this:\n\n```python\ndef held_karp(start, end, visit):\n    if type(visit) is not set:\n        print(\"Error: visit must be a set of nodes\")\n        return {'cost': float('inf'), 'path': None}\n    if len(visit) == 0:\n        return {'cost': dist(start, end), 'path': [start, end]}\n    else:\n        minimum = {'cost': float('inf')}\n        for rand_node in visit:\n            sub_path = held_karp(start, rand_node, visit.difference({rand_node}))\n            cost = dist(rand_node, end) + sub_path['cost']\n            if cost \u003c minimum['cost']:\n                minimum = {'cost': cost, 'path': sub_path['path'] + [end]}\n        return minimum\n```\n\n#### The Infinite Distance Problem\nThe problem with this implementation is that it currently only works with complete graphs, where the distance between any two given nodes will not be infinity. This becomes clear if we try and find the cost of going from Oakleigh to Melbourne Central while visiting Caulfield along the way. The pseudocode would choose Caulfield as the value for $C$, as it is the only node in the set. The issue is at line `12`, as the algorithm would try and get the distance between Caulfield and Melbourne Central, but as there is no edge between these two nodes, it will return $\\infty$.\n\nThis can be solved by using [[#dijkstras-algorithm|Dijkstra's Algorithm]], instead of the `dist` function, which will instead find the shortest path (and $\\therefore$ distance) between any two given nodes. (the justification of this specific algorithm selection is evaluated and challenged [[#dijkstras-algorithm-vs-floyd-warshalls-shortest-path-algorithm|here]])\n\nAfter this modification, our hybrid algorithm works great!\n\n```\nLet's say I have 5 friends, they live closest to the following nodes: Caulfield, Mount Waverley, Glen Waverley, Melbourne Central and Chadstone\n\nThe following would be the fastest path to go from my house (Brandon Park) to all my friends' and back:\n\n{'cost': 182, 'path': ['Brandon Park', 'Wheelers Hill Library', 'CGS WH', 'Glen Waverley', 'Mount Waverley', 'Richmond', 'Parliament', 'Melbourne Central', 'Flinders Street', 'Caulfield', 'Chadstone', 'Oakleigh', 'Brandon Park']}\n```\n\n### Dijkstra's Algorithm\n\nDijkstra's Algorithm is a method for finding the shortest path between any two given nodes in a weighted graph, given that the weights are non-negative. If some of the weights were negative, the Bellman-Ford Algorithm could also be used to find the shortest path between two vertices, but as this is not the case for our model (a method of transport cannot take you negative time to get somewhere), Dijkstra's Algorithm is preferred for simplicity.\n\nDijkstra's Algorithm is a greedy algorithm, which actually finds the distance between a node and every other node on the graph. It does this based on the notion that if there were a shorter path than any sub-path, it would replace that sub-path to make the whole path shorter. More simply, shortest paths must be composed of shortest paths, which allows Dijkstra's to be greedy, always selecting the shortest path from \"visited\" nodes, using the principle of relaxation to gradually replace estimates with more accurate values.\n\nDijkstra's Algorithm follows the logic outlined by the following pseudocode:\n\n```\nfunction dijkstras (\n    start: node,\n    end: node,\n    graph: graph\n):\n    // Set all node distance to infinity\n    for node in graph:\n        distance[node] = infinity\n        predecessor[node] = null\n        unexplored_list.add(node)\n    \n    // starting distance has to be 0\n    distance[start] = 0\n    \n    // while more to still explore\n    while unexplored_list is not empty:\n        min_node = unexplored node with min cost\n        unexplored_list.remove(min_node)\n    \n\t    // go through every neighbour and relax\n        for each neighbour of min_node:\n            current_dist = distance[min_node] + dist(min_node, neighbour)\n            // a shorter path has been found to the neighbour -\u003e relax value\n            if current_dist \u003c distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n    \n    return distance[end]\nend function\n```\n\nAfter being implemented in Python (with a slight modification to return the path as well), the pseudocode looks like this:\n\n```python\ndef dijkstra(start, end):\n    # set all nodes to infinity with no predecessor\n    distance = {node: float('inf') for node in g.nodes()}\n    predecessor = {node: None for node in g.nodes()}\n    unexplored = list(g.nodes())\n\n    distance[start] = 0\n\n    while len(unexplored) \u003e 0:\n        min_node = min(unexplored, key=lambda node: distance[node])\n        unexplored.remove(min_node)\n\n        for neighbour in g.neighbors(min_node):\n            current_dist = distance[min_node] + dist(min_node, neighbour)\n            # a shorter path has been found to the neighbour -\u003e relax value\n            if current_dist \u003c distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n\n    # reconstructs the path\n    path = [end]\n    while path[0] != start:\n        path.insert(0, predecessor[path[0]])\n\n    return {'cost': distance[end], 'path': path}\n```\n\n### Considering Train/Bus Arrival Times \u0026 Switching Lines\n\nEvidently, trains do not leave immediately when you get to the station, and neither do buses. The algorithm thus far assumes no waiting time during transit, and as anyone who has used public transport would know, this is not realistic.\nAs such, the arrival time of trains and buses needs to be considered. This also has the added benefit of factoring in the time it takes to switch lines, as this time is lost waiting for another train or bus.\n\nAll the algorithms above eventually call the `dist` function to get the direct distance between two nodes, which in and of itself is an abstraction of a distance matrix. By taking the input of the current time, the `dist` function can consider how long one must wait for a bus/train to arrive at the node, and modify the edge weights according, returning a larger cost for edges that require long wait times.\n\nThe following `dist` function takes the above into consideration:\n```\nfunction dist (\n\tstart: node,\n\tend: node,\n\tcurrent_time: datetime\n):\t\n\t// if the start and end node are the same, it takes no time to get there\n\tif start = end:\n\t\treturn 0\n\telse if edges = null:\n\t\t// if no edge exists between nodes\n\t\treturn infinity\n\t\n\tedges = edge_lookup_matrix[start][end]\n\tdistances = []\n\t\n\t// go over each possible edge between nodes (multiple possible)\n\tfor edge in edges:\n\t\tline = edge.line\n\t\t// next time bus/train will be at node (functional abstraction)\n\t\tnext_time = soonest_time_at_node(timetable, line, start, current_time)\n\t\twait_time = next_time - current_time\n\t\tdistances.add(edge.weight + wait_time)\n\t\n\treturn min(distances)\nend function\n```\n\nAfter implementing this function, an additional problem is introduced: how can the algorithms that are dependant on `dist` be aware of the current time?\n\n#### Implementing Current Time in Dijkstra's\n\nThe process for keeping track of the current time for Dijkstra's is relatively simple: it will just be the given time of day inputed into Dijkstra's + $n$ amount of minutes, where $n$ is the distance to the `min_node`. As such line 19 from the pseudocode above simply needs to be changed to the following, along with a new input of `current_time`\n```\ncurrent_dist = distance[min_node] + dist(min_node, neighbour, current_time + to_minutes(distance[min_node]))\n```\n\nThis works because distance in our algorithm is analogous to minutes, and since the `dist` function returns the correct distance initially and stores it into the distance array, subsequent calls will be using the correct distance from `distance[min_node]` along with the correct distance from the `dist` function. This informal argument by mathematical induction demonstrates the correctness of this modification, which seems to work well when tested within the algorithm.\n\n#### Implementing Current Time in Held-Karp\n\nFactoring in the current time into Held-Karp follows the same recursive nature as the algorithm itself. First we can change the base case to work with the new Dijkstra's Algorithm outlined above:\n\n```\nif visit.size = 0:\n\tdjk = dijkstras(start, end, current_time)\n\treturn djk['cost']\n```\n\nNow that our base case is returning a cost with the current time factored in, we need to make the sub path on line 11 of the original algorithm also factor in the current time. The current time when the sub_path is created will always be the current time at the start node, which we defined as the time inputed into Held-Karp at initialisation. As such, the line is changed to the following:\n\n```\nsub_path = held_carp(start, C, (set \\ C), current_time)\n```\n\nFinally, the only other change needs to be made on line 12. Previously, we replaced the `dist` function here with `dijkstras` to solve the [[#the-infinite-distance-problem|Infinite Distance Problem]], but Dijkstra's also requires the input of time. As the starting node here is $C$, or the randomly selected node, the current time for this function call would have to be the time when we are at $C$. This can simply be found by treating the distance of `sub_path` as minutes which are added to the current time, as the `sub_path` ends at the same random node $C$. As such, line 12 can be changed to the following:\n\n```\ndjk = dijkstras(C, end, current_time + toMinutes(sub_path['cost']))\ncost = sub_path['cost'] + djk['cost']\n```\n\nThis leaves us with the a sound implementation of Held-Karp factoring in time, demonstrated by the following pseudocode:\n\n```\nfunction held_karp (\n    start: node,\n    end: node,\n    visit: set\u003cnode\u003e,\n    current_time: datetime\n):\n    if visit.size = 0:\n    \tdjk = dijkstras(start, end, current_time)\n\t\treturn djk['cost']\n    else:\n        min = infinity\n        For node C in set S:\n\t        sub_path = held_carp(start, C, (set \\ C), current_time)\n\t        djk = dijkstras(C, end, current_time + toMinutes(sub_path['cost']))\n\t        cost = sub_path['cost'] + djk['cost']\n\t        if cost \u003c min:\n\t            min = cost\n\t    return min\nend function\n```\n\nThis works because of a similar principle to the informal argument for the modified Dijkstra's correctness: it works for the base case (because Dijkstra's works), and it also must work for the $k+1$ case, because the time being inputed into the functions is always the time at the starting nodes. It then $\\therefore$ works for all cases, which seems to also be true when used in practice.\n\n### Dijkstra's Algorithm vs Floyd Warshall's Shortest Path Algorithm\nThe problem that using Dijkstra's was attempting to solve was that Held-Karp treats the distance between two unconnected vertices as $\\infty$, as demonstrated [[#the-infinite-distance-problem|here]].\n\nThere are 3 main shortest path algorithms covered in Unit 3:\n1. Dijkstra's Algorithm: \n   - Shortest path from **one** node to all nodes\n   - Negative edges **not** allowed\n   - Returns **both** path and cost\n2. Bellman-Ford Algorithm:\n   - Shortest path from **one** node to all nodes\n   - Negative edges **allowed**\n   - Returns **both** path and cost\n3. Floyd-Warshall's Shortest Path Algorithm:\n   - Shortest path between **all** pairs of vertices\n   - Negative edges **allowed**\n   - Returns **only** cost\n\nAs we can see, to be able to output the traversal path, we need both the cost and the path, so Floyd-Warshall's was initially discarded because it did not do so, even if it meant that the less desirable solution of running Dijkstra's from every source node had to be used, calculating the shortest path to every other node each time.\n\nThe most optimal solution would be an algorithm that returns both the cost and the traversal order of the shortest path between *all* pairs of vertices, as this operation is carried out many times by Held-Karp.\nImplementing Floyd-Warshall's Shortest Path with the modification of a predecessor matrix (similar to Bellman-Ford and Dijkstra's) was attempted, but this requires additional recursive computation to reconstruct the path, making it not ideal in terms of efficiency.\n\nAn alternative solution, Johnson's Algorithm, is one that gives us the exact output we want: the shortest path and cost between all vertex pairs. The algorithm works by first running Bellman-Ford to account for negative edge weights (not a problem for this SAT) and then runs Dijkstra's from every source node to construct a matrix and paths for each. Surprisingly, this algorithm is comparable to the efficiency of running just normal Floyd-Warshall's, and can even be faster in some cases.\n\nAs such, the only modification that needs to be made is that instead of calling Dijkstra's *every* time a vertex pair distance and path is needed, the whole distance matrix can be constructed at once, so subsequent calls only take $O(1)$ time instead. This can be achieved using dynamic programming, by [[#caching-dijkstras-output|caching the output of Dijkstra's]] whenever it is invoked, so we are only running the algorithm as many times as we need to. \n\n## Optimisations\n\nThe optimisations below were created after the following base case:\n\n```\nLet's say I have 9 friends, they live closest to the following nodes: {'Mount Waverley', 'Melbourne Central', 'Chadstone', 'CGS WH', 'Parliament', 'Wheelers Hill Library', 'Flinders Street', 'Brighton Beach', 'Camberwell'}\nThe following would be the fastest path to go from my house (Brandon Park) to all my friends' and back:\n{'cost': 262, 'path': ['Brandon Park', 'Wheelers Hill Library', 'CGS WH', 'Glen Waverley', 'Mount Waverley', 'Richmond', 'Camberwell', 'Richmond', 'Parliament', 'Melbourne Central', 'Flinders Street', 'Brighton Beach', 'Flinders Street', 'Caulfield', 'Chadstone', 'Oakleigh', 'Brandon Park']}\n\nIt took 47.3621 seconds to run.\n```\n\nAs seen, running the above Held-Karp + Dijkstra's combination took about 50 seconds to calculate the minimal cost path for 9 nodes. The following is a table for $n \\space \\textrm{vs} \\space t$, with an approximate line of best fit of $y \\approx a \\times b^{x}$ where $a=8.1017\\times10^{-8}$ and $b=9.3505$:\n\n| $n$ (no. nodes) | $t$ (execution time in seconds, 4dp) | $y$ (line of best fit, 4dp) |\n|-----------------|--------------------------------------|-----------------------------|\n| 0               | 0.0001                               | 0.0000                      |\n| 1               | 0.0002                               | 0.0000                      |\n| 2               | 0.0002                               | 0.0000                      |\n| 3               | 0.0016                               | 0.0001                      |\n| 4               | 0.0083                               | 0.0006                      |\n| 5               | 0.0132                               | 0.0058                      |\n| 6               | 0.1090                               | 0.0541                      |\n| 7               | 0.5674                               | 0.5063                      |\n| 8               | 4.7193                               | 4.7343                      |\n| 9               | 44.2688                              | 44.2680                     |\n\nAnything above 7 nodes takes far too long, and calculating the entire hamiltonian circuit would take 5 weeks 1 day 14 hours 56 mins and 39 secs based on the line of best fit, so the following optimisations have been utilised.\n\n### Caching Dijkstra's Output\n\nWhen replacing the `dist` function with Dijkstra's Algorithm, a certain time compromise was made. `dist` has a time complexity of $O(1)$, simply fetching the distance from the distance matrix, but Dijkstra's Algorithm is relatively slower at $O(E\\log{V})$ where $E$ is the number of edges and $V$ the number of vertices. For our sample graph above, with $E = 27$ and $V = 15$, $O(E\\log{V}) \\approx 31.75$. This makes using Dijkstra's roughly 31 times slower than `dist` as it is called every time.\n\nTo avoid this, we can cache the results of Dijkstra's Algorithm to avoid running the same calculation multiple times. This can be done with the following pseudocode:\n\n```\ncached_djk = dictionary of node -\u003e dict\n\nfunction fetch_djk (\n    start: node,\n    end: node,\n):\n    if cached_djk[start] does not exists:\n        cached_djk[start] = dijkstras(start)\n    \n    djk = cached_djk[start]\n    # reconstructs the path  \n    path = [end] as queue\n    while path.back != start:\n        path.enqueue(djk['predecessors'][path.back])\n    \n    return {\n        'distance': djk['distances'][end],\n        'path': path\n    }\nend function\n```\n\nIn this case, `dijkstras` would need to be modified to return the `distance` and `predecessor` rather than just `distance[end]`.\n\nAfter being implemented in Python, `cached_djk` resembles the following:\n\n```python\ndef fetch_djk(start, end):\n    if start not in cached_djk:\n        cached_djk[start] = dijkstra(start)\n\n    djk = cached_djk[start]\n    # reconstructs the path\n    path = [end]\n    while path[0] != start:\n        path.insert(0, djk['predecessors'][path[0]])\n\n    return {'cost': djk['distances'][end], 'path': path}\n```\n\n##### Update: Caching After Timetable Considerations\n\nThe above pseudocode for `fetch_djk` breaks once considerations of train/bus arrival times are added, because for example, the time it takes to travel from Glen Waverley to Melbourne Central at 7am is not necessarily the same as the same trip at 9pm. Above, the `cached_djk` dictionary only takes the starting node into consideration, so the pseudocode has to be modified to the following to us an 'id' like system for the paths.\n\n```\ncached_djk = dictionary of node -\u003e dict\n\nfunction fetch_djk (\n    start: node,\n    end: node,\n    current_time: datetime,\n):\n\tname = start + '@' + current_time\n\t\n    if cached_djk[name] does not exists:\n        cached_djk[name] = dijkstras(start)\n    \n    djk = cached_djk[name]\n    # reconstructs the path  \n    path = [end] as queue\n    while path.back != start:\n        path.enqueue(djk['predecessors'][path.back])\n    \n    return {\n        'distance': djk['distances'][end],\n        'path': path\n    }\nend function\n```\n\nAs such we can have a more specific key in our dictionary. This does have the disadvantage of having less reusable paths (running at 7 nodes was about 4 times slower than below), but at least the result isn't nondeterministic!\n\n#### Performance Improvement\n\nAs expected by the theoretical time savings calculated above, this optimisation makes Held-Karp roughly 31 times faster. The base case from above, which took 44 - 47 seconds before the optimisation now only takes about 1.25 seconds.\n\n```\nLet's say I have 9 friends, they live closest to the following nodes: {'Parliament', 'Melbourne Central', 'Chadstone', 'Camberwell', 'Flinders Street', 'Brighton Beach', 'Mount Waverley', 'CGS WH', 'Wheelers Hill Library'}\nThe following would be the fastest path to go from my house (Brandon Park) to all my friends' and back:\n{'cost': 262, 'path': ['Brandon Park', 'Wheelers Hill Library', 'CGS WH', 'Glen Waverley', 'Mount Waverley', 'Richmond', 'Camberwell', 'Richmond', 'Parliament', 'Melbourne Central', 'Flinders Street', 'Brighton Beach', 'Flinders Street', 'Caulfield', 'Chadstone', 'Oakleigh', 'Brandon Park']}\n\nIt took 1.2799 seconds to run.\n```\n\nThe $n \\space \\textrm{vs} \\space t$ table now looks like this, with an approximate line of best fit of $y \\approx a \\times b^{x}$ where $a=1.4002\\times10^{-9}$ and $b=10.1876$:\n\n| $n$ (no. nodes) | $t$ (execution time in seconds, 4dp) | $y$ (line of best fit, 4dp) |\n|-----------------|--------------------------------------|-----------------------------|\n| 0               | 0.0001                               | 0.0000                      |\n| 1               | 0.0001                               | 0.0000                      |\n| 2               | 0.0001                               | 0.0000                      |\n| 3               | 0.0001                               | 0.0000                      |\n| 4               | 0.0001                               | 0.0000                      |\n| 5               | 0.0005                               | 0.0002                      |\n| 6               | 0.0060                               | 0.0016                      |\n| 7               | 0.0287                               | 0.0159                      |\n| 8               | 0.2148                               | 0.1625                      |\n| 9               | 1.6055                               | 1.6551                      |\n| 10              | 17.4555                              | 16.8620                     |\n| 11              | 171.6719                             | 171.7832                    |\n| 12              | 1750.1065                            | 1750.0590                   |\n\nWe can see that this line of best fit is relatively accurate, and if we extend it to run for 14 nodes (our hamiltonian circuit), it would take a total of about 2 days 2 hours 27 mins and 14 secs to compute it all.\n\n## Justification of Solution\n\nThroughout this report, each individual algorithm has been challenged and justified for it's suitability and effectiveness at solving their individual problems. To evaluate the overall suitability of the combined algorithms, we can refer back to our original problem:\n\n\u003e I've been finding it hard to plan hangouts with my friends, and I want a solution that will plan a trip using the Victorian public transport network so that can find the quickest route to pick up all of my friends and we can all come back to my house.\n\nIn reality, this is a relatively niche use case, as most friends *could* just travel on their own, but given that I want to pick up all my friends along the way, this solution its suitability and fitness for purpose well.\n\nBelow is the output of the solution when I (`Garv`, with a concession card) leave my house at `8:30am` , on a Saturday:\n\n```\nI have 18 friends and they live closest to the following 7 nodes:\nGrace lives 3.317km from Caulfield\nSophie lives 10.094km from Camberwell\nZimo lives 1.046km from CGS WH\nEmma lives 2.317km from Wheelers Hill Library\nSabrina lives 1.036km from CGS WH\nAudrey lives 6.993km from CGS WH\nEric lives 2.592km from Glen Waverley\nIsabella lives 2.048km from CGS WH\nJosh lives 0.657km from CGS WH\nMolly lives 7.56km from Wheelers Hill Library\nAvery lives 6.313km from Mount Waverley\nSammy lives 3.409km from Brandon Park\nNatsuki lives 6.419km from CGS WH\nLiam lives 0.808km from Mount Waverley\nNick lives 1.37km from Glen Waverley\nWill lives 6.405km from Wheelers Hill Library\nBella lives 0.716km from Wheelers Hill Library\nYou (Garv) live 0.432km from Brandon Park\n\nWarning! These 11 friends have to walk more than 20 minutes in order to get to their transport hub. Possibly consider adding hubs closer to their houses:  Grace (39.03), Sophie (118.75), Emma (27.26), Audrey (82.27), Eric (30.49), Isabella (24.1), Molly (88.94), Avery (74.27), Sammy (40.1), Natsuki (75.52) and Will (75.35)\n\nThe trip would cost you $3.35 and would take you 266.17 minutes, taking the following route: \nFrom Brandon Park (Garv, Sammy) to Wheelers Hill Library (Emma, Molly, Will, Bella) to CGS WH (Zimo, Sabrina, Audrey, Isabella, Josh, Natsuki) to Glen Waverley (Eric, Nick) to Mount Waverley (Avery, Liam) to Richmond to Flinders Street to Caulfield (Grace) to Flinders Street to Richmond to Camberwell (Sophie) to Richmond to Oakleigh and back to Brandon Park.\n\nIt took 0.8578 seconds to run.\n```\n\nThe correctness of this being the quickest route was presented as informal arguments via mathematical induction throughout the report, relying on modifications to the Held-Karp Algorithm to model features of the real world scenario and provide us with an answer to our problem. As can be seen above, the solution suitably provides the fastest route, which friends will be picked up at which nodes, the time it would take for the traversal to occur and the overall cost of the trip. This satisfactorily answers the initial problem and is fit for the purpose of planning real life trips that would involve picking up all my friends to visit my house.\n\n## Final Code\n\nThe final Python implementation of the code can be found [here](https://trinket.io/python3/55e1b08d8e) on Trinket. Below is the final main thread in structured pseudocode that invokes all the modules described throughout the report.\n\n```\nfunction main(\n\tfriends: dictionary,\n\tlandmarks: dictionary,\n\troutes: dictionary,\n\ttimetable: dictionary\n):\n\t// global variable declarations\n\tconcession: bool = Ask the user \"Do you posses a concession card?\"\n\tholiday: bool = Ask the user \"Is today a weekend or a holiday?\"\n\tuser_name: string = Ask the user to select a friend from friends dictionary\n\tselected_time = Ask the user what time they are leaving\n\t\n\tcached_djk: dictionary = empty dictionary\n\tedge_lookup_matrix: matrix = |V| x |V| matrix that stores a list of edges in each entry\n\t\n\t// get distance of all friends from landmarks\n\tfriend_distances: dictionary = calculate_nodes(friends, landmarks)\n\tvisit_set: set = set of all closest nodes from friend_distances\n\tpeople_at_nodes: dictionary = all friends sorted into keys of which nodes they are closest to, from visit_set\n\t\n\thome: string = closest node of user_name\n\t\n\tprint all friends, where they live closest to and how far away\n\t\n\tprint out friends that would take more than 20 minutes to walk (average human walking speed is 5.1 km/h)\n\t\n\thamiltonian_path = held_karp(home, home, visit_set, selected_time)\n\t\n\tprint how much the trip would cost and how long it would take\n\t\n\tprint the path of the hamiltonian_path\nend function\n```","lastmodified":"2023-09-07T08:27:08.480881714Z","tags":[]},"/notes/School-Subjects/Algorithmics/SAT/Optimisations-saved-for-Unit-4":{"title":"Optimisations (saved for Unit 4)","content":"### Caching Held-Karp's Output\n\nThe same principle as above can be applied to the Held-Karp algorithm. Although it is a harder task to make Held-Karp iterative, the result of computations can be stored rather than calling `held_karp` every time. As above, this can be done with an intermediary function, `fetch_hk` which only runs `held_karp` if the value hasn't already been stored.\n\nThe pseudocode for this process is relatively simple:\n\n```\ncached_hk = dictionary of list -\u003e dict\n\nfunction fetch_hk (\n\tstart: node, \n\tend: node,\n\tvisit: set of nodes \n):\n\tif cached_hk[[start, end, visit]] does not exists:\n\t\tcached_hk[[start, end, visit]] = held_karp(start, end, visit)\n\treturn cached_hk[[start, end, visit]]\nend function\n```\n\nAfter being implemented in Python, `fetch_hk` resembles the following:\n\n```python\ndef fetch_hk(start, end, visit):\n    key = frozenset([start, end, frozenset(visit)])\n    if key not in cached_hk:\n        cached_hk[key] = held_karp(start, end, visit)\n    return cached_hk[key]\n```\n\n#### Performance Improvement\n\nThough this is a somewhat minor change, the improvements are drastic, with the entire hamiltonian circuit being calculated in less than a second. The $n \\space \\textrm{vs} \\space t$ table now looks like this, with an approximate line of best fit of $y \\approx a \\times b^{x}$ where $a=0.00000544325$ and $b=2.36503$:\n\n| $n$ (no. nodes) | $t$ (execution time in seconds, 4dp) | $y$ (line of best fit, 4dp) |\n|-----------------|--------------------------------------|-----------------------------|\n| 0               | 0.0001                               | 0.0000                      |\n| 1               | 0.0001                               | 0.0000                      |\n| 2               | 0.0001                               | 0.0000                      |\n| 3               | 0.0001                               | 0.0001                      |\n| 4               | 0.0001                               | 0.0002                      |\n| 5               | 0.0002                               | 0.0004                      |\n| 6               | 0.0005                               | 0.0010                      |\n| 7               | 0.0012                               | 0.0023                      |\n| 8               | 0.0030                               | 0.0053                      |\n| 9               | 0.0081                               | 0.0126                      |\n| 10              | 0.0210                               | 0.0298                      |\n| 11              | 0.0520                               | 0.0705                      |\n| 12              | 0.2051                               | 0.1667                      |\n| 13              | 0.5061                               | 0.3942                      |\n| 14              | 0.8246                               | 0.9323                      |\n| 15              | 2.2284                               | 2.2050                      |\n\nEvidently this is significantly better, with Held-Karp at 12 nodes being about 8,533 times faster than without this optimisation. Across a couple tests, the $b$ value of the line of best fit seems to hover around $2.1-2.3$, which indicates that we're nearing the limits of our optimisations. The theoretical average time complexity of Held-Karp is $O(2^{n}n^{2})$, and it is unknown if any algorithm exists to solve TSP in a time complexity of less than base 2. As such, the closer we get to base 2, the more \"perfectly\" we have optimised our algorithm, and as of now we're pretty close.\n\n// this is saved code to be put back in later (optimisation)\n```python\n    cached_djk = {}\n    cached_hk = {}\n    \ndef fetch_djk(start, end):\n    \"\"\"\n    Fetches Dijkstra's Shortest Path Algorithm.\n\n    :param start: start node\n    :type start: str\n\n    :param end: end node\n    :type end: str\n\n    :return: The shortest distance between two nodes along with the path.\n    :rtype: dict[str, float | list[str]]\n    \"\"\"\n\n    global cached_djk\n    if start not in cached_djk:\n        cached_djk[start] = dijkstra(start)\n\n    djk = cached_djk[start]\n    # reconstructs the path\n    path = [end]\n    while path[0] != start:\n        path.insert(0, djk['predecessors'][path[0]])\n\n    return {'cost': djk['distances'][end], 'path': path}\n\ndef fetch_hk(start, end, visit):\n    key = frozenset([start, end, frozenset(visit)])\n    if key not in cached_hk:\n        cached_hk[key] = held_karp(start, end, visit)\n    return cached_hk[key]\n    \ndef dijkstra(start):\n    \"\"\"\n    Dijkstra's Shortest Path Algorithm.\n\n    :param start: start node\n    :type start: str\n\n    :return: The distance dictionary and the predecessor dictionary.\n    :rtype: dict\n    \"\"\"\n\n    # set all nodes to infinity with no predecessor\n    distance = {node: float('inf') for node in g.nodes()}\n    predecessor = {node: None for node in g.nodes()}\n    unexplored = list(g.nodes())\n\n    distance[start] = 0\n\n    while len(unexplored) \u003e 0:\n        min_node = min(unexplored, key=lambda node: distance[node])\n        unexplored.remove(min_node)\n\n        for neighbour in g.neighbors(min_node):\n            current_dist = distance[min_node] + dist(min_node, neighbour)\n            # a shorter path has been found to the neighbour ‚à¥ relax value\n            if current_dist \u003c distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n\n    return {'distances': distance, 'predecessors': predecessor}\n```\n\n```\npandoc \"Garv's SAT- Friendship Network.md\" -o \"Garv's SAT- Friendship Network.pdf\" --from markdown --toc --listings -H setup.tex\n```\n","lastmodified":"2023-09-07T08:27:08.484881748Z","tags":[]},"/notes/School-Subjects/Algorithmics/SAT/Part-2/Algorithmics-SAT-Part-2":{"title":"Algorithmics SAT - Friendship Network Part 2","content":"\nThis section of the Algorithmics SAT focuses on a time complexity analysis of the solution in order to establish the efficiency of the algorithm and feasibility in the real world.\n\nThroughout the analysis, note the following variables are used as shorthand:\n\nLet $F =$ number of friends\n\nLet $L =$ number of landmarks\n\nLet $R =$ number of routes\n\n# Time Complexity Analysis\n\n## Expected Time Complexity\n\nAs explained in Part 1 of the SAT, the algorithm in essence boils down to an applied version of the Held‚ÄìKarp algorithm, which has an optimal worst case time complexity of $O(n^{2}2^{n})$. Hence, it would make sense for our combination of Held-Karp and Dijkstra's to result in a time complexity slightly larger.\n\n## Call Tree\n\n![Call Tree](call_tree.svg \"Call Tree\")\n\nAs we can see, the [main function](#main-function) calls a few distinct processes [^1]:\n\n1. First it creates the edge lookup matrix, which is abstracted in the pseudocode. This Big O time is derived from the Pythonic implementation of the lookup matrix as follows [^2]:\n   \n\t```python\n\tedge_lookup_matrix = {frozenset({edge['from'], edge['to']}): [] for edge in edges}  \n\tfor edge in edges:  \n\t\tedge_lookup_matrix[frozenset({edge['from'], edge['to']})].append(edge)\n\t```\n\t\n\tEvidently, this loops over each edge in `edges` twice, resulting in a linear time complexity of $O(2R)$\n\n2. It then calls [`calculate_nodes`](#calculate-nodes) with an input of both `friends` and `landmarks`, the output of which is used to create our `visit_set`. This Big O time is derived from the fact that [`calculate_nodes`](#calculate-nodes) is simply a nested for-loop, iterating over each friend and every landmark, resulting in a worst case time complexity of $O(F\\times L)$.\n\n3. It now uses the output of [`calculate_nodes`](#calculate-nodes) (stored as `friend_distances`) to create a set of nodes we need to visit, which is abstracted in the pseudocode. This Big O time is derived from the Pythonic implementation of the set as follows:\n   \n\t```python\n\tvisit_set = set(val['closest_node'] for key, val in friend_distances.items())\n\t```\n\t\n\tEvidently, this loops over each friend once, resulting in a linear time complexity of $O(F)$\n\n4. Similar to the above implementation, the [`main`](#main-function) function now creates `people_at_nodes` to create a dictionary of nodes and which people are closest to that node, with a similar $O(F)$ as above.\n\n5. Various other print statements are called, all with $O(F)$ time to display information about each friend.\n\n6. Finally, after all this prep is done, [`held_karp`](#held-karp) is called to find the shortest hamiltonian path of the graph.\n\n[^1]: This analysis is done assuming that the time complexity of accessing a dictionary, list or array element is $O(1)$, as these basic pseudocode elements are generally done in constant time.\n\n[^2]: Due to the nature of functional abstraction, the implementation of creating the `edge_lookup_matrix` is not specified in the pseudocode. Although it is referred to as a lookup matrix of size $|V| \\times |V|$ which would have a quadratic time complexity, the pseudocode has actually been implemented as a dictionary in $O(2R)$ time, which is a bit more efficient. Nonetheless, even if it was changed to $O(L^{2})$, it would make minimal difference to the final asymptotic time complexity.\n\nAs we can see from this process and the call tree above, there are 3 main elements that contribute to the time complexity of our algorithm besides [`held_karp`](#held-karp): \n\n1. [`calculate_nodes`](#calculate-nodes) which contributes $F\\times L$ to our time.\n   \n2. Calculating the `edge_lookup_matrix`, which contributes $2R$ to our time complexity but simply turns into $R$ when considering the asymptotic complexity.\n   \n3. Calculating the `visit_set`, `people_at_nodes` and two other print calls. This contributes $4F$ where 4 accounts for these 4 processes but could be any other arbitrary constant, as this simply turns into $F$ when considering the asymptotic time complexity.\n\nIf we let the time complexity of [`held_karp`](#held-karp) be represented by $HK(n)$ where $n$ denotes the calculated size of the `visit_set`, our current time complexity of the [`main`](#main-function) function can be represented as $O(HK(n)+FL+R+F)$.\n\n## Held-Karp Time Complexity\n\nFiguring out the time complexity of the other processes in our algorithm was relatively easy; we can simply look at their [pseudocode implementation](#algorithm-pseudocode) (or what they would be if they are abstracted) and look at the general number of operations. Held-Karp on the other hand is a bit harder as it is a recursive algorithm, making direct analysis a bit more troublesome. To begin, we can try to represent the [modified Held-Karp algorithm](#held-karp) as a recurrence relation to aid in mathematical analysis.\n\nTo recap, Held-Karp[^3] works by utilising the fact that every subpath of a path of minimum distance is itself of minimum distance. This means that we can reduce the length of $S$ by one each time by finding the minimum distance/path between $C$ and $B$ while running Held-Karp again on the set $S$ without $C$, but as $C$ as the new value for $B$.   \n\n[^3]: The following variables will be used as shorthand throughout the analysis.\n\t\n\tLet $A =$ starting vertex\n\t\n\tLet $B =$ ending vertex\n\t\n\tLet $S = \\{P, Q, R\\}$ or any other vertices to be visited along the way.\n\t\n\tLet $n$ = the length of the visit set $S$.\n\t\n\tLet $C \\in S$ (random node in $S$), and to clarify: $C \\neq A, B$ as $S$ does not include them\n\nAs stated in part 1, this logic can be represented recursively as the following:\n\n$\\textrm{Let Cost}_{A \\rightarrow B, \\space S}=\\textrm{The minimum cost of a cycle free path from A to B that visits all the vertices of S.}$\n\n$\\textrm{Let } d_{A,B} = \\textrm{The minimum cost of travelling from A to B, as outputted by Dijkstra's.}$\n\n$\\therefore \\textrm{Cost}_{A \\rightarrow B, \\space S}= \\textrm{min}(\\textrm{Cost}_{A \\rightarrow C, \\space S - \\{B\\}} + d_{CB})$\n\n\nWe can then turn this into a recurrence relation for Big O, where $n$ is the size of the set $S$ and $d(n)$ is the cost function, which in our case is Dijkstra's:\n\n$$\nT_{n} = \\left\\{\n        \\begin{array}{ll}\n            n(T_{n-1}+d(n)) \u0026 \\quad n \u003e 0 \\\\\n            d(n) \u0026 \\quad n=0\n        \\end{array}\n    \\right.\n$$\n\nNow that we have a recurrence relation for Held-Karp in terms of the cost of running Dijkstra's, the next logical step is to find the number of operations required to run Dijkstra's every time (which would be in the worst case scenario where none of our previous calculations are reused).\n\n## Dijkstra's Time Complexity\n\nWe can analyse Dijkstra's step by step by viewing all the elements of the [pseudocode](#dijkstras) and evaluating them separately and then add them up together at the end:\n\n1. We can see that initial loop runs for every node, or $L$ times, as each node represents a landmark.\n\n2. In the main while loop, we iterate over every node in the graph, making the while loop run $L$ times as well. \n\n3. To find the `min_node`, the pseudocode iterates over every single node in the `unexplored_list`. As this list decreases by one each time, the total cost of finding the `min_node` can be represented as $L+(L-1)+(L-2)+\\cdots+1+0$. This resembles the triangular numbers, and hence we can also represent the total `min_node` cost as $\\frac{L(L+1)}{2}$.\n\n4. The nested for loop inside the while loop is a bit trickier as it covers all neighbours of the current `min_node`. As we have established that every single node in the graph will be the `min_node` at some point, we can use the graph below as an example for how many times this loop would occur. \n   Over here, we can see that $A$ has 2 neighbours, $B$ has 2 neighbours, $C$ has 1 neighbour and $D$ has 1 neighbour. This makes it evident that the amount of times this inner for loop will run is actually just the sum of the degrees of the graph, and by the handshaking lemma, this is simply equal to twice the number of edges in the graph. Hence, the total amount of times this loop will run is $2R$.\n\n\t![Sample Graph](sample_graph.svg \"Sample Graph\")\n\n5. Finally, inside this for loop, we call the `dist` function. As is evident from the pseudocode, this function uses the `edge_lookup_matrix` and goes over the edges between two nodes. In most practical cases, this will simply be one or two edges if multiple bus or train lines go across the same nodes. The `soonest_time_at_node` function is also an abstraction the next available bus/train time given any time at a particular node, which can possibly be implemented into a dictionary to be done in constant time. Due to these two factors, when looking at the asymptotic behaviour, this can be simplified to $O(1)$.\n   \nNow that we have considered all parts of our implementation of Dijkstra's, we can combine it to get a single cost function: $d(n) = L + L\\left(\\frac{L(L+1)}{2}+2R\\right)= 2LR+\\frac{1}{2}L^{3}+\\frac{1}{2}L^{2}+L$. Considering the behaviour of this function asymptotically, we can see that it would have a time complexity of $O(2LR + L^{3})$, which is far from ideal and can be improved significantly (Dijkstra's can supposedly be done in $O(L+R\\log{L})$ with a min-priority queue).\n\n## Modified Held-Karp Time Complexity\n\nNow that we have an established cost function, we can attempt to evaluate $T_{n}$ in terms of $d(n)$. To reiterate:\n\n$$\nT_{n} = \\left\\{\n        \\begin{array}{ll}\n            n(T_{n-1}+d(n)) \u0026 \\quad n \u003e 0 \\\\\n            d(n) \u0026 \\quad n=0\n        \\end{array}\n    \\right.\n$$\n$$\nd(n)=2LR+\\frac{1}{2}L^{3}+\\frac{1}{2}L^{2}+L\n$$\n\nKeeping this in terms of $d(n)$, we can create a table to see how this recurrence relation gets bigger as $n$ increases.\n\n| $n$ | $T_{n}$   |\n|-----|-----------|\n| 0   | $d(n)$    |\n| 1   | $2d(n)$   |\n| 2   | $6d(n)$   |\n| 3   | $21d(n)$  |\n| 4   | $88d(n)$  |\n| 5   | $445d(n)$ |\n\nThe working for this table is shown below, but you can easily keep going to follow the pattern for higher values of $n$:\n\n$n = 0$: $T_{n}=d(n)$\n\n$n = 1$: $T_{n}=1(T_{0}+d(n))=2d(n)$\n\n$n = 2$: $T_{n}=2(T_{1}+d(n))=6d(n)$\n\n$n = 3$: $T_{n}=3(T_{2}+d(n))=21d(n)$\n\n$n = 4$: $T_{n}=4(T_{3}+d(n))=88d(n)$\n\n$n = 5$: $T_{n}=5(T_{4}+d(n))=445d(n)$\n\n### Recurrence Relation\n\nJust looking at the coefficients for a second, we have the following recurrence relation:\n\n$$\nT_{n}=n(T_{n-1}+1), \\space T_{0}=1\n$$ \n\nIt is easy to see that this recurrence relation implies that the running time for the algorithm is factorial. After all, the recurrence relation for $n!$ is $T_{n}=n(T_{n-1}), \\space T_{0}=1$. \n\n### Attempting to Find an Explicit Formula\n\nNow clearly it is of interest to solve this [recurrence relation](#recurrence-relation) and find a non-recursive formula, and here we run into a bit of an issue. If the relation were a linear recurrence with constant coefficients or a typical divide-and conquer recurrence, it would likely be solvable by well-known methods such as telescoping or the Master Theorem, but this is not the case.\n\n#### Theorem 1\n\nWhile trying to find a way to solve this [recurrence relation](#recurrence-relation), I arrived at the conjecture that $T_{n}=n!+\\sum_{i=0}^{n-1} \\frac{n!}{i!}$, so let us try to prove it.\n\n\u003e For $n \\in \\mathbb{N}$, the number of operations used to solve an n-sized visit set TSP by the above algorithm (ignoring the cost function) satisfied the formula: $T_{n}=n!+\\sum_{i=0}^{n-1} \\frac{n!}{i!}$.\n\nFirst let us work with the RHS to rearrange it a bit into a more convenient form:\n$RHS$\n\n$= n!+\\sum_{i=0}^{n-1} \\frac{n!}{i!}$\n\n$= n!+\\frac{n!}{0!}+\\frac{n!}{1!}+\\frac{n!}{2!}+\\cdots+\\frac{n!}{(n-2)!}+\\frac{n!}{(n-1)!}$\n\n$= n! \\times (1 + \\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\cdots+\\frac{1}{(n-2)!}+\\frac{1}{(n-1)!})$\n\n##### Base Case\n\nWhen $n=0$, the base case of the [recurrence relation](#recurrence-relation) says that $T_{0}=1$. The above formula matches that with $T_{0}=0!\\times(1+0)=1$, $\\therefore$ base case is true.\n\n##### Induction Step\n\nPick an arbitrary $k \\in \\mathbb{N}$. Assume that the theorem holds for any TSP with a visit set of size $k$. Thus, it is assumed that $T_{k}= k! \\times (1 + \\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\cdots+\\frac{1}{(k-2)!}+\\frac{1}{(k-1)!})$.\n\nProof by induction requires showing the following: \n\n$T_{k+1}= (k+1)! \\times (1 + \\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\cdots+\\frac{1}{(k-1)!}+\\frac{1}{k!})$. \n\nNext, we can combine the recurrence above with the induction hypothesis as follows:\n\n$LHS$\n\n$=T_{k+1}$\n\n$=T_{k}(k+1)+(k+1)$ (from [recurrence relation](#recurrence-relation)) \n\n$=[k! \\times (1 + \\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\cdots+\\frac{1}{(k-2)!}+\\frac{1}{(k-1)!})](k+1)+(k+1)$\n\n$=(k+1)! \\times (1 + \\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\cdots+\\frac{1}{(k-2)!}+\\frac{1}{(k-1)!})+(k+1)$\n\n$=(k+1)! \\times (1 + \\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\cdots+\\frac{1}{(k-2)!}+\\frac{1}{(k-1)!})+(k+1)\\times\\frac{(k+1)!}{(k+1)!}$\n\n$=(k+1)! \\times \\left(1 + \\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\cdots+\\frac{1}{\\left(k-2\\right)!}+\\frac{1}{(k-1)!}+\\frac{k+1}{(k+1)!}\\right)$\n\n$=(k+1)! \\times \\left(1 + \\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\cdots+\\frac{1}{\\left(k-2\\right)!}+\\frac{1}{(k-1)!}+\\frac{1}{k!}\\right)$\n\n$=RHS$\n\nThus $T_{n}=n!+\\sum_{i=0}^{n-1} \\frac{n!}{i!}$ by the principle of mathematical induction.\n\n#### Theorem 2\n\nLooking all over the web for this, the only place I could find any reference to this sequence is [here](https://oeis.org/A033540), which provides us with the relation $T_{n}=n! + \\lfloor e\\times n!\\rfloor - 1$ for the coefficients. This can be rearranged to $T_{n}=\\lfloor n!(e+1)-1 \\rfloor$, but just to be sure that this works for every case, we should probably prove it too.\n\n\u003e For $n \\in \\mathbb{Z}^{+}$, the number of operations used to solve an n-sized visit set TSP by the above algorithm (ignoring the cost function) satisfied the formula: $T_{n}=\\lfloor n!(e+1)-1 \\rfloor$.\n\n##### Case 1\n\nThis is the case where $n=1$. As seen above, $T_{1}=2$ and the proposed formula predicts that $T_{1}= \\lfloor 1!(e+1)-1 \\rfloor = \\lfloor e+1-1 \\rfloor = \\lfloor e \\rfloor = 2$. Thus, the base case holds.\n\n##### Case 2\n\nThis is the case where $n\u003e1$. Because of the floor function, if it can be shown that the following difference is small enough, it will probably be possible to prove that this case works as well.\n$$\n\\textrm{Let } \\space r_{n}=n!(e+1)-1-T_{n}\n$$\n\n##### Lemma 1\n\n\u003e When $n\u003e1$, the following must be true: $r_{n}=\\frac{1}{n+1}+\\frac{1}{(n+1)(n+2)}+\\frac{1}{(n+1)(n+2)(n+3)}+\\cdots$\n\nThis sum looks like it might be related to the power series for $e^{x}$ at $x=1$. We already know the power series for $e^{x}$, a proof for which can be found [here](https://proofwiki.org/wiki/Power_Series_Expansion_for_Exponential_Function):\n\n$$\ne^{x}=\\frac{1}{0!}+\\frac{x}{1!}+\\frac{x^{2}}{2!}+\\frac{x^{3}}{3!}+\\cdots\n$$\n\nIt therefore follows that:\n\n$$\ne=e^{1}=\\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\frac{1}{3!}+\\cdots\n$$\nSince we know that $T_{n} = n! \\times (1 + \\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\cdots+\\frac{1}{(n-2)!}+\\frac{1}{(n-1)!})$ from the [first theorem](#theorem-1), we can sub both the power series for $e$ and this fact into our definition of $r_{n}$:\n\n$r_{n}$\n\n$= n!(e+1)-1-T_{n}$ (by definition)\n\n$= n!(1+\\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\cdots)-1-T_{n}$ (power series for $e$)\n\n$= n!(1+\\frac{1}{0!}+\\frac{1}{1!}+\\frac{1}{2!}+\\cdots)-1-n! \\times (1 + \\frac{1}{0!}+\\frac{1}{1!}+\\cdots+\\frac{1}{(n-2)!}+\\frac{1}{(n-1)!})$ \n\n$=n!\\times(\\frac{1}{n!}+\\frac{1}{(n+1)!}+\\frac{1}{(n+2)!}+\\cdots)-1$\n\n$=(1+\\frac{1}{n+1}+\\frac{1}{(n+1)(n+2)}+\\cdots)-1$\n\n$=\\frac{1}{n+1}+\\frac{1}{(n+1)(n+2)}+\\frac{1}{(n+1)(n+2)(n+3)}+\\cdots$\n\n$\\therefore$ The lemma is true.\n\n##### Lemma 2\n\n\u003e When $n\u003e1$, it is true that $r_{n}\u003c\\frac{1}{n+1}+\\frac{1}{(n+1)^{2}}+\\frac{1}{(n+1)^{3}}+\\cdots=\\frac{1}{n}$\n\nThis is easily proven using the [first lemma](#lemma-1):\n\n$r_{n}$\n\n$=\\frac{1}{n+1}+\\frac{1}{(n+1)(n+2)}+\\frac{1}{(n+1)(n+2)(n+3)}+\\cdots$ (Lemma 1)\n\n$\u003c \\frac{1}{n+1}+\\frac{1}{(n+1)(n+1)}+\\frac{1}{(n+1)(n+1)(n+1)}+\\cdots$\n\n$= \\frac{1}{n+1}+\\frac{1}{(n+1)^{2}}+\\frac{1}{(n+1)^{3}}+\\cdots$\n\n\nThis upper bound above is in the form of an infinite geometric series with ratio $\\frac{1}{n+1}$, so the usual formula of $S_{\\infty}=\\frac{a}{1-r}$ can be used: $r_{n} \u003c\\frac{\\frac{1}{n+1}}{1-\\frac{1}{n+1}} =\\frac{1}{n}$.\n\n$\\therefore$ The lemma is true.\n\n##### Lemma 3\n\n\u003e If $n \u003e 1$, $0\u003cr_{n}\u003c1$ must hold true.\n\nFrom [Lemma 1](#lemma-1), it is clear that $r_{n}$ is positive $\\therefore 0\u003c r_{n}$. \n\nThen, by [Lemma 2](#lemma-2), the following must hold: $r_{n}\u003c\\frac{1}{n}\\le\\frac{1}{2}\u003c1$. $\\therefore r_{n}\u003c1$.\n\n$\\therefore$ The lemma is true.\n\n##### Conclusion\n\nThus, the proof for this theorem is complete for the case $n\u003e1$:\n\nBy the [definition](#case-2) of $r_{n}$, it must be true that $T_{n}+r_{n}=n!(e+1)-1$. Since the [recurrence relation](#recurrence-relation) set up $T_{n}$ as integer and $0\u003cr_{n}\u003c1$ by [Lemma 3](#lemma-3), it must hold that $\\lfloor n!(e+1)-1 \\rfloor = \\lfloor T_{n}+r_{n} \\rfloor=T_{n}$.\n\n### Time Complexity\n\nNow that we have proved this works for the coefficients of the cost function, we have the formula of $T(n)=d(n) \\lfloor n!(e+1)-1 \\rfloor$.The floor function here is just to deal with the difference of $r_{n}$ so that we can get an integer output. Subbing in our known time complexity of $d(n)$, we get a final Big O of $O(\\lfloor n!(e+1) \\rfloor(2LR+L^{3}))$ for the original implementation of our modified Held-Karp with no caching of its own Dijkstra's outputs. Note that it should already have been obvious that the running time for this algorithm would be in factorial time from the recurrence relation itself, even before finding an explicit formula.\n\nWe have already verified that this is correct given that the recurrence relation is correct, but we can also do so by general intuition . If we look back at Part 1, we can get the time taken to run the unoptimised modified Held-Karp on our data with different $n$ values. $(2LR+L^{3})$ should be a constant for any particular predefined graph, meaning that if our Big O time complexity is correct then $\\textrm{execution time} \\propto \\lfloor n!(e+1) \\rfloor$[^4].\n\n| n | $\\frac{\\textrm{execution time}}{\\lfloor n!(e+1) \\rfloor}$ |\n|---|-----------------------------------------------------------|\n| 5 | $3\\times10^{-5}$                                          |\n| 6 | $4\\times10^{-5}$                                          |\n| 7 | $3\\times10^{-5}$                                          |\n| 8 | $3\\times10^{-5}$                                          |\n| 9 | $3\\times10^{-5}$                                          |\n\n[^4]: Note that $n\u003c5$ would be rather unreliable due to the decimal inaccuracy of my recorded execution times (4dp)\n\nAs we can see, this proportionality is fairly constant, so it would probably be safe to assume that the worst-case time complexity for the unoptimised modified Held-Karp algorithm would be $O(\\lfloor n!(e+1) \\rfloor(2LR+L^{3}))$, or at least something pretty close to it.\n\n## Optimised Modified Held-Karp Time Complexity\n\nAs was established in part 1, this factorial time complexity is not nearly sufficient enough for real world applications. Not only is it simply worse than brute forcing it, it makes it so calculating the Hamiltonian path with just my own friend group takes a ludicrous amount of time. \n\nOne optimisation that was made in Part 1 was the caching of Dijkstra's outputs, so that once Dijkstra's is called from one starting node, all subsequent calls to Dijkstra's will be done in $O(1)$ time. This means that the full Dijkstra's algorithm will only be called a maximum of once for every node in the graph, and then all subsequent calls will just use the cache. Since the time complexity for our Dijkstra's implementation is currently $O(2LR + L^{3})$, we can simply multiply this by the amount of nodes ($L$) to get the worst case scenario for how long Dijkstra's takes.\n\nThis transforms our time complexity of $O(\\lfloor n!(e+1) \\rfloor(2LR+L^{3}))$ into $O(\\lfloor n!(e+1) \\rfloor + L(2LR+L^{3}))$, which doesn't *look* like that much of a difference, but it means that when looking at the asymptotic time as $n \\to \\infty$, we can remove the whole second term as it becomes a constant if we are not considering increasing the amount of landmarks and routes, which is much better than multiplying by this value instead. \n\nAs $n \\to \\infty$, not only does the 2nd term become negligible as explained above, but the floor function also doesn't make a difference because it is simply for making the output an integer number of operations. As such, it is safe to conclude that the implemented algorithm runs in factorial time for an increasing size of the `visit_set`. \n\nIn conclusion, the final algorithm from part one has a time complexity of $O(\\lfloor n!(e+1) \\rfloor + L(2LR+L^{3}))$, which means that the algorithm runs in factorial time.\n\n# Consequences of Time Complexity\n\nAs detailed in the previous section, the final time complexity of the algorithm so far is $O(\\lfloor n!(e+1) \\rfloor + L(2LR+L^{3}))$. This isn't very ideal, because simply brute forcing it would likely lead to a better worst case time complexity than the current algorithm.\n\nLet's quickly take the example of the time complexities of our two algorithms, the one with cached Dijkstra's values and the one without. The graph/input data detailed in Part 1 has 15 landmarks, 26 routes and a `visit_set` of size 7. For these values, the unoptimised algorithm would take 77,864,700 time units and the algorithm with Dijkstra's caching would take 81,065 time units. This is over 960 times faster in the worst case scenario, but as shown in part 1, about 31 times faster in the average case. Below is a discussion on the real world consequences of this time performance difference, as well as how practical this algorithm is for real world use cases.\n\n## Revisiting Problem Requirements\n\nThis algorithm was made to solve the general problem of planning trips with friends, but more specifically the scenario where my friends decided that we want to travel in one big travel party and I am to start and end my day at my house, picking up all my friends along the way. In other words, this algorithm is designed for the real world use case of finding the shortest circuit that picks up all my friends as we travel. \n\nLet us consider some requirements for this real world use case. By my own general estimates, most people would only have about 5 to 10 close friends that they would travel like this with. Similarly, most people live relatively close to their friends, so the case of 15 landmarks (or train stations/buses) and 26 routes (or train/bus lines) is realistic. As shown in Part 1, below is the real world performance as $n \\in [0,12]$ and $L=15,\\space R=26$.\n\n| $n$ (size of `visit_set`) | $t$ (execution time in seconds, 4dp) |\n|---------------------------|--------------------------------------|\n| 0                         | 0.0001                               |\n| 1                         | 0.0001                               |\n| 2                         | 0.0001                               |\n| 3                         | 0.0001                               |\n| 4                         | 0.0001                               |\n| 5                         | 0.0005                               |\n| 6                         | 0.0060                               |\n| 7                         | 0.0287                               |\n| 8                         | 0.2148                               |\n| 9                         | 1.6055                               |\n| 10                        | 17.4555                              |\n| 11                        | 171.6719                             |\n| 12                        | 1750.1065                            |\n\nPresuming most people's friends live somewhat close to each other, even in the case where we have 10 close friends that we want to hang out with, most of them probably share \"pickup points\" which reduces the size of the `visit_set`. For example, the current input data has 18 friends but a visit set of size 7! This means that in almost every case $n\u003c10$, and if people were using this in a mapping application like Google Maps for example to have certain pickup points along the way, this would most likely be fine, returning a result in a couple seconds at worst.\n\nThe problems start arising when this problem is scaled up more. As the algorithm is in factorial time, it scales rather terribly and has minimal improvements over brute force, if any improvements at all. The algorithm more generally is a solution for TSP with a graph that is not necessarily complete, and this can be applied to a lot more real life applications than just houses of friends. For example, if the person starting the trip was a truck driver for a logistics company rather than me, and the pickup points were necessary delivery points rather than the closest meeting points for friends, we would have a completely different scale in which the algorithm would perform very poorly. Not only would these pickup points be across a *much* larger distance, meaning the value of $R$ will likely be much higher, but there are potentially many more pickup/dropoff points in a day than the previous scenario, causing both $L$ and $n$ to be greatly larger. Simply put, a factorial time complexity of $O(\\lfloor n!(e+1) \\rfloor + L(2LR+L^{3}))$ just does not scale very well for many other practical use cases besides the one explored, and even then, if the party of friends was sufficiently large, the algorithm would crawl to a halt. Looking at the example above, with just $12$ pickup points the algorithm ground to a staggering half an hour of required time when tested on my machine.\n\nDue to the fact that most users are not willing to wait more than a couple seconds for a result, the practical input sizes are $n \u003c 10$, $L \\le 15$, $R \\le 30$. These values are taken from the input values that produced the table above while considering the time complexity of the algorithm. This is not a very big scope of possible use cases, and therefore optimisations are most definitely needed. Although this algorithm as of now is suitable to the problem's requirements, it very quickly falls apart for a \"power user\" or anyone else that has a different use-case in mind. Another possible alternative is using \"approximate\" solutions that have a better time complexity which may not provide the *most* optimal solution, but will most definitely scale better for a variety of use cases.\n\nTo conclude, this algorithm's time complexity directly influences how practically it can be used in the real world to solve the problem it is intended to solve. Users of a program as such would expect a result within seconds at most, and the practical input sizes are therefore restricted to those described above. \n\n# Appendix\n\n## Possible Optimisations\n\nIt is also worth quickly noting the possible optimisations the findings of the report above lead to. \n\n1. The current implementation of Dijkstra's is far from optimal: the current algorithm has a cubic time complexity but with a a min priority queue this can supposedly be reduced to $O(L+R\\log{L})$.\n   \n2. The abstraction of `soonest_time_at_node` can be implemented as a dictionary that is accessed in constant time but is currently implemented as two for loops that makes the [`dist`](#distance-function) function more complex than necessary. \n   \n3. The biggest optimisation needed is the caching of the Held-Karp outputs, meaning that subpaths are calculated once only, and all subsequent subpaths will be read in $O(1)$ time (basically dynamic programming by definition). This should probably help the factorial time complexity, though it might be hindered by the fact that a different starting time means that the whole subpath is different which decreases how effective this optimisation is.\n   \n4. Finally, it may be worth considering approximate solutions. This being said, the scope of the problem to solve does *just* fit into the practical input sizes that the algorithm allows, but definitely limits its usefulness and real world use cases. In many times, the *best* solution is not needed, just a relatively good one.\n\n## Algorithm Pseudocode\nThe following is the final pseudocode reiterated from Part 1, namely for convenience while analysing, since multiple modifications were made to the initial pseudocode.\n\nLet $A =$ starting vertex\nLet $B =$ ending vertex\nLet $S = \\{P, Q, R\\}$ or any other vertices to be visited along the way.\nLet $C \\in S$ (random node in $S$)\n\n### Main Function\n\n```\nfunction main(\n\tfriends: dictionary,\n\tlandmarks: dictionary,\n\troutes: dictionary,\n\ttimetable: dictionary\n):\n\t// global variable declarations\n\tconcession: bool = Ask the user \"Do you posses a concession card?\"\n\tholiday: bool = Ask the user \"Is today a weekend or a holiday?\"\n\tuser_name: string = Ask the user to select a friend from friends dictionary\n\tselected_time = Ask the user what time they are leaving\n\t\n\tcached_djk: dictionary = empty dictionary\n\tedge_lookup_matrix: matrix = |V| x |V| matrix that stores a list of edges in each entry\n\t\n\t// get distance of all friends from landmarks\n\tfriend_distances: dictionary = calculate_nodes(friends, landmarks)\n\tvisit_set: set = set of all closest nodes from friend_distances\n\tpeople_at_nodes: dictionary = all friends sorted into keys of which nodes they are closest to, from visit_set\n\t\n\thome: string = closest node of user_name\n\t\n\tprint all friends, where they live closest to and how far away\n\t\n\tprint out friends that would take more than 20 minutes to walk (average human walking speed is 5.1 km/h)\n\t\n\thamiltonian_path = held_karp(home, home, visit_set, selected_time)\n\t\n\tprint how much the trip would cost and how long it would take\n\t\n\tprint the path of the hamiltonian_path\nend function\n```\n\n### Calculate Nodes\n\n```\nfunction calculate_nodes (\n\tfriend_data: dictionary,\n\tnode_data: dictionary\n):\n\tfor friend in friend_data:\n\t\thome: tuple = friend['home']\n\t\t// initial min vals that will be set to smallest iterated distance\n\t\tmin: float = infinity\n\t\tmin_node: node = null\n\t\t\n\t\tfor node in node_data:\n\t\t\tlocation: tuple = node['coordinates']\n\t\t\t// find real life distance (functional abstraction)\n\t\t\tdistance: float = latlong_distance(home, location)\n\t\t\tif distance \u003c min:\n\t\t\t\tmin = distance\n\t\t\t\tmin_node = node\n\t\t\n\t\tdistance_dict[friend]['min_node'] = min_node\n\t\tdistance_dict[friend]['distance'] = min\nend function\n```\n\n### Held-Karp\n\n```\nfunction held_karp (\n    start: node,\n    end: node,\n    visit: set\u003cnode\u003e,\n    current_time: datetime\n):\n    if visit.size = 0:\n    \tdjk = dijkstras(start, end, current_time)\n\t\treturn djk['cost']\n    else:\n        min = infinity\n        For node C in set S:\n\t        sub_path = held_karp(start, C, (set \\ C), current_time)\n\t        djk = dijkstras(C, end, current_time + toMinutes(sub_path['cost']))\n\t        cost = sub_path['cost'] + djk['cost']\n\t        if cost \u003c min:\n\t            min = cost\n\t    return min\nend function\n```\n\n### Dijkstra's\n\n```\nfunction dijkstras (\n    start: node,\n    end: node,\n    current_time: datetime\n):\n    // Set all node distance to infinity\n    for node in graph:\n        distance[node] = infinity\n        predecessor[node] = null\n        unexplored_list.add(node)\n    \n    // starting distance has to be 0\n    distance[start] = 0\n    \n    // while more to still explore\n    while unexplored_list is not empty:\n        min_node = unexplored node with min cost\n        unexplored_list.remove(min_node)\n    \n\t    // go through every neighbour and relax\n        for each neighbour of min_node:\n            current_dist = distance[min_node] + dist(min_node, neighbour, current_time + to_minutes(distance[min_node]))\n            // a shorter path has been found to the neighbour -\u003e relax value\n            if current_dist \u003c distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n    \n    return distance[end]\nend function\n```\n\n### Distance Function\n\n```\nfunction dist (\n\tstart: node,\n\tend: node,\n\tcurrent_time: datetime\n):\t\n\t// if the start and end node are the same, it takes no time to get there\n\tif start = end:\n\t\treturn 0\n\telse if edges = null:\n\t\t// if no edge exists between nodes\n\t\treturn infinity\n\t\n\tedges = edge_lookup_matrix[start][end]\n\tdistances = []\n\t\n\t// go over each possible edge between nodes (multiple possible)\n\tfor edge in edges:\n\t\tline = edge.line\n\t\t// next time bus/train will be at node (functional abstraction)\n\t\tnext_time = soonest_time_at_node(timetable, line, start, current_time)\n\t\twait_time = next_time - current_time\n\t\tdistances.add(edge.weight + wait_time)\n\t\n\treturn min(distances)\nend function\n```\n","lastmodified":"2023-09-07T08:27:08.484881748Z","tags":[]},"/notes/School-Subjects/Algorithmics/SAT/Part-3/Algorithmics-SAT-Part-3":{"title":"Algorithmics SAT - Friendship Network Part 3","content":"\nThis section of the Algorithmics SAT focuses improving the original data model and algorithm to solve the original problem more efficiently and effectively. \n\nThroughout the analysis, note the following variables are used as shorthand:\n\nLet $F =$ number of friends\n\nLet $L =$ number of landmarks\n\nLet $R =$ number of routes\n\n\\newpage\n\n## Suggested Improvements\n\nFrom Part 2, there were various possible optimisations that became evident from the time complexity analysis. These read as follows:\n\n1. The [current implementation of Dijkstra's](#dijkstras) is far from optimal: the current algorithm has a cubic time complexity but with a min priority queue this can supposedly be reduced to $O(L+R\\log{L})$.\n   \n2. The abstraction of [`soonest_time_at_node`](#distance-function) can be implemented as a dictionary that is accessed in constant time but is currently implemented as two for loops that makes the [`dist`](#distance-function) function more complex than necessary. \n   \n3. The biggest optimisation needed is the caching of the Held-Karp outputs, meaning that subpaths are calculated once only, and all subsequent subpaths will be read in $O(1)$ time (basically dynamic programming by definition). This should probably help the factorial time complexity, though it might be hindered by the fact that a different starting time means that the whole sub-path is different which decreases how effective this optimisation is.\n   \n4. Finally, it may be worth considering approximate solutions. This being said, the scope of the problem to solve does *just* fit into the practical input sizes that the algorithm allows, but definitely limits its usefulness and real world use cases. In many times, the *best* solution is not needed, just a relatively good one.\n\nThe first three can be implemented and compared relatively easily, so they will be the focus of this section.\n\n### Improving Dijkstra's Implementation\n\nAs stated above, the [current implementation of Dijkstra's](#dijkstras) is na√Øve because each iteration of the while loop requires a scan over all edges to find the one with the minimum distance, but the relatively small change of using a [heap](#heaps) as a min priority queue allows us to find the edge with minimum distance faster. In terms of the [pseudocode](#dijkstras), this just means turning `unexplored_list` into a min priority queue, where the priority is based on the distance to the node.\n\nNote that even though the `unexplored_list` simply appears as a priority queue in the pseudocode, for this change to be beneficial the priority queue data structure must itself be implemented efficiently, using something like a [heap](#heaps). \n\nSee the [modified version of Dijkstra's](#dijkstras-1) for the pseudocode.\n\n#### Heaps\n\nIn most implementations (such as the Python implementation we will be testing with), the inner workings of how a min priority queue works will be abstracted and hence doesn't *need* to be worried about. Nonetheless, it is worth exploring how they are actually implemented, a popular method being min heaps!\n\nA heap is a special tree-based data structure in which the tree is a complete binary tree. In other words, each node has exactly two children and every level will be completely filled, except possibly the deepest level. In a min heap, the parent nodes are always smaller than their children, meaning that the root node is the very smallest element. \n\nInterestingly, since there are no gaps in the tree, the heap can actually be stored simply as an array with additional logic for adding and removing from the priority queue.\n\n![Complete Binary Tree](complete_binary_tree.svg \"Complete Binary Tree\")\n\n##### Insertion\n\nWhen inserting an element, it goes in the next empty spot looking top to bottom, left to right. If that's not where the element should actually go, we can \"bubble it up\" until it is, meaning that we can swap that element with its parent node repeatedly until it has gone up the tree enough to be in the correct position. Since it is a binary tree, we can do this in $O(\\log{n})$ time.\n\n##### Deletion\n\nSince we would want to remove the smallest node, this would of course be the root node. Removing the root node would create an empty spot, so when we remove the root, we instead fill that with the last element added. Similar to above, since this element might not be in the right spot, we take that element and \"bubble it down\" until it is, this time swapping with the smaller of the two children repeatedly. Similar to above, we can do this in $O(\\log{n})$ time.\n\n#### Improvement\n\n| Visit Set Size | Initial Algorithm (s) | Improved Dijkstra's (s) |\n| -------------- | --------------------- | ----------------------- |\n| 8              | 1.4038                | 1.2842                  |\n| 9              | 3.9718                | 3.9315                  |\n\nAll times are the average of 10 trials. Evidently, the improvement is slight, if any improvement at all. \n\n### Improving Distance Function\n\nTo find the [`soonest_time_at_node`](#distance-function), the original Pythonic implementation was using a nested for loop to find when the next train/bus would arrive. This is thoroughly inefficient, namely due to the amount of times that the [`dist`](#distance-function) function is called, meaning that there would be a lot of overlap. This *could* be improved using dynamic programming, but since there is a fixed amount of time in a day (24 hours), it doesn't actually take that long to precompute this waiting time and store it along with the rest of our data. The pseudocode for this function is below:\n\n```\ntime_data = dictionary of dictionaries\n\nfor line in line_data:\n\tfor start_node in line_data[line]['timetable']:\n\t\tfor current_time in every minute of a day:\n\t\t\t// calculate next time at node\n\t\t\tfor arrival_time at start_node:\n\t\t\t\tif arrival_time \u003e= current_time and is first:\n\t\t\t\t\tnext_time = arrival_time\n\t\t\t\n\t\t\twait_time = next_time - current_time\n\t\t\tadd wait_time to time_date\n```\n\nThis produces a rather large dictionary of wait times, but the change to $O(1)$ time complexity pays off, even if space complexity is sacrificed.\n\n#### Improvement\n\n\n| Visit Set Size | Initial Algorithm (s) | Improved Dijkstra's (s) | Improved Dist (s) |\n| -------------- | --------------------- | ----------------------- | ----------------- |\n| 8              | 1.4038                | 1.2842                  | 0.2746            |\n| 9              | 3.9718                | 3.9315                  | 2.2123            |\n| 10             | 27.8881               |                         | 24.4954           |\n\nAll times are the average of 10 trials and improvements are cumulative. The improvement seems quite large for smaller visit set sizes, but evidently this does not influence the Big O much as $\\lim n \\rightarrow \\infty$. \n\n### Improving Held-Karp Implementation\n\nMaybe the biggest flaw in the initial algorithm is that [Held-Karp](#held-karp) did not use dynamic programming. Due to the way Held-Karp works (explained previously), there are many overlapping problems and without the caching of these outputs, they will be calculated repeatedly unnecessarily. Since this main function is what contributes to the majority of the time complexity, improving it should make the algorithm scale better.\n\nAs we did with Dijkstra's in Part 1, caching can be done with an intermediary function, `fetch_hk`, which only runs `held_karp` if the value hasn't already been stored.\n\nThe pseudocode for this process is relatively simple and [can be found below](#fetch-held-karp-cached).\n\n#### Improvement\n\n| Visit Set Size | Initial Algorithm (s) | Improved Dijkstra's (s) | Improved Dist (s) | Improved Held-Karp (s) |\n| -------------- | --------------------- | ----------------------- | ----------------- | ---------------------- |\n| 8              | 1.4038                | 1.2842                  | 0.2746            | 0.0264                 |\n| 9              | 3.9718                | 3.9315                  | 2.2123            | 0.0579                 |\n| 10             | 27.8881               |                         | 24.4954           | 0.1460                 |\n| 11             |                       |                         |                   | 0.2339                 |\n| 12             |                       |                         |                   | 0.5172                 |\n| 13             |                       |                         |                   | 1.2122                  |\n| 14             |                       |                         |                   | 2.8075                 |\n\nAll times are the average of 10 trials and improvements are cumulative. The improvement from this change is much better than the previous changes, likely changing our Big O time from factorial to exponential, as seen by the roughly doubling running times. This can be verified by creating a line of best fit from the data above, which works out to be $t(n) \\approx a^{n-b}$ where $a=2.29792$ and $b=12.7609$. This has an $R^{2}$ value of $0.9996$, which provides us with a relatively high confidence that the new algorithm has $\\Theta(2^{n})$. According to this line of best fit, $n=20$ would take about 7 minutes and 53 seconds, while $n=30$ would take almost 3 weeks.\n\nIt is worth noting that although this does improve the time complexity by a large factor, the cache also takes up a lot of space, making the space complexity worse. This tradeoff is quite good in most cases since modern devices have plenty of memory and storage, but in the case that space complexity is a constraint, this may be an unideal optimisation.\n\n\\newpage\n\n## Practicalities of an Exact Algorithm\n\nThough the algorithm has seen a dramatic improvement from factorial time to likely exponential time, it still maintains a lot of the issues that the previous version possessed. Namely, because exponential time still does not scale very well, the practical input size for $n$ is still very limited, changing from about $n\\leq 9$ to $n \\leq 14$.\n\nAs stated in Part 2, this is mostly sufficient for the specific use case of the problem outlined in most cases since the amount of friends people would hang out with in this fashion is intrinsically small, as it only applies itself to close friends. Because of this, even if someone does have a large amount of close friends, it is unlikely that the visit set that gets computed is larger than 14 (the current input data has 18 friends but a visit set of size 7). As such, for the practical cases of this specific problem, the exact algorithm is sufficient, and also works for adjacent scenarios such as mapping applications (Google Maps, etc.) wanting to have certain pickup points along the way.\n\nThe algorithm begins to become impractical once the problem is scaled up more as a general solution for the TSP. For example, if a truck driver for a logistics company wanted an optimal route given a list of pickup points, this would very quickly surpass the practical limit of $n \\leq 14$, and the graph would be much larger as well. In wider applications like this, using an exact algorithm is simply not useful, and we would rather want paths that have a \"small enough\" cost but have a feasible time complexity. This is where we get into the realm of [approximate algorithms](#approximateheuristic-algorithms).\n\n### Tractability\n\nIt is important to note that the problem that was initially described can simply be generalised as the Travelling Salesman Problem, which is famously NP-Hard meaning that there is no known polynomial time solution for the problem.\n\nDue to the fact that our final exact algorithm implementation had its execution time double every time $n$ was increased by 1, it is safe to assume that the algorithm runs in exponential time at best, meaning that it is still considerably intractable for large inputs due to the exponential growth.\n\nFrom this, it is clear that the problem does not become tractable based on the above implementation, and it will be hard to make an exact algorithm that is much faster. This is why [approximate algorithms](#approximateheuristic-algorithms) are worth considering, namely those that have performance guarantees of worst cases that are within a certain factor of the minimal cost solution. They provide a trade-off between speed and optimality, and while they make the problem more tractable than exact algorithms, they do not make it completely tractable due to their approximate nature and how they do not always produce the optimal solution.\n\n## Approximate/Heuristic Algorithms\n\nThe general idea of most approximation algorithms is we can start with an initial candidate solution and then keep making changes to see if we can get better. The initial candidate solution need not be good, but it would certainly help produce results closer to the global optimum after a certain amount of iterations. \n\nOne of the most intuitive ideas to generate an initial candidate solution would be to visit the closest node in the visit set from any given node, and this can more formally be described as the [Nearest Neighbour Heuristic](#nearest-neighbour-heuristic).\n\n### Nearest Neighbour Heuristic\n\nThe Nearest Neighbour (NN) algorithm is a greedy (and somewhat na√Øve) approach where the closest unvisited city is selected as the next destination. This method produces a reasonably short route, but usually not the optimal one. The informal steps of this approximate algorithm are listed below:\n\n1. Mark every vertex as unvisited.\n\n2. Set the starting vertex as the current vertex **u**, marking it as visited.\n\n3. Find the shortest outgoing edge from **u** to an unvisited vertex **v**.\n\n4. Set **v** as the current vertex **u** and mark it as visited.\n\n5. If all vertices have been visited, terminate, if not, go to step 3.\n\nThis is a very simple algorithm, but as is the case with most greedy approaches, it can quite easily miss shorter routes. For this specific use case step 3 may cause a few issues in terms of time complexity, as unlike the normal TSP, our graph is not complete. This means that at this step, we would need to run Dijkstra's at every single node in the graph and then sort them to find the shortest path, which is inefficient. \n\nTo make this slightly faster we *could* simply choose the first unvisited node in the visit set to go to, but that would still require Dijkstra's to run at every node to find a path, meaning that only the time spent sorting would be saved (which is minimal since Dijkstra's will already have them sorted from the min heap). The problem with this approach is that it will produce a less optimal solution, causing the algorithm to have to spend a longer amount of time improving the solution in the simulated annealing phase. This means that it is a bit of a tradeoff, and for now the shortest node will be chosen.\n\nTo avoid using Dijkstra's at all, it is worth considering candidate solutions based on the MST, such as those created by Christofides' Algorithm, which may turn out to be faster. This can be further considered to optimise the algorithm, but for simplicity's sake, the NN Heuristic will be continued with.\n\nBelow is the pseudocode to generate an initial candidate solution. Note that in this pseudocode, `fetch_djk` only has the input of the starting node and visit set and returns the path to the closest node in the visit set, so it is a slightly modified version of the `fetch_djk` outlined above.\n\n```\n// creates a canditate solution using the NN Heuristic\nfunction canditate_solution (\n\tstart: node, \n\tend: node,\n\tvisit: set of nodes,\n\tcurrent_time: datetime,\n):\n\tpath = [start]\n\tcurrent_vertex = start\n\tcost = 0\n\t\n\twhile len(visit) != 0:\n\t\tclosest_node = fetch_djk(current_vertex, visit, current_time)\n\t\tpath.add(closest_node)\n\t\tcost += closest_node.cost\n\t\tvisit.remove(closest_node)\n\t\tcurrent_vertex = closest_node\n\t\n\t// go back to the end node\n\tclosest_node = fetch_djk(current_vertex, end, current_time)\n\tpath.add(closest_node)\n\tcost += closest_node.cost\n\t\n\treturn {'path': path, 'cost': cost}\nend function\n```\n\n### Pairwise Exchange\n\nOnce we have an initial candidate solution that has a reasonable cost for the traversal, a natural question to ask is \"how can we make it better?\" More specifically, it is worth considering how we could make modifications to generate a better solution.\n\nOne way to do this is random swapping, where we randomly pick two cities in the current tour order, and swap them. The goal is to see if these random swaps will ever create a lower cost tour, and if they do, we can accept the new solution. This is a form of the Hill Climbing heuristic, where we keep moving around the sample space to see if we can improve our solution at all.\n\nA slightly more sophisticated technique than randomly swapping the nodes is a method called Pairwise Exchange or 2-opt. The main idea is that we can select any two edges and reconfigure them in the only other way possible with the hopes that this may result in a lower cost tour.\n\n![Demonstration of the 2-opt Technique](2-opt.png \"Demonstration of the 2-opt Technique\"){ height=360px } \n\nFor example, in the diagram above, it can be seen that the pairs $b-e$ and $c-f$ cross over each other, so the edges can be swapped so that they do not. \n\nMore simply, when imagined as a one dimensional array, this could be viewed as the following transformation where we simply reversed the order of the path $e \\leftrightarrow d \\leftrightarrow c$:\n\n1. $a \\leftrightarrow \\mathbf{b \\leftrightarrow e} \\leftrightarrow d \\leftrightarrow \\mathbf{c \\leftrightarrow f} \\leftrightarrow g$\n2. $a \\leftrightarrow \\mathbf{b \\leftrightarrow c} \\leftrightarrow d \\leftrightarrow \\mathbf{e \\leftrightarrow f} \\leftrightarrow g$\n\nIn essence, this \"untangles\" our candidate solution and can go through all the possible edge combinations much faster than simply randomly switching nodes (which has a much lower chance of being any better).\n\nIt is worth noting that the 2-opt technique (where 2 edges are selected and reconfigured) can actually be extended to any number of edges, known as *k*-opt for $k$ edges. It might be worth working with a larger amount of edges (3-opt for example), but for simplicity's sake, 2-opt will the one continued with.\n\nThe above notion of reversing the order of a certain path can be expanded upon to develop our pseudocode. The informal steps for this process are listed below:\n\nLet $u$ and $v$ be the first vertices of the edges that are to be swapped.\nLet $\\textrm{tour}$ be an array of vertices that defines our candidate path.\n1. Add all vertices up to and including $u$ in order.\n2. Add all vertices after $u$ up to and including $v$ in reverse order.\n3. Add all vertices after $v$ in order.\n\nIn the example above, $u$ would have been $b$ and $v$ would have been $c$.\n\nThis basic logic can be combined with the Hill Climbing Heuristic to provide a simple way to improve the initial candidate solution. Here, the `calculate_cost` function would simply add up the cost of traversing the graph in the input order, using Dijkstra's at every vertex.\n\n```\nfunction pairwise_swap (\n\tu: integer,\n\tv: integer,\n\tpath: path of nodes\n):\n\tnew_tour = []\n\t\n\tfor i in [0, u]:\n\t\tnew_tour.add(path[i])\n\tfor i in [v, u):\n\t\tnew_tour.add(path[i])\n\tfor i in (v, len(path)]:\n\t\tnew_tour.add(path[i])\n\t\n\treturn new_tour\nend function\n\nfunction calculate_cost (\n\tpath: path of nodes,\n\tcurrent_time: datetime\n):\n\tcost = 0\n\ttime = current_time\n\t\n\tfor i from 0 to len(path) - 1:\n\t\tdjk = fetch_djk(path[i], path[i + 1], current_time)\n\t\tcost += djk['cost']\n\t\ttime += djk['cost'] number of minutes\n\t\n\treturn cost\nend function\n\nfunction hill_climbing (\n\tcandidate: path of nodes,\n\tcurrent_time: datetime,\n\tfail_count: int = 0\n):\n\tif fail_count \u003c 200:\n\t\tcost = calculate_cost(candidate, current_time)\n\t\tu = random number from 1 to len(candidate) - 1 inclusive\n\t\tv = random number from u to len(candidate) - 1 inclusive\n\t\t\n\t\tnew_tour = pairwise_swap(u, v, candidate)\n\t\tnew_cost = calculate_cost(new_tour, current_time)\n\t\t\n\t\tif new_cost \u003c= cost:\n\t\t\t// new cost is better/equal -\u003e accept\n\t\t\treturn hill_climbing(new_tour, current_time, 0)\n\t\telse:\n\t\t\t// new cost is worse -\u003e go again\n\t\t\treturn hill_climbing(candidate, current_time, fail_count + 1)\n\telse:\n\t\treturn candidate\nend function\n```\n\nNote that the above range of $u$ and $v$ values has been chosen to prevent them from referring to the start or end of the tour, since in our particular use case we would like to force the tour to start and end at particular locations\n\n### Simulated Annealing\n\nOne of the problems with the above solution is that it will quite easily get stuck on a local minimum. Demonstrated by the graph below, the Hill Climbing Heuristic is blind to anything besides its local vicinity. As such, there may be an overall better solution, but not one that can be achieved by constantly improving the current candidate solution. In other words, sometimes things have to get worse before they get better, especially for the TSP.\n\n![Example of the Limitations of Hill Climbing](Local%20Minima%20Example.png \"Example of the Limitations of Hill Climbing\")\n\nCurrently, once the Hill Climbing algorithm is implemented in Python, it produces a somewhat suboptimal result. It is hardcoded to terminate after it has had 200 consecutive iterations that have seen no improvement. Sometimes, it can terminate on a relatively good result, but in other cases it gets stuck on much more sub-par candidates. This can be demonstrated by the two paths bellow, both of which the Hill Climbing algorithm terminated on.\n\n```\nThe cost has been improved from 234.0 to 227.0\n['Brandon Park', 'Oakleigh', 'Wheelers Hill Library', 'CGS WH', 'Chadstone', 'Caulfield', 'Flinders Street', 'Camberwell', 'Parliament', 'Melbourne Central', 'Brighton Beach', 'Richmond', 'Mount Waverley', 'Glen Waverley', 'Brandon Park']\n```\n\n```\nThe cost has been improved from 277.0 to 270.0\n['Brandon Park', 'CGS WH', 'Glen Waverley', 'Mount Waverley', 'Camberwell', 'Chadstone', 'Caulfield', 'Brighton Beach', 'Flinders Street', 'Melbourne Central', 'Parliament', 'Richmond', 'Oakleigh', 'Wheelers Hill Library', 'Brandon Park']\n```\n\nSimulated Annealing is a concept that builds off of this idea of possibly selecting a worse solution to hopefully get to the global optimum. Namely, it tries to explore as much of the search space as possible at the start (by being more likely to select worse candidates) and then gradually reduces this chance so that it can converge on a better solution. \n\nThe logic behind this is quite similar to Hill Climbing:\n\n1. Start with a candidate solution, from a previous algorithm or just a random tour.\n   \n2. Modify this candidate by trying to apply some tour improvements, in this case 2-opt.\n   \n3. Decide whether to accept the new solution or stay with the old one.\n\nThe key difference here is step 3. In both algorithms, if the new tour's cost is lower than the previous one, we will always accept it. If the cost is more than the current solution, with some probability, we will actually accept the higher cost solution but this probability will decrease over time.\n\nHow this probability is determined is mostly based on a parameter called the \"Temperature\" $T$. At the start we will initialise this to a high value, and a higher temperature means we are more likely to select a worse solution. Any $T \\in [0, 1]$ will work, but we want to gradually reduce our temperature over time, so that it can influence some probability function.\n\nThere are usually three main types of temperature reduction functions, where $\\alpha$ is the factor by which the temperature is scaled after $n$ iterations:\n\n1. Linear Reduction Rule: $T = T - \\alpha$\n   \n2. Geometric Reduction Rule: $T = T \\times \\alpha$\n   \n3. Slow-Decrease Rule[^1]: $T = \\frac{T}{1+\\beta T}$\n\n[^1]: This rule is not often used, but $\\beta$ is a different constant that we'll get to later.\n\nEach of these reduction rules decreases the temperature at a different rate, so they may be better for different use cases. For now, we will settle upon the Geometric Reduction Rule (as it is the most common).\n\nStarting at the initial temperature, the algorithm will loop through $n$ iterations and then decrease the temperature according to the selected temperature reduction function at the end of every iteration. This loop will stop once the terminating condition is reached, generally some low cutoff temperature where we have determined an acceptable amount of the search space has been explored. \n\nFinally, within each iteration, we will use our temperature, the old cost and the new cost to determine whether we accept the new solution or not. This follows the formula below where $\\Delta c = \\textrm{new cost} - \\textrm{old cost}$:\n\n$$\nP=\n\\begin{cases} \n  1 \u0026 \\Delta c \\leq 0 \\\\\n  e^{-\\beta \\Delta c/T} \u0026 0 \u003c \\Delta c\\\\\n\\end{cases}\n$$\n\nTo demonstrate, if the new cost is less than or equal to the old cost, the new cost will always be accepted. If on the other hand the new cost is greater, then we *might* pick it based on the formula shown above. This equation is inspired by the formula for the energy released by metal particles as they cool down from thermodynamics: $P(\\Delta E) = e^{-\\frac{\\Delta E}{k * t}}$. This process is known as annealing, hence the name of the algorithm! Borrowing this equation from physics turns out to be quite elegant, giving us a probability distribution known as the Boltzman distribution.\n\nIt is worth noting the different parameters that can be tuned, and the effectiveness of the algorithm depends on the choice of these parameters:\n\n1. $\\beta$ - Normalising Constant\n   The choice of this constant is dependent on the expected variation in the performance measure over the search space, If the chosen value of $\\beta$ is higher, the probability of accepting a solution is supposedly also higher in later iterations. In our use case, we can simply play around with this number and see if it changes anything!\n   \n2. $T_{0}$ - Initial Temperature\n   This is simply the temperature we start with, and should be relatively close to one so that we accept a lot of new solutions at the start. For now, we will set $T_{0} = 0.98$.\n\n3. $\\alpha$ - Temperature Scaling Factor\n   As explained above, depending on the temperature reduction function chosen, $\\alpha$ will reduce it at a different rate. Low $\\alpha$ values restrict the search space faster, so we can choose $\\alpha = 0.85$ for now.\n\nThe number of iterations before the temperature is updated can also be played around with, for now this will be set to 5. Also, the cutoff terminating temperature can also be set to allow the algorithm to search for longer.\n\nThe above should demonstrate the main weakness of simulated annealing: there are a lot of tunable parameters that vastly influence the performance of the algorithm. If our input data is very sparse, the algorithm may perform much worse for certain use cases. Nonetheless, it is most definitely an improvement over the Hill Climbing algorithm as it does not increase time complexity or space complexity, but it does provide a more accurate output.\n\nBelow is the pseudocode that summarises the above discussion:\n\n```\nfunction acceptance_probability (\n\told_cost: number,\n\tnew_cost: number,\n\tbeta: number,\n\ttemp: number\n):\n\tc = new_cost - old_cost\n\t\n\tif c \u003c= 0:\n\t\treturn 1\n\telse:\n\t\treturn e**((-beta * c)/temp)\nend function\n\nfunction simulated_annealing (\n\tcandidate: path of nodes,\n\tcurrent_time: datetime,\n):\n\t// parameters to fiddle with\n\ttemp = 0.98\n\tmin_temp = 0.00001\n\ttemp_change = 5\n\tbeta = 1.2\n\talpha = 0.85\n\t\n\told_cost = calculate_cost(candidate, current_time)\n\t\n\twhile temp \u003e min_temp:\n\t\tfor n from 1 to temp_change:\n\t\t\tu = random number from 1 to len(candidate) - 1 inclusive\n\t\t\tv = random number from u to len(candidate) - 1 inclusive\n\t\t\t\n\t\t\tnew_tour = pairwise_swap(u, v, candidate)\n\t\t\tnew_cost = calculate_cost(new_tour, current_time)\n\t\t\t\n\t\t\tap = acceptance_probability(old_cost, new_cost, beta, temp)\n\t\t\t\n\t\t\tif ap \u003e random float from 0 to 1:\n\t\t\t\tcandidate = new_tour\n\t\t\t\told_cost = new_cost\n\t\t\t\n\t\ttemp *= alpha\n\t\t\n\treturn candidate\nend function\n```\n\n#### Normalising Function\n\nSomething that may have become apparent when viewing the above examples is how the paths generated by this approximate solution are somehow much shorter than those generated by Held-Karp. This is due to the fact that the implementation of Held-Karp is not restricted to only visiting each node once, whereas the approximate algorithms are. Due to this, we get some interesting behaviour that needs to be accounted for.\n\n```\n['Brandon Park', 'Oakleigh', 'CGS WH', 'Wheelers Hill Library', 'Caulfield', 'Flinders Street', 'Melbourne Central', 'Parliament', 'Glen Waverley', 'Chadstone', 'Brighton Beach', 'Camberwell', 'Mount Waverley', 'Richmond', 'Brandon Park']\n```\n\nThe above is a path generated by the Hill Climbing algorithm. The issue to note is that it advises the user to go from Glen Waverley to Chadstone, but there is no edge between them for this to happen. Since the algorithms have been using Dijkstra's to go to any other node, it has in essence been treating our tour as a complete graph, even though it is not. As such, the edges in between these locations need to be added in again.\n\nThis is quite simple to do, and is similar to the `calculate_cost`, except the paths are added instead of the costs.\n\n```\nfunction normalise_path (\n\tpath: path of nodes,\n\tcurrent_time: datetime\n):\n\treturn_path = []\n\ttime = current_time\n\t\n\tfor i from 0 to len(path) - 1:\n\t\tdjk = fetch_djk(path[i], path[i + 1], current_time)\n\t\ttime += djk['cost'] number of minutes\n\t\t// this is to prevent the last and first item double up\n\t\treturn_path += everything in djk['path'] except last item\n\t\n\treturn_route.add(last item in route)\n\t\n\treturn cost\nend function\n```\n\n\\newpage\n\n## Final Solution\n\nThe problem these algorithms were set out to solve is a specific application of the TSP: how could the shortest closed walk be found that picks up all my friends as we travel around the city?\n\nThe initial approach to solve this problem used the concepts of dynamic programming to recursively split up the larger problem into smaller overlapping subproblems. Unfortunately, because the number of subpaths increases exponentially as the size of the visit set increased, it was demonstrated that even though an exact algorithm may provide an optimal solution, intractable problems like the TSP may require a better time complexity in a trade-off for accuracy.\n\nThe approaches for the approximate solutions have followed two main phases:\n- Generate a possible candidate solution.\n- Improve the candidate using some optimisation algorithm.\n\nThe Nearest Neighbour heuristic was used to generate the initial candidate, simply travelling to the closest node remaining in the visit set until a closed walk has been achieved. This was then later improved upon by processing this candidate through both the Hill Climbing and Simulated Annealing algorithms.\n\nIn regard to the performance of Simulated Annealing (SA) vs Hill Climbing (HC), it seems that the output of the former is heavily dependent on the parameters set. Whereas HC produced results in a relatively large range, SA could be tuned to consistently provide the same \"good\" results every time or if the parameters were not optimal, a completely rubbish result every time.\n\nFor example, with $T_{0}=0.98, \\beta = 4, \\alpha = 0.9$ and the 5 iterations before updating the temperature, SA consistently produced a hamiltonian path that would take 254 minutes to traverse. HC was more inconsistent, outputting 274 initially, 281 next and struck gold with the last try with 237. Surprisingly though, the difference between Hill Climbing and Simulated Annealing doesn't seem to be vast for this particular input graph, and SA can simply be viewed as a more tunable and adjustable version of HC to be able to produce a more consistent result.\n\nWhen this was changed to simply be the visit set that the friends reside at, the output for both HC and SA was as follows:\n\n```\nFinal candidate cost is 143.0\nFinal candidate path is ['Brandon Park', 'Wheelers Hill Library', 'CGS WH', 'Glen Waverley', 'Mount Waverley', 'Richmond', 'Camberwell', 'Richmond', 'Flinders Street', 'Caulfield', 'Oakleigh', 'Brandon Park']\n```\n\nNonetheless, neither of them are able to find the true optimal path that Held-Karp creates:\n\n```\nFinal candidate cost is 130.0\nFinal candidate path is ['Brandon Park', 'Wheelers Hill Library', 'CGS WH', 'Glen Waverley', 'Mount Waverley', 'Richmond', 'Flinders Street', 'Caulfield', 'Oakleigh', 'Richmond', 'Camberwell', 'Richmond', 'Oakleigh', 'Brandon Park']\n```\n\nThis could simply be because 2-opt does not provide the required permutations to be able to reach the optimal path, but still demonstrates the required tradeoff between approximate solutions and exact algorithms, a tradeoff of time vs accuracy.\n\n### Comparison of Solutions\n\n#### Design Features\n\nAs discussed above, Held-Karp (the exact algorithm) used the principle of dynamic programming to split the larger problem into instances of the similar overlapping subproblems that can be solved recursively. By utilising the fact that every subpath of a path of minimum distance is itself of minimum distance, we can recursively reduce the size of the visit set by one and solve for the smaller cases. In this case, due to the TSP's intractability, this only decreases the time complexity from factorial to exponential, saving time by ensuring that subpaths are not re-calculated.\n\nOn the other hand, the combination of algorithms that produce the approximate solutions operate based off a variety of design principles.\n\nThe initial candidate solution generated by the NN Heuristic uses a greedy design pattern to find a possible path. This design pattern does not work with many problems (including the TSP) because sometimes things have to get worse for an overall better result.\n\n![Demonstration of Why Greedy Algorithms Fail](greedy_example.svg \"Demonstration of Why Greedy Algorithms Fail\")\n\nDemonstrated above, the greedy design feature would select \"3\" as it is the best option visible at the time, but will end up selecting a far worse solution that could easily be avoided with some intuition for what comes afterwards.\n\nNonetheless, the greedy design pattern in the NN heuristic generally produces a somewhat viable candidate, that is then improved upon by certain Generate and Test algorithms.\n\nOne such algorithm is Hill Climbing, which refers to a type of local search optimisation technique that provides an iterative way to make incremental changes to a candidate and proceed if an improvement has been found.\n\nSimulated Annealing expands upon this idea by using a probabilistic technique to decide if we accept an incremental change or not. Both these local search algorithms allow for an exploration of adjacent solutions that help find an improved solution in a tractable way.\n\nThe difference between the two approaches and their design patterns lies between the intended output. The dynamic programming approach guarantees a correct output, but since the requirements are slightly different for the approximate algorithms, a wider range of design techniques are available (such as using random probability or the Generate and Test pattern) that can get us closer to a better solution, even if it produces a non-deterministic non-optimal result.\n\n#### Coherence\n\nOverall, Held-Karp is far more of a consistent and logical solution. Since the exact algorithm is inherently deterministic, it is always guaranteed to produce the same optimal result consistently. ¬†In contrast, the NN algorithm's performance can vary widely depending on the arrangement of nodes and both the optimisation algorithms use probability to pick $u$ and $v$ values. Simulated annealing is also non-deterministic ($\\because$ probabilistic), meaning that it is nowhere near as consistent as Held-Karp. That being said, Simulated Annealing does seem to converge consistently on the same or similar local optima based on its input parameters, so we can render it more coherent than Hill Climbing but much less so than Held-Karp.\n\nThe influence of this difference in consistency between the two approaches on the real world applications is key to deciding which approach is better. Exact algorithms would be preferred in scenarios where predictability and repeatability are crucial. For example, in scientific research studies on geographical data that is static, the superior coherence of Held-Karp would mean that the study is repeatable and verifiable by peers. On the other hand, the lower consistency of SA and HC are not necessarily disadvantageous in real world applications, because they can provide more flexibility and adaptability. Instead of providing only one solution, they provide many good candidates that the user can consider between. This flexibility would be ideal for larger operations such as a logistics company, where the clients and pickup points are very actively changing, and alternative routes need to be provided in case the algorithm does not account for real world disturbances such as road closures.\n\n#### Fitness for Problem\n\nIn terms of fitness for the problem, it would be safe to say that the exact algorithm would be preferred for the initial problem described. Even though Held-Karp would have a larger space complexity (due to all the subpaths that need to be stored), a typical user's phone will have plenty of storage such that space should not be too much of an issue. The inefficient time complexity of the algorithm mostly relates to how it scales to larger visit set sizes, anything below $n=14$ is barely noticeable to the typical user. Since most people will not be intending to travel in this fashion with such a large number of friends, it would likely be preferred to use the exact algorithm as it provides the optimal solution. This being said, Held-Karp is somewhat inflexible, especially when it comes to frequently changing data. As it only provides one path and one path only, it could be a bit of an issue when it does not account for certain data such as a bus replacement (very common around Victoria). As such, it might be best to use a combination of both in an application, defaulting to the modified Held-Karp but switching over to the approximate algorithms once $n\u003e13$ or more solutions are requested.\n\n#### Efficiency \u0026 Time Complexity\n\nAs established above, the improved Held-Karp algorithm maintains an exponential time complexity, similar enough to $O(2^{n})$ that we can use this simplified version to come to more clear conclusions. \n\nGoing through the pseudocode for the approximate algorithms, the algorithm to find a candidate solution is run first. In this case, this would be the Nearest Neighbour heuristic, which runs the following code for every node in the visit set (of size $n$)\n\n```\nclosest_node = fetch_djk(current_vertex, visit, current_time)\npath.add(closest_node)\ncost += closest_node.cost\nvisit.remove(closest_node)\ncurrent_vertex = closest_node\n```\n\nSince it runs Dijkstra's at every node, our time complexity for NN will just be $n \\times \\textrm{Dijkstra's Time Complexity}$. If we presume that the above optimisations for Dijkstra were effective then this would be at $O(L+R\\log{L})$ (the generally accepted time complexity for Dijkstra's using min heaps), but even if this was not the case, we would have a time complexity of $O(L^{2})$. This provides an NN time complexity of $O(n \\times L^{2})$.\n\nIn terms of Hill Climbing, during every iteration $i$, the algorithm runs the following pseudocode:\n\n```\ncost = calculate_cost(candidate, current_time)\nu = random number from 1 to len(candidate) - 1 inclusive\nv = random number from u to len(candidate) - 1 inclusive\n\nnew_tour = pairwise_swap(u, v, candidate)\nnew_cost = calculate_cost(new_tour, current_time)\n\nif new_cost \u003c= cost:\n\t// new cost is better/equal -\u003e accept\n\tGo again with the new tour\nelse:\n\t// new cost is worse -\u003e go again\n\tGo again with the same tour\n```\n\nFirst, the cost of the candidate is evaluated. This requires us to run Dijkstra's on each node in the visit set again, but since the output of Dijkstra's is cached, this would actually only take $O(n)$ time. Next, a pairwise swap is done, which adds every node in the visit set to a new array in a differing order which is also in $O(n)$ time. Finally, the cost is calculated again, leaving us with a final total of $O(3n)$. Overall, this means that this process is done in linear time for $i$ iterations, leaving a final time complexity of $O(i \\times n)$. \n\nSimulated Annealing has the exact same time complexity as Hill Climbing because the only major difference is if a candidate solution is accepted or not and this is done in $O(1)$ time because the time complexity of selecting a random number is $O(1)$.\n\nThis leaves us with a final time complexity of $O(n \\times L^{2} + i \\times n)$ = $O(n(L^{2}+i))$. \n\n### Tractability \u0026 Implications\n\nAs discussed above, the time complexity for the exact algorithm is effectively $O(2^{n})$ and the time complexity for the approximate algorithms is $O(n(L^{2}+i))$ where $n$ is the size of the visit set, $L$ is the number of landmarks in the graph overall and $i$ is the amount of times that the optimisation algorithm will iterate. $i$ will typically be a constant and can therefore be ignored and for the same input graph (this assumption was made for the simplification of Held-Karp too) $L^{2}$ will be constant as well.\n\nIn effect, this means that for the same input graph, the time complexities we are looking at are $O(2^{n})$ vs $O(n)$ as the visit set size increases by a constant factor. The vast difference between these two time complexities shows how easily approximate solutions can be derived in polynomial time, which helps make this problem more tractable. Namely, this demonstrates that the problem of finding a solution to the TSP within a set factor of the optimal solution is a tractable one, even if finding the *actual* optimal solution is not.\n\nThis has many implications for the real world applications of the broader version of this problem. Though the discussion above concluded that the exact algorithm would be superior for the initial specified problem, the tradeoff of lower accuracy for an improved time complexity can be beneficial to many use-cases. Below is a list of applications that would be better suited to either type of algorithm:\n\n**Exact Algorithm**:\n\n- An exact algorithm would be well suited to static non-changing data where time is not much of a concern but the best solution is required. In a scenario where large freeways need to be built to visit a few key cities, the geographical data remains mostly static since the overall terrain does not change suddenly, but an inefficient solution could cost millions. Similarly, in wartime where tunnels and bunker networks need to be built that connect everyone to a few key locations, a few extra kilometres could result in hundreds of lost lives. In cases like this, provided that the number of key locations is sufficiently small, users would likely not mind waiting for a more optimal output.\n\n**Approximate Algorithm**:\n\n- As discussed previously, an approximate algorithm would be very well suited to logistics/trucking companies that have to move a lot of shipments and goods across the country fast. The nature of real world companies means that clients would appear and disappear on a daily basis, and there are always new locations to be delivered to or picked up from. Since the input graph is dynamically changing, an exact solution would be very quickly out of date and an $O(n)$ time complexity would be preferred over the intractable $O(2^{n})$ complexity since the amount of pickup points would simply be so large.\n- An approximate algorithm would be well suited to data routing, specifically peer to peer networks that want to connect a large group of people. For example, a P2P video conferencing call would need to find a sufficiently small closed walk to ensure that the call has minimal delay. Since the input data for this case would be constantly changing (people leaving and joining with variable bandwidths), it would need to be run very often, and an intractable solution would not suffice.\n\nThis being said, most applications would be better suited to a combination of both. With a small number of nodes in the visit set, the intractability of finding an exact solution is not much of an issue, as the speeds are virtually instant anyway, but anything above about 15 to 20 nodes will render the computational time to be prohibitive. As such, for most real world applications, it makes more sense to use a combination of both the algorithms and switch over once the input size has exceeded the practical time constraints a layman user would expect. Such is the case with the initial solution, as described above.\n\n\\newpage\n\n## Appendix\n\n### Initial Pseudocode\n\nThe following is the final pseudocode reiterated from the previous 2 parts, namely for convenience while analysing, since multiple modifications were made to the initial pseudocode. A Python implementation of this pseudocode can be found [here](https://github.com/garv-shah/brain/blob/hugo/content/notes/School%20Subjects/Algorithmics/SAT/main_old.py).\n\nLet $A =$ starting vertex\nLet $B =$ ending vertex\nLet $S = \\{P, Q, R\\}$ or any other vertices to be visited along the way.\nLet $C \\in S$ (random node in $S$)\n\n#### Main Function\n\n```\nfunction main(\n\tfriends: dictionary,\n\tlandmarks: dictionary,\n\troutes: dictionary,\n\ttimetable: dictionary\n):\n\t// global variable declarations\n\tconcession: bool = Ask the user \"Do you posses a concession card?\"\n\tholiday: bool = Ask the user \"Is today a weekend or a holiday?\"\n\tuser_name: string = Ask the user to select a friend from friends dictionary\n\tselected_time = Ask the user what time they are leaving\n\t\n\tcached_djk: dictionary = empty dictionary\n\tedge_lookup_matrix: matrix = |V| x |V| matrix that stores a list of edges in each entry\n\t\n\t// get distance of all friends from landmarks\n\tfriend_distances: dictionary = calculate_nodes(friends, landmarks)\n\tvisit_set: set = set of all closest nodes from friend_distances\n\tpeople_at_nodes: dictionary = all friends sorted into keys of which nodes they are closest to, from visit_set\n\t\n\thome: string = closest node of user_name\n\t\n\tprint all friends, where they live closest to and how far away\n\t\n\tprint out friends that would take more than 20 minutes to walk (average human walking speed is 5.1 km/h)\n\t\n\thamiltonian_path = held_karp(home, home, visit_set, selected_time)\n\t\n\tprint how much the trip would cost and how long it would take\n\t\n\tprint the path of the hamiltonian_path\nend function\n```\n\n#### Calculate Nodes\n\n```\nfunction calculate_nodes (\n\tfriend_data: dictionary,\n\tnode_data: dictionary\n):\n\tfor friend in friend_data:\n\t\thome: tuple = friend['home']\n\t\t// initial min vals that will be set to smallest iterated distance\n\t\tmin: float = infinity\n\t\tmin_node: node = null\n\t\t\n\t\tfor node in node_data:\n\t\t\tlocation: tuple = node['coordinates']\n\t\t\t// find real life distance (functional abstraction)\n\t\t\tdistance: float = latlong_distance(home, location)\n\t\t\tif distance \u003c min:\n\t\t\t\tmin = distance\n\t\t\t\tmin_node = node\n\t\t\n\t\tdistance_dict[friend]['min_node'] = min_node\n\t\tdistance_dict[friend]['distance'] = min\nend function\n```\n\n#### Held-Karp\n\n```\nfunction held_karp (\n    start: node,\n    end: node,\n    visit: set\u003cnode\u003e,\n    current_time: datetime\n):\n    if visit.size = 0:\n    \tdjk = fetch_djk(start, end, current_time)\n\t\treturn djk['cost']\n    else:\n        min = infinity\n        For node C in set S:\n\t        sub_path = held_karp(start, C, (set \\ C), current_time)\n\t        djk = fetch_djk(C, end, current_time + toMinutes(sub_path['cost']))\n\t        cost = sub_path['cost'] + djk['cost']\n\t        if cost \u003c min:\n\t            min = cost\n\t    return min\nend function\n```\n\n#### Dijkstra's\n\n```\nfunction dijkstras (\n    start: node,\n    current_time: datetime\n):\n    // Set all node distance to infinity\n    for node in graph:\n        distance[node] = infinity\n        predecessor[node] = null\n        unexplored_list.add(node)\n    \n    // starting distance has to be 0\n    distance[start] = 0\n    \n    // while more to still explore\n    while unexplored_list is not empty:\n        min_node = unexplored node with min cost\n        unexplored_list.remove(min_node)\n    \n\t    // go through every neighbour and relax\n        for each neighbour of min_node:\n            current_dist = distance[min_node] + dist(min_node, neighbour, current_time + to_minutes(distance[min_node]))\n            // a shorter path has been found to the neighbour -\u003e relax value\n            if current_dist \u003c distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n    \n    return {\n\t    'distances': distance,\n\t    'predecessors': predecessor,\n    }\nend function\n```\n\n#### Fetch Dijkstra's (Cached)\n\n```\ncached_djk = dictionary of node -\u003e dict\n\nfunction fetch_djk (\n    start: node,\n    end: node,\n    current_time: datetime,\n):\n\tname = start + '@' + current_time\n\t\n    if cached_djk[name] does not exists:\n        cached_djk[name] = dijkstras(start, current_time)\n    \n    djk = cached_djk[name]\n    # reconstructs the path  \n    path = [end] as queue\n    while path.back != start:\n        path.enqueue(djk['predecessors'][path.back])\n    \n    return {\n        'distance': djk['distances'][end],\n        'path': path\n    }\nend function\n```\n\n#### Distance Function\n\n```\nfunction dist (\n\tstart: node,\n\tend: node,\n\tcurrent_time: datetime\n):\t\n\t// if the start and end node are the same, it takes no time to get there\n\tif start = end:\n\t\treturn 0\n\telse if edges = null:\n\t\t// if no edge exists between nodes\n\t\treturn infinity\n\t\n\tedges = edge_lookup_matrix[start][end]\n\tdistances = []\n\t\n\t// go over each possible edge between nodes (multiple possible)\n\tfor edge in edges:\n\t\tline = edge.line\n\t\t// next time bus/train will be at node (functional abstraction)\n\t\tnext_time = soonest_time_at_node(timetable, line, start, current_time)\n\t\twait_time = next_time - current_time\n\t\tdistances.add(edge.weight + wait_time)\n\t\n\treturn min(distances)\nend function\n```\n\n\\newpage\n\n### Modified Exact Algorithm Pseudocode\n\nBelow is the final pseudocode for the exact algorithm, based on Held-Karp. A Python implementation of the following pseudocode can be found [here](https://github.com/garv-shah/brain/blob/hugo/content/notes/School%20Subjects/Algorithmics/SAT/main.py).\n\nLet $A =$ starting vertex\nLet $B =$ ending vertex\nLet $S = \\{P, Q, R\\}$ or any other vertices to be visited along the way.\nLet $C \\in S$ (random node in $S$)\n\n#### Main Function\n\n```\nfunction main(\n\tfriends: dictionary,\n\tlandmarks: dictionary,\n\troutes: dictionary,\n\ttimetable: dictionary\n):\n\t// global variable declarations\n\tconcession: bool = Ask the user \"Do you posses a concession card?\"\n\tholiday: bool = Ask the user \"Is today a weekend or a holiday?\"\n\tuser_name: string = Ask the user to select a friend from friends dictionary\n\tselected_time = Ask the user what time they are leaving\n\t\n\tcached_djk: dictionary = empty dictionary\n\tedge_lookup_matrix: matrix = |V| x |V| matrix that stores a list of edges in each entry\n\t\n\t// get distance of all friends from landmarks\n\tfriend_distances: dictionary = calculate_nodes(friends, landmarks)\n\tvisit_set: set = set of all closest nodes from friend_distances\n\tpeople_at_nodes: dictionary = all friends sorted into keys of which nodes they are closest to, from visit_set\n\t\n\thome: string = closest node of user_name\n\t\n\tprint all friends, where they live closest to and how far away\n\t\n\tprint out friends that would take more than 20 minutes to walk (average human walking speed is 5.1 km/h)\n\t\n\thamiltonian_path = fetch_hk(home, home, visit_set, selected_time)\n\t\n\tprint how much the trip would cost and how long it would take\n\t\n\tprint the path of the hamiltonian_path\nend function\n```\n\n#### Calculate Nodes\n\n```\nfunction calculate_nodes (\n\tfriend_data: dictionary,\n\tnode_data: dictionary\n):\n\tfor friend in friend_data:\n\t\thome: tuple = friend['home']\n\t\t// initial min vals that will be set to smallest iterated distance\n\t\tmin: float = infinity\n\t\tmin_node: node = null\n\t\t\n\t\tfor node in node_data:\n\t\t\tlocation: tuple = node['coordinates']\n\t\t\t// find real life distance (functional abstraction)\n\t\t\tdistance: float = latlong_distance(home, location)\n\t\t\tif distance \u003c min:\n\t\t\t\tmin = distance\n\t\t\t\tmin_node = node\n\t\t\n\t\tdistance_dict[friend]['min_node'] = min_node\n\t\tdistance_dict[friend]['distance'] = min\nend function\n```\n\n#### Held-Karp\n\n```\nfunction held_karp (\n    start: node,\n    end: node,\n    visit: set\u003cnode\u003e,\n    current_time: datetime\n):\n    if visit.size = 0:\n    \tdjk = fetch_djk(start, end, current_time)\n\t\treturn djk['cost']\n    else:\n        min = infinity\n        For node C in set S:\n\t        sub_path = fetch_hk(start, C, (set \\ C), current_time)\n\t        djk = fetch_djk(C, end, current_time + toMinutes(sub_path['cost']))\n\t        cost = sub_path['cost'] + djk['cost']\n\t        if cost \u003c min:\n\t            min = cost\n\t    return min\nend function\n```\n\n#### Fetch Held-Karp (Cached)\n\n```\ncached_hk = dictionary of list -\u003e dict\n\nfunction fetch_hk (\n\tstart: node, \n\tend: node,\n\tvisit: set of nodes,\n\tcurrent_time: datetime,\n):\n\t// unique identifier\n\tname = start + '-' + end + visit set + '@' + current_time\n\tif cached_hk[name] does not exists:\n\t\tcached_hk[name] = held_karp(start, end, visit, current_time)\n\treturn cached_hk[name]\nend function\n```\n\n#### Dijkstra's\n\n```\nfunction dijkstras (\n    start: node,\n    current_time: datetime\n):\n\tunexplored = empty min priority queue of nodes based on distance\n\t\n    // Set all node distance to infinity\n    for node in graph:\n        distance[node] = infinity\n        predecessor[node] = null\n        unexplored.add(node)\n    \n    // starting distance has to be 0\n    distance[start] = 0\n    \n    // while more to still explore\n    while unexplored is not empty:\n        min_node = unexplored.minimum_node()\n        unexplored.remove(min_node)\n    \n\t    // go through every neighbour and relax\n        for each neighbour of min_node:\n            current_dist = distance[min_node] + dist(min_node, neighbour, current_time + to_minutes(distance[min_node]))\n            // a shorter path has been found to the neighbour -\u003e relax value\n            if current_dist \u003c distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n    \n    return {\n\t    'distances': distance,\n\t    'predecessors': predecessor,\n    }\nend function\n```\n\n#### Fetch Dijkstra's (Cached)\n\n```\ncached_djk = dictionary of node -\u003e dict\n\nfunction fetch_djk (\n    start: node,\n    end: node,\n    current_time: datetime,\n):\n\tname = start + '@' + current_time\n\t\n    if cached_djk[name] does not exists:\n        cached_djk[name] = dijkstras(start, current_time)\n    \n    djk = cached_djk[name]\n    # reconstructs the path  \n    path = [end] as queue\n    while path.back != start:\n        path.enqueue(djk['predecessors'][path.back])\n    \n    return {\n        'distance': djk['distances'][end],\n        'path': path\n    }\nend function\n```\n\n#### Distance Function\n\n```\nfunction dist (\n\tstart: node,\n\tend: node,\n\tcurrent_time: datetime\n):\t\n\t// if the start and end node are the same, it takes no time to get there\n\tif start = end:\n\t\treturn 0\n\telse if edges = null:\n\t\t// if no edge exists between nodes\n\t\treturn infinity\n\t\n\tedges = edge_lookup_matrix[start][end]\n\tdistances = []\n\t\n\t// go over each possible edge between nodes (multiple possible)\n\tfor edge in edges:\n\t\twait_time = wait time from data (precomputed)\n\t\tdistances.add(edge.weight + wait_time)\n\t\n\treturn min(distances)\nend function\n```\n\n\\newpage\n\n### Approximate Algorithm Pseudocode\n\nBelow is the final pseudocode for the approximate algorithm, using Simulated Annealing. A Python implementation of the following pseudocode can be found [here](https://github.com/garv-shah/brain/blob/hugo/content/notes/School%20Subjects/Algorithmics/SAT/main_approximate.py).\n\nLet $A =$ starting vertex\nLet $B =$ ending vertex\nLet $S = \\{P, Q, R\\}$ or any other vertices to be visited along the way.\nLet $C \\in S$ (random node in $S$)\n\n#### Main Function\n\n```\nfunction main(\n\tfriends: dictionary,\n\tlandmarks: dictionary,\n\troutes: dictionary,\n\ttimetable: dictionary\n):\n\t// global variable declarations\n\tconcession: bool = Ask the user \"Do you posses a concession card?\"\n\tholiday: bool = Ask the user \"Is today a weekend or a holiday?\"\n\tuser_name: string = Ask the user to select a friend from friends dictionary\n\tselected_time = Ask the user what time they are leaving\n\t\n\tcached_djk: dictionary = empty dictionary\n\tedge_lookup_matrix: matrix = |V| x |V| matrix that stores a list of edges in each entry\n\t\n\t// get distance of all friends from landmarks\n\tfriend_distances: dictionary = calculate_nodes(friends, landmarks)\n\tvisit_set: set = set of all closest nodes from friend_distances\n\tpeople_at_nodes: dictionary = all friends sorted into keys of which nodes they are closest to, from visit_set\n\t\n\thome: string = closest node of user_name\n\t\n\tprint all friends, where they live closest to and how far away\n\t\n\tprint out friends that would take more than 20 minutes to walk (average human walking speed is 5.1 km/h)\n\t\n\tcandidate = candidate_solution(home, home, visit_set, selected_time)\n\thamiltonian_path = simulated_annealing(candidate['path'], selected_time)\n\t// or hill_climbing(candidate['path'], selected_time)\n\t\n\thamiltonian_path['path'] = normalise_path(hamiltonian_path['path'], selected_time)\n\t\n\tprint how much the trip would cost and how long it would take\n\t\n\tprint the path of the hamiltonian_path\nend function\n```\n\n#### Calculate Nodes\n\n```\nfunction calculate_nodes (\n\tfriend_data: dictionary,\n\tnode_data: dictionary\n):\n\tfor friend in friend_data:\n\t\thome: tuple = friend['home']\n\t\t// initial min vals that will be set to smallest iterated distance\n\t\tmin: float = infinity\n\t\tmin_node: node = null\n\t\t\n\t\tfor node in node_data:\n\t\t\tlocation: tuple = node['coordinates']\n\t\t\t// find real life distance (functional abstraction)\n\t\t\tdistance: float = latlong_distance(home, location)\n\t\t\tif distance \u003c min:\n\t\t\t\tmin = distance\n\t\t\t\tmin_node = node\n\t\t\n\t\tdistance_dict[friend]['min_node'] = min_node\n\t\tdistance_dict[friend]['distance'] = min\nend function\n```\n\n#### Candidate Solution (NN Heuristic)\n\n```\n// creates a canditate solution using the NN Heuristic\nfunction canditate_solution (\n\tstart: node, \n\tend: node,\n\tvisit: set of nodes,\n\tcurrent_time: datetime,\n):\n\tpath = [start]\n\tcurrent_vertex = start\n\tcost = 0\n\t\n\twhile len(visit) != 0:\n\t\tclosest_node = fetch_djk(current_vertex, visit, current_time)\n\t\tpath.add(closest_node)\n\t\tcost += closest_node.cost\n\t\tvisit.remove(closest_node)\n\t\tcurrent_vertex = closest_node\n\t\n\t// go back to the end node\n\tclosest_node = fetch_djk(current_vertex, end, current_time)\n\tpath.add(closest_node)\n\tcost += closest_node.cost\n\t\n\treturn {'path': path, 'cost': cost}\nend function\n```\n\n#### Pairwise Swap\n\n```\nfunction pairwise_swap (\n\tu: integer,\n\tv: integer,\n\tpath: path of nodes\n):\n\tnew_tour = []\n\t\n\tfor i in [0, u]:\n\t\tnew_tour.add(path[i])\n\tfor i in [v, u):\n\t\tnew_tour.add(path[i])\n\tfor i in (v, len(path)]:\n\t\tnew_tour.add(path[i])\n\t\n\treturn new_tour\nend function\n```\n\n#### Calculate Cost\n\n```\nfunction calculate_cost (\n\tpath: path of nodes,\n\tcurrent_time: datetime\n):\n\tcost = 0\n\ttime = current_time\n\t\n\tfor i from 0 to len(path) - 1:\n\t\tdjk = fetch_djk(path[i], path[i + 1], current_time)\n\t\tcost += djk['cost']\n\t\ttime += djk['cost'] number of minutes\n\t\n\treturn cost\nend function\n```\n\n#### Hill Climbing\n\n```\nfunction hill_climbing (\n\tcandidate: path of nodes,\n\tcurrent_time: datetime,\n\tfail_count: int = 0\n):\n\tif fail_count \u003c 200:\n\t\tcost = calculate_cost(candidate, current_time)\n\t\tu = random number from 1 to len(candidate) - 1 inclusive\n\t\tv = random number from u to len(candidate) - 1 inclusive\n\t\t\n\t\tnew_tour = pairwise_swap(u, v, candidate)\n\t\tnew_cost = calculate_cost(new_tour, current_time)\n\t\t\n\t\tif new_cost \u003c= cost:\n\t\t\t// new cost is better/equal -\u003e accept\n\t\t\treturn hill_climbing(new_tour, current_time, 0)\n\t\telse:\n\t\t\t// new cost is worse -\u003e go again\n\t\t\treturn hill_climbing(candidate, current_time, fail_count + 1)\n\telse:\n\t\treturn candidate\nend function\n```\n\n#### Simulated Annealing\n\n```\nfunction simulated_annealing (\n\tcandidate: path of nodes,\n\tcurrent_time: datetime,\n):\n\t// parameters to fiddle with\n\ttemp = 0.98\n\tmin_temp = 0.00001\n\ttemp_change = 5\n\tbeta = 1.2\n\talpha = 0.85\n\t\n\told_cost = calculate_cost(candidate, current_time)\n\t\n\twhile temp \u003e min_temp:\n\t\tfor n from 1 to temp_change:\n\t\t\tu = random number from 1 to len(candidate) - 1 inclusive\n\t\t\tv = random number from u to len(candidate) - 1 inclusive\n\t\t\t\n\t\t\tnew_tour = pairwise_swap(u, v, candidate)\n\t\t\tnew_cost = calculate_cost(new_tour, current_time)\n\t\t\t\n\t\t\tap = acceptance_probability(old_cost, new_cost, beta, temp)\n\t\t\t\n\t\t\tif ap \u003e random float from 0 to 1:\n\t\t\t\tcandidate = new_tour\n\t\t\t\told_cost = new_cost\n\t\t\t\n\t\ttemp *= alpha\n\t\t\n\treturn candidate\nend function\n```\n\n#### Acceptance Probability\n\n```\nfunction acceptance_probability (\n\told_cost: number,\n\tnew_cost: number,\n\tbeta: number,\n\ttemp: number\n):\n\tc = new_cost - old_cost\n\t\n\tif c \u003c= 0:\n\t\treturn 1\n\telse:\n\t\treturn e**((-beta * c)/temp)\nend function\n```\n\n#### Dijkstra's\n\n```\nfunction dijkstras (\n    start: node,\n    current_time: datetime\n):\n\tunexplored = empty min priority queue of nodes based on distance\n\t\n    // Set all node distance to infinity\n    for node in graph:\n        distance[node] = infinity\n        predecessor[node] = null\n        unexplored.add(node)\n    \n    // starting distance has to be 0\n    distance[start] = 0\n    \n    // while more to still explore\n    while unexplored is not empty:\n        min_node = unexplored.minimum_node()\n        unexplored.remove(min_node)\n    \n\t    // go through every neighbour and relax\n        for each neighbour of min_node:\n            current_dist = distance[min_node] + dist(min_node, neighbour, current_time + to_minutes(distance[min_node]))\n            // a shorter path has been found to the neighbour -\u003e relax value\n            if current_dist \u003c distance[neighbour]:\n                distance[neighbour] = current_dist\n                predecessor[neighbour] = min_node\n    \n    return {\n\t    'distances': distance,\n\t    'predecessors': predecessor,\n    }\nend function\n```\n\n#### Fetch Dijkstra's (Cached)\n\n```\ncached_djk = dictionary of node -\u003e dict\n\nfunction fetch_djk (\n    start: node,\n    end: node,\n    current_time: datetime,\n):\n\tname = start + '@' + current_time\n\t\n    if cached_djk[name] does not exists:\n        cached_djk[name] = dijkstras(start, current_time)\n    \n    djk = cached_djk[name]\n    # reconstructs the path  \n    path = [end] as queue\n    while path.back != start:\n        path.enqueue(djk['predecessors'][path.back])\n    \n    return {\n        'distance': djk['distances'][end],\n        'path': path\n    }\nend function\n```\n\n#### Distance Function\n\n```\nfunction dist (\n\tstart: node,\n\tend: node,\n\tcurrent_time: datetime\n):\t\n\t// if the start and end node are the same, it takes no time to get there\n\tif start = end:\n\t\treturn 0\n\telse if edges = null:\n\t\t// if no edge exists between nodes\n\t\treturn infinity\n\t\n\tedges = edge_lookup_matrix[start][end]\n\tdistances = []\n\t\n\t// go over each possible edge between nodes (multiple possible)\n\tfor edge in edges:\n\t\twait_time = wait time from data (precomputed)\n\t\tdistances.add(edge.weight + wait_time)\n\t\n\treturn min(distances)\nend function\n```\n\n#### Normalising Function\n\n```\nfunction normalise_path (\n\tpath: path of nodes,\n\tcurrent_time: datetime\n):\n\treturn_path = []\n\ttime = current_time\n\t\n\tfor i from 0 to len(path) - 1:\n\t\tdjk = fetch_djk(path[i], path[i + 1], current_time)\n\t\ttime += djk['cost'] number of minutes\n\t\t// this is to prevent the last and first item double up\n\t\treturn_path += everything in djk['path'] except last item\n\t\n\treturn_route.add(last item in route)\n\t\n\treturn cost\nend function\n```\n","lastmodified":"2023-09-07T08:27:08.488881782Z","tags":[]},"/notes/School-Subjects/Algorithmics/Time-Complexity":{"title":"Time Complexity","content":"Dictionaries are O(1) time","lastmodified":"2023-09-07T08:27:08.500881884Z","tags":[]},"/notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-1/Goat-Cabbage-Wolf-Hunter":{"title":"Goat Cabbage Wolf Hunter","content":"\n\u003e [!info]\n\u003e \n\u003e You have 4n counters of 4 types: n wolves, n goats, n cabbages, and n hunters. The aim is to place them in a row such that no-one is in danger: no hunter is next to a wolf, no wolf is next to a goat, no goat is next to a cabbage. Also no two counters may be placed next to each other. How many ways are there to solve the puzzle?\n\nFirst you can write down the rules in the opposite way. The question defines what can't be next to what, so we can say what can be next to what.  \n  \nG can be next to H  \nH can be next to C \u0026 G  \nW can be next to C  \nC can be next to H \u0026 W  \n  \nThis can be visualised by turning each into its own node, and making arrows to what it can be next to:  \nW \u003c--\u003e C \u003c--\u003e H \u003c--\u003e G  \n\n```mermaid\nflowchart TD\n1[Wolf] \u003c--\u003e Cabbage \u003c--\u003e Hunter \u003c--\u003e Goat\n```\n  \nEvidently from this we can see that for all n, the sequence must start at W or G, because if it does not we would not be able to have an equal amount of all counters. For example, for n = 1, we can do WCHG or GHCW. For n = 2 we can do, WCWCHGHG or GHGHCWCW, and so on, given our restriction of all counters being equal in number.  \n  \n‚à¥ We can conclude that for all n, there are two solutions, starting with either W or G  \n  \n(this ended up being quite a similar answer to Blake, great minds must think alike haha)","lastmodified":"2023-09-07T08:27:08.512881987Z","tags":[]},"/notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-1/Task-3":{"title":"Task 3","content":"a) You could fill up the 3 litre jug, pour it into the 5 litre jug, fill up the 3 litre jug again, pour as much as you can into the 5 litre jug until it is full, meaning you will have 1 litre remaining in the 3 litre jug, and finally empty the 5 litre jug. This leaves you with just 1 litre in the 3 litre jug. \n\nb) You could probably write it out in steps \n\n1. Fill up the 3 litre jug so it is full \n2. Pour this amount into the 5 litre jug \n3. Fill up the 3 litre jug so it is full \n4. Pour water from the 3 litre jug into the 5 litre jug until the 5 litre jug is full, leaving a litre in the 3 litre jug \n5. Empty the 5 litre jug \n\nc) Yes, I made a diagram and it seems to be the most efficient","lastmodified":"2023-09-07T08:27:08.512881987Z","tags":[]},"/notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-2/Locker-Door-Problem":{"title":"Locker Door Problem","content":"\n\u003e [!info]\n\u003e \n\u003e There are¬†_n_¬†lockers in a hallway, numbered sequentially from 1 to¬†_n_. Initially all the locker doors are closed. You make¬†_n_¬†passes by the lockers, each time starting with locker 1.\n\u003e \n\u003e On the¬†_ith_¬†path, i = 1,2,..._n_¬†you toggle the door of every¬†_ith_¬†locker; if the door is closed, you open it; if it is open, you close it.\n\u003e \n\u003e After the last pass, which locker doors are open and which are closed? How many of them are open?\n\n```python\nn = input('Please enter a value for n, the amount of locker doors: ')  \n  \n# validate n as positive integer  \nwhile True:  \n    try:  \n        n = int(n)  \n        if n \u003c= 0:  \n            print('n must be a positive integer')  \n            n = input('Please enter a value for n, the amount of locker doors: ')  \n        else:  \n            break  \n    except ValueError:  \n        print('n must be a positive integer')  \n        n = input('Please enter a value for n, the amount of locker doors: ')  \n  \nprint(f'\\nStarting algorithm with {n} locker doors')  \n  \ndoors = [False] * n  \n  \nfor door in range(1, n + 1):  \n    for i in range(door, n + 1, door):  \n        doors[i - 1] = not doors[i - 1]  \n  \nprint(doors)  \nprint(f'There are a total of {sum(doors)} doors open at the end')\n```\n\n\n\n","lastmodified":"2023-09-07T08:27:08.516882021Z","tags":[]},"/notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-2/Sweet-Treats-Pseudocode":{"title":"Sweet Treats Pseudocode","content":"\n\u003e [!info]\n\u003e \n\u003e Complete the following algorithm using pseudocode to instruct the factory‚Äôs robotic arm to sort the sweets into their individual colour buckets so that the packing process can begin.  \n\nBegin sorting  \n\tWhile sweet in tub  \n\t\tGrab sweet  \n\t\tCheck sweet colour  \n\t\tIf colour = pink  \n\t\t\tThen place the sweet bucket  \n\t\tElse if colour = green  \n\t\t\tThen place in the green bucket  \n\t\tElse if colour = purple  \n\t\t\tThen place in the purple bucket  \n\t\tElse if colour = orange  \n\t\t\tThen place in the orange bucket \n\t\tElse if colour = yellow\n\t\t\tThen place in the yellow bucket\n\tEnd While  \nEnd sorting\n\n\u003e [!info]\n\u003e \n\u003e Extend upon the algorithm you developed in Exercise 1 to allow the program to count the total number of sweets sorted and the quantity of each colour placed into the individual buckets.\n\nBegin sorting  \n\tSet total sweets to zero\n\tSet pink, green, purple and yellow to zero\n\tWhile sweet in tub  \n\t\tGrab sweet  \n\t\tAdd 1 to total sweets\n\t\tCheck sweet colour  \n\t\tIf colour = pink  \n\t\t\tThen place the sweet bucket \n\t\t\tAdd 1 to pink count \n\t\tElse if colour = green  \n\t\t\tThen place in the green bucket \n\t\t\tAdd 1 to green count  \n\t\tElse if colour = purple  \n\t\t\tThen place in the purple bucket  \n\t\t\tAdd 1 to purple count \n\t\tElse if colour = orange  \n\t\t\tThen place in the orange bucket \n\t\t\tAdd 1 to orange count \n\t\tElse if colour = yellow\n\t\t\tThen place in the yellow bucket\n\t\t\tAdd 1 to yellow count \n\tEnd While  \nEnd sorting\n\n\u003e [!info]\n\u003e \n\u003e On a scale of 1 to 10, how likely are you to use pseudocode to help you design your next program? Justify your response.\n\nProbably like a 2, since typing in a hybrid language is generally not too useful in terms of time, since the in languages where the syntax is simple (like Python), pseudocode is almost equivalent to the syntax.","lastmodified":"2023-09-07T08:27:08.516882021Z","tags":[]},"/notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-2/Writing-Pseudocode":{"title":"Writing Pseudocode","content":"\n\u003e [!info]\n\u003e \n\u003e Write an algorithm in pseudocode to find the area of a shape from the list {square, rectangle, circle}. \n\u003e \n\u003e Consider what inputs would be required for each shape.\n\nBegin AreaShape(Inputs: shapeType, d1, d2)\n\tSet Area to zero\n\tIf (Shape is a square OR Shape is a rectangle) Then\n\t\tArea = d1 * d2\n\tElse if (Shape is a circle) Then\n\t\tArea = pi * d1 ^ 2\n\tElse\n\t\tPrint \"invalid shape\"\n\tEnd If\n\t\n\tPrint Area\nEnd AreaShape\n\n\u003e [!info]\n\u003e \n\u003e Design an algorithm to find all the common elements in two sorted lists of numbers. For example, for the list A {2,5,5,5} and list B {2,2,3,5,5,7} the output should be 2,5,5.  \n\u003e \n\u003e Think about what is the maximum number of comparisons your algorithm makes if the lengths of the two given lists are¬†_m_¬†and¬†_n_, respectively?\n\nBegin InCommon(Inputs: list1, list2)\n\tSet CommonList to empty\n\t\n\tSet list1_counter to 1\n\tSet list2_counter to 1\n\t\n\tRepeat until (counter for list1 is larger than list length OR counter for list2 is larger than list length)\n\t\tIf (list1[list1_counter] is equal to list2[list2_counter]) Then\n\t\t\tadd list1[list1_counter] to CommonList\n\t\t\tIncrement both counters\n\t\tElse If (list1[list1_counter] \u003c list2[list2_counter]) Then\n\t\t\tIncrement list1_counter\n\t\tElse If (list1[list1_counter] \u003e list2[list2_counter]) Then\n\t\t\tIncrement list2_counter\n\t\tEnd If\n\tEnd Loop\n\tReturn CommonList\nEnd InCommon\n","lastmodified":"2023-09-07T08:27:08.516882021Z","tags":[]},"/notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-4/Bridge-Crossing-Problem":{"title":"Bridge Crossing Problem","content":"#algo #graphtheory \n\nFour friends need to cross a bridge. They start on the same side of the bridge.\n\nA maximum of two people can cross at any time.\n\nIt is night and they have just one lamp. People that cross the bridge must carry the lamp to see the way.\n\nA pair must walk together at the rate of the slower person.\n\n-   Ann takes 1 minute to cross\n-   Ben takes 2 minutes to cross\n-   Con takes 7 minutes to cross\n-   Dora takes 10 minutes to cross\n\nIn the forum, collaborate with your classmate:\n\n1.  Represent the model as a graph/digraph or tree.\n2.  Describe using Graph Terminology the properties of each model.\n   \nAs you can see from this partial tree diagram (it was too much effort to complete it üò≠), the problem can also be modelled similar to events in probability, where every possible action after one action is noted down in a tree like structure.\n\nIn this case, the nodes represent a person (or pair) walking across the bridge, and the edges represent the process of crossing the bridge, the number showing the amount of time this takes.\n\n   ```mermaid\ngraph TB\n\tA((A: 1))\n\tB((A: 2))\n\tC((A: 7))\n\tD((A: 10))\n```\n\n```mermaid\ngraph LR\n    S((Start)) --\u003e|2| A+B --\u003e|1| A1[A]\n    S --\u003e|7| A+C --\u003e|1| A2[A]\n    S --\u003e|10| A+D --\u003e|1| A3[A]\n    S --\u003e|7| B+C --\u003e|2| B1[B]\n    S --\u003e|10| B+D --\u003e|2| B2[B]\n    S --\u003e|10| C+D --\u003e|7| C1[C]\n    \n    A1 --\u003e|10| A+D1[A+D] --\u003e|1| A4[A] --\u003e|7| AC[A+C]\n    A1 --\u003e|7| A+C1[A+C] --\u003e|1| A5[A] --\u003e|10| AD[A+D]\n    \n    A2 --\u003e|2| A+B1[A+B] --\u003e|1| A6[A] --\u003e|10| A+D3[A+D]\n    A2 --\u003e|10| A+D2[A+D] --\u003e|1| A7[A] --\u003e|2| A+B2[A+B]\n    \n    A3 --\u003e|2| A+B3[A+B] --\u003e|1| A8[A] --\u003e|7| A+C2[A+C]\n    A3 --\u003e|7| A+C3[A+C] --\u003e|1| A9[A] --\u003e|2| A+B4[A+B]\n```","lastmodified":"2023-09-07T08:27:08.516882021Z","tags":[]},"/notes/School-Subjects/Algorithmics/Weeks/Unit-3/Week-4/Graphs-as-ADTs":{"title":"Graphs as ADTs","content":"#algo #graphtheory\n\n\u003e [!info]\n\u003e \n\u003e For each scenario below:  \n\u003e a) represent the model as a graph/digraph or tree  \n\u003e b) describe the properties of the model using graph terminology.\n\n\u003e Connections of two light bulbs, a battery and a switch as an electric circuit with wire.\n\n```mermaid\nflowchart LR\nA[Lightbulb] --\u003e B[Lightbulb]\nB --\u003e C[Switch]\nC --\u003e D[Battery]\nD --\u003e A\n```\nThis is a connected, directed cyclic graph, where the nodes represent items in the circuit and the edges represent wires \n\n\u003e The food chain of one of the following living things: cat, bird, bug, grasshopper, aphid, rose, daisy, wheat.\n\n```mermaid\ngraph TB\n    A((Cat))--\u003eB((Bird))\n    B--\u003eC((Grasshopper))\n    B--\u003eD((Bug))\n    D--\u003eE((Aphid))\n    E--\u003eF((Roses))\n    C--\u003eG((Daisy))\n    C--\u003eH((Wheat))\n```\nThis would be a directed tree, where the root is the top of the food chain. The leaves of the tree are the bottom of the food chain (Roses, Daisy and Wheat). Nodes represent living things and edges who eats what. Edges represent who eats what, the tail being the eater and the head being the food.\n\n3.  A character map of your favourite TV show or film.\n4.  Allies and enemies from World War II.\n5.  The main elements of the story of Goldilocks and The Three Bears.","lastmodified":"2023-09-07T08:27:08.516882021Z","tags":[]},"/notes/School-Subjects/English-Language/Child-Language-Acquisition/Bilingualism":{"title":"Bilingualism","content":"#englang #cla \n\n## Development\nChildren can become bilingual or multilingual in two ways:\n### Consecutive #card\nChild learns one language, then another\n^1685840200378\n\n### Simultaneous #card\nChild learns both languages at once\n#### Stages\nSimultaneous bilinguals go through three stages in their development.\n##### Stage 1\nLexicon consists of mixture of words (usually not translations of each other)\n##### Stage 2\nMixing of languages in same utterances\n##### Stage 3\nSeparation into two lexicons, although grasping syntactic and morphological complexity of languages takes greater time\n^1685778007372\n","lastmodified":"2023-09-07T08:27:08.556882362Z","tags":[]},"/notes/School-Subjects/English-Language/Child-Language-Acquisition/CLA-Glossary":{"title":"CLA Glossary","content":"#englang #cla\n\n## Adjacency pairs #card \na simple structure of two (three) turns.\nIn conversation¬†analysis, an¬†_adjacency pair_¬†is a two-part exchange in which the second¬†utterance¬†is functionally dependent on the first, as exhibited in conventional greetings, invitations, and requests.\nExample: Hi Garv, how are you? Good thanks, what about you?\n^1683501100878\n\n## Alliteration #card\nrepeated phonemes at the beginnings of words¬†\n^1683501100883\n\n## Alphabetic principle #card\nthe understanding that there are systematic and predictable relationships between written letters and spoken sounds¬†\n^1683501100885\n\n## Amelioration #card\nthe process by which words or phrases become more positive in meaning over time. A type of [[Semantics#Semantic Change|Semantic Change]].\n^1683501100887\n\n## Babbling #card \nvocal play that involves forming vowel and consonant sounds¬†\n^1683501100888\n\n## Behaviourism #card \na learning theory that focuses on the idea that actions are generally a response to external factors¬†\n^1683501100890\n\n## Child-directed speech #card \nthe particular variation of language used by a caregiver when interacting with young children (other terminology includes motherese, parentese, caretaker speech)¬†\n^1683501100891\n\n## Code switching #card \nswitching from one language or dialect to another, depending on the speakers intended interlocutor or what they wish to accomplish¬†\n^1683501100893\n\n## Communicative competency #card \nthe ability to understand the utterances of others and to be able to make oneself understood (Esp SLA)¬†\n^1683501100894\n\n## Constructive approach #card \nthe approach to language acquisition based on the idea that learners construct new ideas based on existing knowledge¬†\n^1683501100895\n\n## Content words #card \na word within an utterance that is vital to convey meaning¬†\n^1683501100897\n\n## Cooing #card \nWhen the baby is making single vowel sounds like 'ooh' or 'ahh'. Distinct from crying but not yet forming recognisable vowels and consonants¬†\n^1683501100898\n\n## Dialect #card \nvariation in words and structures associated with a geographical region¬†\n^1683501100899\n\n## Diagraphs #card \ntwo letters making one sound. E.g. ch as in ‚Äòchip‚Äô, sh as in ‚Äòshop‚Äô (consonant diagraphs), ea as in ‚Äòeat‚Äô oo as in ‚Äòboot‚Äô (vowel diagraphs)¬†\n^1683501100901\n\n## Discourse markers #card \nwords and phrases or clauses that help to organise information flow.¬† E.g. ok, so, as I was saying, anyway¬†\n^1683501100902\n\n## Egocentric #card \nthinking of (considering) only of oneself, without understanding or regard for the feelings of others.¬†\n^1683501100904\n\n## Grammatical words #card \nwords within a sentence that are needed to indicate the relationship between content words (function words)¬†\n^1683501100905\n\n## High-frequency words #card \nwords which occur frequently in a language¬†\n^1683501100906\n\n## Holophrastic stage #card \nthe point in a child‚Äôs language development in which the child uses individual words to communicate more than that single word‚Äôs meaning¬†\n^1683501100907\n\n## Homophones #card \nsword that sounds the same (maybe spelt differently) but have difference meanings. E.g. saw, sore, soar¬†\n^1683501100909\n\n## Inflection #card \nA change in the form of a word by an affix to express a grammatical function, such as a change in tense, mood, number or gender rather than changing the meaning of the word. Linked to [[Morphology \u0026 Lexicology#Inflectional Morphemes card|Inflectional Morphemes]].\n^1683501100910\n\n## Idiolect #card \nThe unique combination of words, expressions and constructions that an individual habitually uses. If you have ever mimicked a teacher's habitual way of speaking to a class, you have noticed features of their idiolect.\nvariation in language use associated by an individual‚Äôs personalised ‚Äòspeech style‚Äô¬†\n^1683501100911\n\n## Inflectional functions #card \nthe way that an affix shows grammatical category such as a verb tense or plural form of a noun¬†\n^1683501100912\n\n## Mean length of utterance (MLU) #card \nthe way a typical utterance is calculated.¬† The number of words in a transcript divided by the number of ideas.¬† This will be much lower in children and language learners.¬†\n^1683501100913\n\n## Mismatch #card \na label that is applied to an object or concept without a clear link. E.g. calling a dog ‚Äòa tea‚Äô¬†\n^1683501100915\n\n## More Knowledgeable Other #card \n(MKO) the often older and always more knowledgeable participant in an interaction who might offer support to further the child‚Äôs (or language learner‚Äôs) language development or learning¬†\n^1683501100916\n\n## Morphology #card \nYou should know this one!¬†\n^1683501100917\n\n## Nativist theory #card \na language learning theory that suggests an in-built capacity to acquire and make sense of language.¬† Chomsky‚Äôs theory of innateness fits into this category (L.A.D.)¬†\n^1683501100918\n\n## Negative reinforcement #card \ncorrection, negative feedback, or the lack of feedback, which might prevent the child (or language learner) from making the same error repeatedly¬†\n^1683501100919\n\n## Nonce words #card \nAlso known as an occasionalism, nonce words are lexemes created for a single occasion to solve an immediate problem of communication. For example, the word \"wug\" is a nonce word as it was only used for the occasion of the experiment.\n^1683501100920\n\n## Object permanence #card \nan understanding the objects continue to exist even when the cannot be seen or touched¬†\n^1683501100921\n\n## Operant conditioning #card \nthe idea that either a positive of a negative response given by a caregiver can influences the way in which a child talks on future occasions¬†\n^1683501100922\n\n## Oracy #card \nthe use of speaking and listening skills¬†\n^1683501100923\n\n## Over-extension #card \nwhen a word is used more broadly to describe things other than the specific item to which the word actually applied¬†\n^1683501100924\n\n## Pejoration #card \nthe process by which words of phrases become more negative over time¬†\n^1683501100925\n\n## Phonetic spelling #card \nwords that are spelt as they sound¬†\n^1683501100926\n\n## Poverty of stimulus #card \ntheory attributed to Chomsky that suggests the language to which a child is exposed is insufficient to support the development of language that occurs¬†\n^1683501100927\n\n## Proto-words #card\n‚Äòmade up‚Äô words that a child will use to represent words they can not yet pronounce.¬† E.g. ‚Äòray-ray‚Äô for raisins¬†\n^1683501100928\n\n## Recast #card \nthe grammatically incorrect utterance is spoken back to the child, but in the corrected form. The term ‚ÄòRephrase‚Äô is used interchangeably here.¬†\n^1683501100929\n\n## Scaffolding #card \nthe support provided by caregivers through modelling how speech ought to take place in order to help the child‚Äôs language development.¬†\n^1683501100930\n\n## Tricky words #card \nwords that do not give a perfect or regular guide to pronunciation¬†\n^1683501100931\n\n## Trigraph #card \na cluster of three letters that represent one sound e.g. igh¬†\n^1683501100932\n\n## Under-extension #card \nthe use of a word in a limited way which does not recognise its full meaning e.g. use ball to describe one type of ball (e.g. tennis ball but not football)¬†\n^1683501100933\n\n## Virtuous error #card \ngrammatical errors that are understandable and logical through an incorrect assumption being made about grammar rules (there is a good excuse for the error)\n^1683501100934\n","lastmodified":"2023-09-07T08:27:08.556882362Z","tags":[]},"/notes/School-Subjects/English-Language/Child-Language-Acquisition/Developmental-Stages":{"title":"Developmental Stages","content":"#englang #cla \n\n# Stages of Linguistic Development #card\nChildren go through 4 stages of linguistic development:\n- Preverbal (0-11 months)\n- Holophrastic (11-18 months)\n- Telegraphic (1.5-2.5 years)\n- Multi-word (2.5+ years)\nAccording to the textbook, more accurately:\n- Pre-verbal (0-5 months)\n- Babbling (5-12 months)\n- One-word (12-18 months)\n- Two-word (18-24 months)\n- Telegraphic (24-30 months)\n- Post-telegraphic (30+ months)\n^1683503193130\n\n## Preverbal Stage #card\nIn this stage children communicate via:\n- Soundless communication\n- Turn taking/Eye gaze\n- Body language\n- At about 5-7 months old: Talking sounds (babbling)\n^1683503193134\n\n## Holophrastic Stage (one word utterances) #card\nAround 12-18 months\nAt this stage:\n- One word can mean a range of sentences in this stage, ie doggie could be \"Here comes the dog\", \"I love the dog\" or \"The dog is over there\"\n- Children increase their understanding of intonation and gesture\n- Usually, consonant vowels sounds\n- Capable of around 50 words, but can understand a lot more\n^1683503193135\n","lastmodified":"2023-09-07T08:27:08.556882362Z","tags":[]},"/notes/School-Subjects/English-Language/Child-Language-Acquisition/Snail-Transcript-Analysis":{"title":"Snail Transcript Presentation","content":"\n## Introduction\n- Conversation between Bella, girl of 1 year 11 months, and her Grandmother in the garden about snails\n- Grandmother is her caregiver, serves as MKO while helping Bella, the child, in her language development.\n- Throughout presentation, red C for child, blue G for grandma\n\n- Bella well into the telegraphic stage, evidence provider later\n- Subsystems developed into that expected of 2-3 year old, about 5 months ahead of expected language development\n\n- ‚ÄúWe are storytelling creatures, and as children we acquire language to tell those stories that we have inside us.‚Äù - Bruner, key theorist behind Interactionism\n- Bella learns how to describe the world around her by imitating and interacting with her MKO, grandma\n\n## Features of Language\n\n### Emerging Subsystems\naka Bella's Developmental Stage\n- Well into the telegraphic stage\n- At this point, Bella gone beyond two-word stage , producing coherent enough utterances, but somewhat lacking all the needed function words and morphemes to be syntactically accurate\n- Children in the telegraphic stage almost sounds like text messages, omitting unnecessary words.\n- Also gained the ability to ask basic questions, like \"where\" or \"why\"\n\n- For example, child might say \"Where daddy?\" or \"What that?\" dropping the word *is\n\n**Lexical and Semantic Perspective**:\n- Actively asking where questions: \"Where \\[n åd…ô sne…™j…ôl]\"\n- Can point and direct others: \"Look! I see \\[…ôn åd…ô sne…™j…ôw]\"\n\n**Morphological \u0026 Syntactic Perspective**\n- We can clearly see Bella well into stage as she is beginning to add grammatical morphemes to speech: \n\t- \"\\[d…õ…ôz] Mickey\" uses contraction for \"there is\"\n\t- \"Look he \\[p äd…™n] his head way up in sky\": still developing inflectional morpheme -ing, g-dropping: replacing /≈ã/ sound with /n/, putting -\u003e puttin'\n\n- That last utterance was outlier, MLU is approx 3.44 lexemes, while this utterance had 9 lexemes, much higher than mean\n- This is a common phrase, almost a collocation, possibly replacing the word sky with \"clouds\" or \"stars\". \n- Common phrase could have been repeated by MKO such as parents or grandmother and imitated by Bella, supporting Skinner's Behaviourist ideas\n\nNonetheless, clear that Bella well into telegraphic stage, with good syntactic knowledge and understanding of location, and addition of the contractive \"is\" and gerund  as part of speech. \nBeing said, still does not use many conjunctions or why questions, place approximately 5 months ahead of expected language development.\n\n### Supported Theories\naka Carer Strategies\n- Mainly supports behaviourism + interactionism, evidently learning through interaction with MKO\n- Lines that support cognitivism are present\n\t- Displays a proper understanding of location:\n\t\t- G: \"Do you see another one?\"\n\t\t- C: \"\\[ ån d…ô fla äw…ô]\"\n\t- She would not be able to talk about location of snail if she didn't understand location as concept, so cognitivism is supported in this way\n\t\t- G: \"Do you see another snail?\"\n\t\t- C: \"\\[…ôn d√¶ twiÀê]\"\n\t- Bella has also begun to use simple prepositions, such as \"on\" or \"in\"\n- Not much evidence of innateness ‚àµ lack of ‚Äúvirtuous errors‚Äù, active role played by Grandma\n\n- Throughout transcription, Child-directed-speech has constant repetition of phrases more \"correctly\" by MKO, evidence of operant conditioning and scaffolding.\n\t- eg. \"Look! I see \\[…ôn åd…ô sne…™j…ôw]\", Grandma replied back, \"Do you see another snail?\"\n\t- Repetition of more correct utterance supports the idea that Bella will imitate, -\u003e negative reinforcement, supports behaviourist ideas\n\t- The transition of the declarative sentence to the interrogative sentence shows how MKO is scaffolding for child, expanding ZPD by questioning -\u003e interactionist ideas supported\n#### Interactionism\nTheory emphasises the interaction between children and their caregivers, in this case Bella \u0026 Grandma\nFocuses a lot on ZPD and scaffolded needed for learning to develop\n- G: \"Yes he's in the tree\" later Bella says \"Look he \\[p äd…™n]\"\n- Strongly supports interactionist theory: Bella no way of knowing the snail is male, but bc Grandma automatically assumes gender, Bella learns to assume the same. As such, Bella learns about society's perceptions of the world\n#### Behaviourism\n- Supported by various examples of recasts throughout transcript, uses operant conditioning for negative reinforcement\n- Prime example is\n\t- C: \"Where \\[n åd…ô sne…™j…ôl]\"\n\t- G: \"Where's another snail\"\n- Later in exact same passage, Bella is seen correcting herself by imitating her Grandma, repeating the exact same recast in a more phonetically correct lexeme \"another\" (not ellided)\n\t- G: \"There's another snail\"\n\t- C: \"\\[d…õ…ôz …ôn åd…ô sne…™j…ôw]\"\n- This recast also supports interactionism, as it provides scaffolding to build on ZPD\n\n## The Subsystems\n\n### Phonological Processes\nMany phonological processes taking place in Bella's language, and though she's mostly intelligible, clear that her phonetic ability is at that of telegraphic stage\n- ‚Äú\\[ka…™m] on \\[tiÀê] a \\[sne…™j…ôl], see‚Äù\n\t- Elision of the /l/ and /…π/ consonant clusters -\u003e cluster reduction\n\t- Epenthesis of the /j…ô/ sound\n- \"\\[d…õ…ôz …ôn åd…ô sne…™j…ôw]\"\n\t- Can see that epenthesis of /j…ô/ sound is consistent across her speech\n\t- /l/ consonant cluster also struggles her with an example of gliding the /l/ to /w/\n- \"Where \\[n åd…ô sne…™j…ôl]\"\n\t- Can see all examples so far had consistent th-stops turning /√∞/ -\u003e /d/, has a lot of gliding but mostly intelligible, indication of child-like speech\n\t- also elides /…ô/ sound sometimes, especially when at start of word, but corrected by imitation and operant conditioning\nConsistent th-stopping makes sense of age group, as children not expected to properly articulate /√∞/ until 4 - 6 years of age.\nBecause /√∞/ sound is quite complex, have to remember to breathe out with tiny gap between teeth and tongue. If this gap is forgotten /d/ is produced instead. Evidently sounds are very close in mouth, and subtle differences not picked up this early, especially at less than 2 years old.\n\n### Lexicology\n\u003e in ppt make sure to add couple transcribed examples\n\nBella's demonstrated lexicon is about 20 words give or take, repeating \"there's\", \"another\", \"snail\", and \"where\" quite a bit. \nThe repetition of phrases not unexpected at this development stage. Phrase \"look he puttin' his head way up in sky\" from before was well beyond demonstrated lexicon of Bella's throughout convo, further show outlier.\n- Grandma and Bella probably spend quite bit of time in garden, as most content words she knows are under the semantic field of nature, such as \"climb, tree, snail\"\n- Also knows words for people she spends lot of time with, such as brother \"Mickey\", supporting interactionist ideas that interaction with MKO reinforces language learning\nNew words are introduced through questioning and scaffolding, once again supporting interactionism\n- G: \"What colour is that flower?\"\n- C: \"Look! I see \\[…ôn åd…ô sne…™j…ôw]\"\n- Bella is distracted, and does not answer the question, but is still prompted to use new lexemes to describe her environment\n\n### Morphology\nAs noted before, Bella is able to utilise the gerund, meaning she can use the inflectional morpheme -ing. \n- Contrapuntally, she does not appear to use the -s morpheme to indicate the plural of snail, showing that her morphological progress is in the early phase of the telegraphic stage\nBella also shows evidence of articles such as \"a\" appearing, showing that she is beginning to use more articles and function words in her speech:\n- G: Look here's a snail\n- C: \"\\[hiÀê…ôz¬†…ô sne…™j…ôl]\"\nAlso very clear evidence of a recast, imitating what MKO is saying and learning to add more grammar to speech.\nOverall, Bella's morphological ability is at expected stage for a two year old, where utterances have a clear hierarchical structure but is not yet that of adult grammar. \n\n### Syntax/Semantics\n- Both syntax and semantics of Bella's speech have been explored previously in presentation\n- To reiterate, errors are dealt with by caregiver in a very behaviourist fashion, by recasting or repeating the utterance in a more correct form\n- Semantically, is able to use interrogative sentences to question the world around her, using many \"where\" questions\n- Still does not use any compound sentences yet, but SVO structure is present, showing it's developing\n\t- \"I see \\[…ôn åd…ô sne…™j…ôw]\"\n\t- Subject \"I\", Verb \"see\", Object \"another snail\"\n\n### Discourse\nFinally, Bella is picking up discourse features well.\nAdjacency pairs:\n- G: \"You want me to climb in the tree?\"\n- C: \"\\[j…ëÀê]\"\n- G: \"No way, silly monkey! You want to climb in the tree?\"\n- C: \"\\[j…ëÀê]\"\nThese adjacency pairs show that Bella is just saying yes to question without necessarily knowing the meaning, but she understands that it is a question.\n\nBella also mostly coherent, participating in turn taking structure as seen above. Bella also sometimes uses discourse markers in her speech:\n- C: \"oh, oh!\"\nThis interjection of surprise conveys meaning to excitement, conveying meaning to MKO.\n\n**Caretaker**\nCaretaker uses confirmation requests to prompt and scaffold the child.\n- G: \"That's a lot of snails, isn't it?\"\n- or G: \"You put the snail in the garden, did you?\"\nScaffolding once again supports interactionist theories, as the discourse between the child and caregiver driving the conversation teaches Bella language.\n\n## Conclusion\n- Overall, Bella is quite relatively for her age. She seems to be well into the telegraphic stage of her language development, about 5 months ahead of the expected development at her age.\n- This is evident by the emerging subsystems evident in her speech, such as the ability to ask questions and use prepositions of location.\n- Throughout the passage, the grandma acts as a MKO and uses development strategies that very closely align with the Behaviourist and Interactionist language acquisition theories.\n- Bella will likely continue to refine her language use as she approaches more adult-like grammatical ability, adding more function words and morphemes into her speech. \n\t- She already shows evidence of this, such as the inklings of using the inflectional gerund and basic article usage, but will develop more\n\n- Like to finish off with a quote\n\u003e ‚ÄúIn sum, then, \"thinking about thinking\" has to be a principal ingredient of any empowering practice of education.‚Äù\n\nThank you for listening!\n\n","lastmodified":"2023-09-07T08:27:08.556882362Z","tags":[]},"/notes/School-Subjects/English-Language/Child-Language-Acquisition/Theories":{"title":"Theories","content":"#englang #cla \n\n## Behaviourist - Skinner #card\nChildren imitate adults. Their correct utterances are reinforced when they get what they want or are praised.\n^1683502539271\n\nB.F. Skinner is the main theorist associated with the language learning theory. He states that language learning involves \"input, imitation, and habit formation through repetition\". This conclusion was reached.\n\nAll children are born as a \"blank slate\", and all learning happens through a process called operant conditioning. A child can be trained to repeat certain actions if they get a favourable response (positive reinforcement) or a lack of any positive response that will discourage repetition in the future (negative enforcement).\n\nRole of caregiver: models language for the child to copy and provides positive reinforcement for success.\nLexical development: copies lexemes as heard\nSyntactic development: children learn key phrases and then substitute key words\n\"Monkey hear, monkey say!\"\n\n### Limitations #card\n- Children rarely simply repeat what adults say\n- Children often make 'virtuous errors' - logical but non-standard utterances, which suggest they are creatively working out grammatical rules, not copying\n- Children appear to go through the same predictable stages of development whatever the input. This throws into question the importance of positive and negative reinforcement from adults.\n^1683502539277\n\n## Innateness/Nativism - Chomsky #card\nA child's brain contains special language-learning mechanisms at birth.\n^1683502539281\n\nArgued that the human brain has a naturally programmed ability to learn language and an ability to work out language systems in terms of grammar and syntax.\nThe term *universal grammar* is also used to describe this global capacity to learn languages at similar rates and in similar ways.\nThe idea of virtuous errors helps support the idea of the LAD.\n\nNutshell: Language Acquisition Device (LAD) is programmed to acquire language, all children have inbuilt ability to learn language\nRole of caregiver: do not activity shape or train children in their language\nLexical development: the brain knows the words go onto categories and fits them once exposed\nSyntactic development: LAD processes the categories of words and how these categories interact within syntax to place words in sentences\n\"I was born to talk!\"\n\n### Limitations\nIt has been argued that a child is born not with a set of linguistic categories but with some sort of process mechanism - a set of procedures and inference rules.\nThe work was also purely theoretical, not based on linguistic data.\nThe theory also seems to downplay the part played by interaction between the children and their carers.\n\n## Cognitive - Piaget #card\nLanguage is just one aspect of a child's overall intellectual development.\n^1683502539286\n\nThis suggests that children would not develop until particular stages of cognitive development had been reached.\nOutlines four cognitive stages: Sensorimotor (0 - 2) years, Pre-operational (2-6/7 years), Concrete operational (6/7-11/12 years) and Formal operational (11-16+ years).\n\nFor example, a child would not be able to use comparative adjectives (small, smaller, smallest, etc) unless they first understood the concept of size.\nIt's possible to link a child's language to their conception development in early stages, such as object permanence which enables the child to articulate abstract ideas and talk about non-deictical concepts.\n\n## Interaction - Bruner #card\nThis theory emphasises the interaction between children and their caregivers.\n^1683502539291\n\nRejects the LAD and focuses on the importance of a child's interaction with caregivers as the key to language development.\nSuggested the importance of a Language Acquisition Support System (LASS) which refers to the caregivers and other important participants within a child's life.\nSuggested that the way in which carers question, encourage and support the child through scaffolding (like fill in the gaps, basically helping/structure) enables children to gradually develop their speech.\nConcentrated more on the need for quality input from caregivers to facilitate learning rather than on imitation and positive/negative reinforcement. \n\n### Scaffolding\nLev Vygotsky suggested the importance of *doing* for a child to be able to develop, and suggested that a parent acts as a \"more knowledgable other\" (MKO), and this helps develop the ZPD\n\n### Limitations\nAll children of all backgrounds and languages tend to progress through similar stages predictably, so this challenges the idea that children exposed to child-directed speech will tend to develop more quickly.\nSome cultures (e.g. the Kaluli tribe in Papua New Guinea) dont appear to use child-directed speech at all to young children - yet youngsters' language seems to develop at the same rate as elsewhere.\n\n\n## Additional Theories\n### Critical Period/Age Hypothesis - Eric Lenneberg  #card\nCoined the term critical period\nBelieved that in the first few years of life, sufficient social interaction and exposure to language was essential in order that a child might gain fill master of the language.\nThis links in well to the case of Genie, as after she had passed the critical period, she was not able to acquire language beyond a very basic level.\n^1683502539300\n\n### The Wug Test - Jean Berko Gleason #card\nCreated in 1985 to test the notion that children have a more sophisticated understanding of linguistic morphology than they have been taught explicitly.\nUses pseudo words like 'wug' to ensure the child has never been exposed to the word previously.\n76% of 4 to 5 years old were able to deduce what the plural of the noun 'wug' would be.\nThe results seem to suggest that children have an ability to understand grammatical rules (in this case, grammatical inflections) and *transfer* them to other examples they've never heard before. This supports Chomsky's nativist theory.\n^1683502539306\n\n## Acquisition-Learning Hypothesis #card \nThis hypothesis states that there is a difference between language learning and language acquisition\n- The learner acquires language unconsciously in language acquisition\n\t- The main criteria is the provision of \"**comprehensible input**\" which provide input just above the learner's existing level of competency - Krashan coined this as 'input+1' or 'i+1'\n- In language learning (explicitly taught), the learner picks up the language through conscious discovery and by learning the grammatical rules and structures of the language\n^1685778018373\n\n## Monitor Hypothesis #card \nAccording to the monitor hypothesis, the learner learns the grammar rules and functions of the language consciously (thinks about them and check themselves after an utterance) rather than its meaning\n- It lays more emphasis on the correctness of the language\nThere are three standards required to use this hypothesis properly:\n- The acquirer must know the language rules\n- The acquirer must reproduce the exact form of the language\n- The acquirer must review the language and apply its rules in a conversation\n^1685778018381\n\n## Natural Order Hypothesis #card \nThe natural order hypothesis is the idea that children learning their first language acquire grammatical structures in a pre-determined, 'natural' order, and that some are acquired earlier than others.\nAccording to the natural order hypothesis, learners acquire the grammatical morpheme-ing before the morpheme third person -s\nOne possible implication of this hypothesis is that teaching language through a traditional structural syllabus may not necessarily help them to acquire the language they need.\nAttempts to get the learners to produce structures before they are ready to do so may fail.\n^1685778018385\n\n## Input Hypothesis #card \nThis hypothesis focuses on acquisition rather than learning of the second language. It suggests that the learner develops the language naturally as they receive fun and interesting information.\nAcquisition theories emphasis the importance of comprehensible input, which is language just beyond the competence of the learner and provides the ideal conditions for acquisition to happen.\n^1685778018388\n\nIn the classroom:\n\n## Affective Filter Hypothesis #card \nThis hypothesis that emotional factors can affect language acquisition. They can have a negative or positive effect.\nNegative affective factors are called affective filters and are an important idea in theories about second language acquisition. The learner is less likely to learn the language if the affective filter is higher.\nHence, the learning environment must be stress-fee and positive so that the learner can learn properly.\n^1685778018389\n\n","lastmodified":"2023-09-07T08:27:08.560882396Z","tags":[]},"/notes/School-Subjects/English-Language/English-Language":{"title":"English Language","content":"#englang #subject\n\n## Unit 1\n- ### Transition Program\n\t- Read about Helen Thompson's [[The Eloquent Ape]]\n\t- Find two [[Interesting English Language Articles]] and share them with the class\n\t- Write a short 4 - 500 word essay on why \"[[Freedom of Speech Essay|Freedom of speech gives people the right to use hate speech]]\"\n- Week 1:\n\t- [[What is a Language?]]\n\t- [[Variables of Communication]]\n\t- [[Features of Language]]\n- Week 2: lol, skipped\n- Week 3:\n\t- [[Phonetics \u0026 Phonology]]\n- Week 4 \u0026 5:\n\t- [[Morphology \u0026 Lexicology]]\n- Week 6: \n\t- [[Syntax]]\n\t- [[Key Terms]]\n","lastmodified":"2023-09-07T08:27:08.560882396Z","tags":[]},"/notes/School-Subjects/English-Language/Language-Change/Dictionary-Documentary":{"title":"Dictionary Documentary","content":"#englang #documentary\n\nSamuel Johnson's dictionary is one of the most famous dictionaries published in 1755.\nHis was not the first, but it was definitely the most complete and had much better documentation. He started with books instead of the alphabet, and notes basically all words from over 2,000 books\n\nBoswell's Life of Johnson is a bibliography written about Johnson by someone he met. He was a diseased and sickly infant. \n- He was a stern moralist\n- Went to Oxford College, had only 40 people, but he wasn't very rich\n- He was very rebellious and defied a lot of authority and rules at the college\n- He was ashamed of his family circumstances\n- Johnson left after 13 months because he supposedly could not afford to keep going to the college, had a very consistent spending of 8 shillings a week and then just stopped\n- Johnson was the \"original toy boy\", married a widow who was more than 20 years older than him. Elizabeth Porter or Teti as he called her, gave up a lot to marry Johnson\n- His literary career failed, so he decided to set up a school using his wife's money, but that school also failed\n- Johnson is one of the best examples of tourette syndrome in history. He had compulsions and wanted things to be done \"just right\", like with English.\n- Booksellers were starting to make a lot more money and start to become a viable job, because now everybody was writing to make money\n- Dictionary was the publisher's idea. Italy and France both had standard dictionaries, but English had nothing, so they felt like their language was not competing. Britain was a new concept at the time (union started in 1707). \n- Made rapid progress for 3 years","lastmodified":"2023-09-07T08:27:08.560882396Z","tags":[]},"/notes/School-Subjects/English-Language/Language-Change/Essay-Assessment":{"title":"Essay Assessment","content":"#englang \n\n# Prompt\n\n\u003e [!note] Prompt\n\u003e \n\u003e History has shown that English is not resistant to change, it will continue to change, and that this should be embraced. To what extent do you agree? (You should use metalanguage and refer to **at least two of the subsystems** in your response.)\n\n## Stimulus 1\n\n\u003e \"English has been this vacuum cleaner of a language, because of its history, meeting up with the Romans and then the Danes, the Vikings and then the French and then the Renaissance with all the Latin and Greek and Hebrew in the background\" - David Crystal, *The Story of English*\n\n## Stimulus 2\n\nAn image of McJob, 'one of the many recent additions to the Oxford English Dictionary'\n\n\u003e \"English speakers already have over a million words at our disposal - so do we really need to add 1,000 new ones a year to the lexicon?\" - Andy Bodle, The Guardian, 2016\n\n## Stimulus 3\n\n\u003e \"People did not wake up in the morning and decide to use the word 'beef' instead of 'ox meat', or change their pronunciation of 'mate' to 'meat' or tell their wife how 'nice' she is ('nice' originally pejorative). No, indeed these changes to English took place over centuries and without any concern from its speakers\" - Katie Lowe, Linguist and Philologer, University of Glasgow\n\n## Stimulus 4\n\n\u003e \"What is literally the most misused word in the English language? The word 'literally' has been used to mean its opposite for over 200 years.\" The problem is that the word has a specific meaning, which is being diluted and devalued by its overuse in incorrect contexts. - John Lloyd (2015), *The Third Book of General Ignorance*\n\n# Plan\n\n## Prompt\n- Throughout history, English has not been resistant to change\n- English will continue to change\n- This change should be embraced\n\n## Paragraphs\n\n### Paragraph 1 - not been resistant to change\n\n- Throughout course of history, English has not been resistant to change.\n- e.g. Old English was a highly inflected language\n  \u003cmark style=\"background: #90BE6D;\"\u003eSyntax\u003c/mark\u003e: quite a flexible word order, somewhere during 12th century, transformed into Early Middle English where SVO structure settled.\n- Change was largely due to Norman invasion of England in 1066 which brought the influence of the French Language. \u003cmark style=\"background: #D95950;\"\u003eUse Stimulus 1\u003c/mark\u003e\n- Also influenced \u003cmark style=\"background: #90BE6D;\"\u003elexicology\u003c/mark\u003e, new French-derived words introduced,\n\t- \"house\" -\u003e \"mansion\"\n\t- \"ask\" -\u003e \"inquire\"\n- \u003cmark style=\"background: #D95950;\"\u003eUse Stimulus 3\u003c/mark\u003e enriched the English Language lexicon\n\n### Paragraph 2 - English will continue to change\n\nLanguage is changing right now and will continue to change.\n- Consider rapid technological advancements recent decades, profoundly influenced language. Text messaging acronyms like 'LOL' for convenience which undergoing semantic shift right now.\n\t- Now more of a way to signal that a comment is intended to be funny or to signal irony\n\t- Changes depending on semantic/syntactic content of the message\n\t\t- Conviviality: \"I had a great time lol\"\n\t\t- Lighthearted: \"lol okay I'll see you soon\"\n\t\t- Self Deprecating Humour: \"i'm drowning in bills fml lol\"\n- Nouns such as clipped and suffixed selfie + compound borrowed from Japanese, \"emoji\" become additions to lexicon\n- Ongoing development of gender neutral pronouns demonstrates English's willingness to adapt changing needs of individuals not in gen binary\n- Recent changes to what was previously closed word class, pronouns.\n  While not only being lexical change, pronouns such he/she -\u003e they/them require syntactic change. When using they in reference to a singular subject, the verb conjugation does not take the singular form, e.g. not 'They writes' but 'They write', demonstrating an acceptable modern change to the syntax of the language.\n\n### Paragraph 3 - language change is good as long as it improves intelligibility\nUse Stimulus 4: could be viewed as incorrect but so purpose of language is communication of thoughts/ideas so as long as mutual intelligibility maintained, it's okay. \n\nLanguage change should be embraced when these changes allow speakers to more effectively communicate ideas. Additions to the lexicon describe new technologies is beneficial, because previously not expressible, but unnecessary additions that harm intelligibility bad.\n\nStimulus 4 is fine because people understand what you mean.\n\n# Essay\n\nThe English Language has continually evolved throughout its history and will continue to do so for the foreseeable future. Modern English has seen significant change from its Old English counterpart both lexically and syntactically, demonstrating how the language has been far from resistant to change in the past. Modern English is subject to similar changes, as seen from the emergence of 'e-language' in online communities. Though these changes can temporarily harm intelligibility, they should ultimately be embraced as useful additions to the English Language if they improve the effectiveness with which language users can communicate. English has and will continue to evolve, changing to maintain its use as an effective communication tool throughout the world.\n\nThroughout the course of history, English has not been resistant to change. Old English was a highly inflected language, containing an intricate system of inflections for its grammatical cases. Since then, there has been significant inflection reduction, namely during the Middle English period where the -a, -u and -e suffixes all merged into the ending -e. The nominative case also housed an extensive grammatical gender system, which fell out of favour after contact with other languages with simpler syntax. Notably, the syntax of Old English displayed a flexible word order, but throughout the 12th Century CE, the SVO structure was settled upon as the language entered the phase of Early Middle English. This change was largely driven by the 1066 Norman invasion of Great Britain, which brought the influence of the French Language to British English. \"English has been this vacuum cleaner of a language because of its history,\" (Stimulus 1) and the newfound rulers brought many French-derived lexemes to the language, such as 'mansion' and 'inquire' for the respective Old English synonyms 'house' and 'ask'. \"People did not wake up in the morning and decide to use the word 'beef' instead of 'ox meat', \\[but rather] these changes to English took place over centuries\" (Stimulus 3) as the language changes and adapts to new needs and demands. Nonetheless, English has historically shown significant change and has been anything but resistant to adaptation.\n\nModern English is currently changing and will continue to do so. The rapid technological advancements throughout recent decades have profoundly influenced the English Language. Text messaging as a new medium for communication has created a need for the language to be short and succinct, pressuring native speakers to use acronyms, clipped lexemes and alternative syntax to express ideas faster. \nText messaging acronyms such as 'LOL' have arisen from the needs for convenience. Even newfound additions to the language such as 'LOL' are undergoing rapid semantic shift; previously intended to express the literal action of laughing out loud, the acronym is now more of a way to signal irony or that a comment is intended to be funny. This changes depending on the semantic and syntactic content of the message, such as conviviality in 'I had a great time lol', lightheartedness in 'lol okay I'll see you soon' and self deprecating humour in 'i'm drowning in bills fml lol'. As such, the acronym 'LOL' has seen significant semantic shift throughout solely the last few decades.\nNouns such as the clipped and suffixed 'selfie' along with the compound 'emoji' borrowed from Japanese are both relatively recent neologisms that have been added to the English lexicon, demonstrating how change is ever present. \nFurther, the ongoing development of gender neutral pronouns demonstrates English's willingness to adapt to the changing needs of individuals who do not identify within the traditional gender binary, shown by the recent changes to what was previously a closed word class, pronouns. Whilst not only being a lexical change, the change in pronouns from he/she to they/them requires a syntactic change of the language as well: when using they in reference to a singular subject, the verb conjugation does not take the singular form - not 'They writes' but 'They write' - demonstrating an acceptable modern change to the syntax of the language. Thus, Modern English continues to change, both lexically and syntactically, as it has done in the past.\n\nLanguage change should be embraced so long as it improves the communication of ideas and maintains mutual intelligibility. There have been several neologisms added to the English lexicon due to the emergence of e-language, such as the above 'LOL', 'emoji' and 'selfie'. \"English speakers already have over a million words at our disposal \\[so it is fair to ask if] we really need to add 1,000 new ones a year to the lexicon\" (Stimulus 2), but so long as these additions are mutually intelligible in the long run and allow language users to more effectively communicate otherwise foreign concepts, they are worthwhile additions to the rich lexicon of English. \nModern e-language frequently brings jargon previously exclusive to the semantic field of gaming to a wider audience, such as the acronym turned lexeme 'pog'. Originally being an acronym for the noun phrase 'play of the game', 'pog' has undergone semantic shift so that it is now used as an adjective to describe any 'awesome' person or moment, which has been adopted by the wider online community. This transformation from jargon to plain language demonstrates how groups of language users can adopt lexemes which aid in their communication of ideas or identity, a change that should be embraced.\nDuring adoption periods, it may be hard for other language users to understand the semantics behind a lexeme, but this stands true for the introduction of any new concept and is not harmful. Similarly, the use of they/them as a singular pronoun could be viewed as incorrect use of the language. \"The problem is that the word has a specific meaning, which is being diluted and devalued by its overuse in incorrect contexts\" (Stimulus 4). However, this semantic shift accommodates for a change in perception of concepts such as gender for the speakers of the language while maintaining mutual intelligibility. Therefore, change of this form should be embraced, as it allows for further expression through the language.\n\nThe English Language has seen great change throughout its history and continues to do so in the modern era. The purpose of language is to communicate ideas, and so long as language change aids in this process, it should be embraced as a beneficial feature of any living language. From Old English to Modern English, from archaisms to modern e-language, language change has been and will continue to be an integral feature of English that facilitates the effective communication of speakers around the world.","lastmodified":"2023-09-07T08:27:08.560882396Z","tags":[]},"/notes/School-Subjects/English-Language/Language-Change/Grammatical-Cases":{"title":"Grammatical Cases","content":"#englang \n\n## Nominative\nDenotes that the specific noun or pronoun is the subject of the sentence. For example, in \"Mark eats cake,\" Mark is in the nominative case.\n\n## Genitive\nA noun case which is used mainly to show possession, such as 's in English.\n\n## Accusative Case\nThe case used for a noun when it is the direct object of a verb, or the object of some prepositions. For example, in \"The dog ate our turkey,\" our turkey would be the direct object and in the accusative case.\n\n## Dative Case\nA grammatical case used in some languages to indicate the recipient or beneficiary of an action. For example, in \"we gave a bone to our dog,\" our dog is the recipient and therefore in the dative case.","lastmodified":"2023-09-07T08:27:08.560882396Z","tags":[]},"/notes/School-Subjects/English-Language/Language-Change/Language-Change-Essay":{"title":"Language Change Essay","content":"#englang #essay #research \n\n\u003e [!question]\n\u003e Spelling and correct grammar are no longer important in modern society\n\nSpelling and correct grammar are no longer important in modern society, a controversial claim for sure. The influence and grammatical syntax has had a profound impact on our use of language, the change of which makes language easier or harder to understand based on who you ask. So how important is spelling and grammar truly in our modern society?\n\nBefore we can answer the question of whether syntax is important anymore in society, we must first ponder upon the purpose of language in the first place. Language's primary purpose is communication, to be able to convey our thoughts and ideas from one person to another. These ideas may be the ones explicitly being communicated by the speaker, or judgements we perceive through their use of the language itself. This key distinction is one that the debate hinges upon: does a lack of \"correct\" grammar make language easier or harder to understand?\n\nCorrect grammar is a tricky concept. When your friend texts you \"omg i'm running saurrr late\", would that constitute as correct grammar? Most people would say no, yet they can perfectly understand the intended concept that the message communicates. It can thus be argued that despite not following the conventions of \"Standard English\", these abbreviations, slang and alternate spellings of the digital age make communication of ideas more effective and efficient, *at least to those who understand them*. And this is the problem that many advocates for \"correct grammar\" struggle with, they do not understand the complex rules and structure of \"community languages\". The previous sentence starting with an \"and\" did not obfuscate meaning, but the initialism \"gghf\" (good game, have fun) would make no sense to someone not in the gaming community, which turns these expressions into a shared identity. As such, a more flexible approach to grammar not only allows for ideas to be communicated more efficiently and effectively, but also builds up a culture in language that can convey many more perceptions of the speaker than just the words themselves.\n\nBad grammar has social implications. Advocates for \"correct grammar usage\" have a point: the use of conventions from Standard English does make one seem more educated, professional and elite, and it therefore *must* be taught in schools if one wants any job viability. The problem with this view is that a truly educated individual can control the perception that they portray to others. You do not want to sound like a court official when speaking with your friends; the informal environment of friendship also calls for the use of informal language, but it is most definitely a needed skill, as much is being able to switch register. Grammar should not come in the way of expression, but needs to be viewed as a tool that can be wielded to control how others perceive you, and the way that grammatical structure is taught in schools must follow suite. Could it perhaps be a solution for schools to teach the grammatical conventions of our new online world side by side with those of Standard English? Should we not expect the children of the future to be able to communicate in more ways than simply a formal register? \"Bad\" grammar has social implications, but so called \"good\" grammar does too, and people need to be able to learn how to switch between them.\n\nFinally, it seems apt to touch on the role of grammar and spelling in our education system. Increasingly, \"correct grammar\" has become less indicative of education and status due to the prevalence of auto correction tools built into every major computing platform, turning the previously difficult and admirable task of using the \"correct\" syntax into something any child can do. School should not teach about spelling and grammar in a way that restricts creativity or expression; so easily can a teacher give a student bad marks for spelling a few words wrong instead of focusing on the wonderful ideas that they bring to the table. Rather, it can be proposed that grammar and namely spelling can be viewed in the same way as handwriting: if it makes your work incomprehensible then it is an issue, but in no way shape or form is handwriting a large consideration for grades, and spelling should not be either, given that they are both significantly aided by the use of modern technology. Children should be taught to write *eloquently* and to think deeper and harder about what they write rather than how they write it. \n\nTo summarise, writing is a tool for communication. Grammar, spelling and syntax can tell the reader a lot about the writer, both in terms of social perception *and* in terms of the direct message conveyed, but children in our new rapidly changing world should be taught to use this as their sword rather than it being a barrier to entry in the first place.","lastmodified":"2023-09-07T08:27:08.596882703Z","tags":[]},"/notes/School-Subjects/English-Language/Language-Change/Language-Standards":{"title":"Language Standards","content":"#englang \n\n\u003e [!note]\n\u003e \n\u003e ## Overt Prestige #card\n\u003e Use of a standard like British English\n\u003e \n\u003e ## Covert Prestige #card\n\u003e When it is considered \"cool\" to speak a less prestigious dialect\n\n## Einar Haugen's Process of Standardisation\nHuagen describes the process of standardisation as involving four aspects of development:\n### Selection of a Norm\nTerm used to refer to the choice of a language variety to fulfil certain functions in a given society.\nThis can be somewhat controversial, as it requires choosing which varieties and forms the standard will be based on (subjective). In history this was often the prestigious variety, such as the one spoken by the nobility.\nIn the past, because only the nobility were predominately literate, they had a monopoly and the choice of the standard variety was not contested. Nowadays the choice is more nuanced.\n\n### Codification of Form\nThis is where the selected standard is cemented, for example with the compilation of dictionaries and grammars. This process is what ultimately establishes what is correct and what isn't.\nIt reflects spoken language, but does not always involve pronunciation, just writing down \"what is correct\".\n\nCodification does not make the standard, many varieties have dictionaries without having a standard, Scots being one example, and the Urban Dictionary is a very good example of codification of non-standard forms. \n\n\"Codification is the spear of the prescriptivist, meaning that codification is used to argue the right way to use the language.\"\n\n### Elaboration of Function (\u0026 modernisation)\nRefers to the stylistic and syntactic development of a codified language to meet the communicative demands of modern life and technological advances.  \n\n### Acceptance by the Community\n\n\n\n","lastmodified":"2023-09-07T08:27:08.596882703Z","tags":[]},"/notes/School-Subjects/English-Language/Language-Change/Prestige-and-Language":{"title":"Prestige and Language","content":"\nReceived Pronunciation:: the accent needed to be received in court, very much like the queen's English\n\nOvert prestige:: language that is openly prestigious, such as the English accent or the cultivated Australian accent\n\nCovert prestige:: language because it is \"cool\", such as the language of hip hop and how it is trendy. People might tend to go \"downwards\" with their language such as trying to be cool and using AAVE language from pop-culture.","lastmodified":"2023-09-07T08:27:08.596882703Z","tags":[]},"/notes/School-Subjects/English-Language/Language-Change/Timeline-Inquiry-Task":{"title":"Timeline Inquiry Task","content":"\n## The Change of Gender in English\n\nOut of the many difficulties of learning a new language, one of the most foreign concepts for native English speakers tends to be that of grammatical gender, where all nouns are classified into their own gender. This common feature of many languages surprisingly close to English leads to an obvious question: why did English lose its grammatical gender and how did such a large syntactic change occur over such a short time, leaving nothing but the smallest remnants in Modern English?\n\nSome may find it surprising that Old English had a very intricate system of inflections for each of its 5 grammatical cases. Since then, there has been a significant inflection reduction, namely during the Middle English period where the -a, -u and -e suffixes all merged into the ending -e. Similarly, of the extensive case system, only 3 cases remaining in most modern usage and that too with much simplified inflections. Of these cases, the nominative case is particularly interesting as it houses most of our previous grammatical gender, one that many of the modern Germanic languages share with three categories: masculine, feminine and neuter. Nouns were assigned to one of these gender classes in \"classical\" West Saxon, where grammatical gender was well manifested, but over time there was a systematic process of syntactic and morphological change due to the decay of inflectional ending in English during the Middle English period. As English expanded further through the British Isles, contact with the languages from the north of England resulted in an overall decline of grammar, where consistency was simply not as important as it used to be due to the vast span of the language. \n\nWithin the nominative case, Old english had a vast system of inflectional morphemes that grouped nominal lexical items into their gender categories which always resolved to the gender of the person they were referring to. As we can see below, many lexemes in Old English had inflectional morphemes that denoted gender:\n\n- b√¶cere/b√¶cestra \"baker\"\n\n- be√æ√¶cend/be√æ√¶cestre \"deceiver\"\n\n- cempa/cempestre \"warrior\"\n\n- lufiend/lufestre \"lover\"\n\n- t√¶ppere/t√¶ppestre \"tavern keeper\"\n\nFrom the above list, there is a clear pattern that the suffix \"-estre\" marks the feminine gender case for nominal lexemes, but equally if not more common would be the irregular nouns with a range of essentially unrelated suffixes:\n\n- fyrenhycga/fyrenhycge \"adulterer/ess\"\n\n- horig/hora \"fornicator\"\n\n- nefa/nefene \"nephew/niece\"\n\n- √æeow/√æeowe \"slave\"\n\n- neahgebur/neahgebyrild \"neighbour\"\n\nEven more confusingly, many unambiguously female nouns are assigned to the masculine gender with the suffix \"-man/mon\"\n\n- f√¶menhadesmon \"virgin\"\n\n- hiredwifmon \"female member of a household\"\n\n- m√¶gdenman \"virgin\"\n\n- m√¶g√æman \"virgin\"\n\n- wifmann \"women\"\n\nEvidently, the examples above illustrate that the grammatical gender of a predicate in Old English did not always align with the natural gender of its subject, which would have been rather complicated namely for non-native speakers to pick up.\n\nThis precisely demonstrated why grammatical gender had such a large downfall moving into the Middle English period: it was inconvenient and too complicated for newcomers to learn. For the same reasons Middle English saw an overall decline of inflections and accents, grammatical gender became an oversight as the language expanded and most suffixes began defaulting to their neuter form. As expansion and contact with new tribes often does, the \"new English\" that came about from the settlement of North England filtered out the complex elements of respective language, gradually washing away the remnants of an extensive grammatical gender system with it too.\n\n\\newpage\n\n## Caxton \u0026 The Printing Press\n\nOne of the most influential inventions in the history of the English language would be the printing press, brought to England by one William Caxton in 1476. The machine was revolutionary, making books orders of magnitude cheaper to produce and buy, and therefore caused the levels of literacy in the common English people to climb much higher than before. As the printing press was fixed in its codification, it also marked the beginning of a greater standardisation of syntax across the language.\n\nCaxton started off as a successful merchant, serving as the governor of the 'English Nation of Merchant Adventurers' for the better part of a decade. This not only allowed him to build a strong standing in the merchant community, but also act as a diplomat for the King at the time, through the process of which he gained a significant wealth. \n\nIn the early 1470s, his interests turned to literature and he started the work of translating books from French to English. Through these ventures, Caxton spent some time in Cologne, Germany learning of the printing presses they had started developing. Although printing with movable type had been invented many centuries earlier in China, the technology was not well developed in Europe until the mid-15th century, meaning that the printing press was quite new at the time. As he worked on his own eventual translation of _'Recueil des histoires de Troye'_ (which later become the first book in history to be printed in English), he later recounted that how his \"pen became worn, his hand weary, his eye dimmed\" with the laborious task of copying the book. Simply, he found the work such a bore that he \"practiced and learnt\" at a great personal cost how to print it instead. The next year, toward the end of 1476, Caxton returned to England and established the now famous press at Westminster.\n\nAt the time, most continental printers made their books in Latin, the international language of the time, so that they could sell them to a wider market. Caxton chose to ride against this wave, and though they were still a luxury aimed at fairly wealthy people, over the coming decades the price of books fell heavily as he streamlined the process and reshaped the way in which people acquired books for information and entertainment.\n\nCaxton was also responsible for the spread of the variety of English which was to become the standard throughout England. The need for a standard was becoming increasingly evident; as more books were produced, there was a need for a standard syntax to be agreed upon. Caxton adopted a certain variety of Middle English (the so called 'King's English') that was commonly used in London at the time, and spread this variety throughout England by his trade. \n\nThough it cannot be asserted if this was a conscious choice or not, he most certainly put quite some thought and effort into the selection of syntax and lexemes to suite his preferences, as accounted in his 'egges' story. Therewith other dialects of English were marginalised and many died out, but Caxton's work set out the groundwork for what we know today as the world's language. This work, so instrumental to the language we speak today, marked the start of a transition to modern English, but it was not until the first dictionaries were published that this standardisation would be further improved and blossom to maturity. \n\n\\newpage\n\n## The Rise of the Internet - A New Era for the English Language\n\nThe internet has changed the world forever. From how we see the world to how we speak about it, the shift in the English Language has been majorly influenced by the way we communicate online. The internet has caused the lexical shift of pre-existing words, started the emergence of  \"eLanguage\", a register consisting of internet-related terms, acronyms and spellings and generally sped up the process of language change in English.\n\nThe internet has introduced many new words in the average person's lexicon. To the general population, this may end at lexemes such as as \"email\", \"blog\" and \"app\", but for the generation that has grown up with the internet, this new vocabulary extends much further. Internet \"memes\", a whole new concept in and of itself, have resulted in many slang words reaching mainstream popularity. Lexemes such as \"rizz\", \"slay\", \"touching grass\" and \"the ick\" have spread further than any slang before the internet age, and in rare cases stick around to join the coveted ranks of our English Language.\n\nThe fall of formality can also be accredited to the rise of the internet. Though this may be alarming to some, it is far from surprising: as people spend more time talking online in informal contexts, a shadow of their online syntax creeps into their academic work. For example, take [this academic paper](https://www.cambridge.org/core/journals/religious-studies/article/abs/faith-as-extended-knowledge/7072E6F301E99089D56A5DFB7B4B662B) published in 2017, a form of writing that has tended to be as formal as it gets. What is surprising about this text is the high frequency of informal features, including contractions (*isn't*) and first/second person pronouns, all of which would have been an abnormality before the age of the internet:\n\n\u003e \"For at least on a popular Christian conception, when¬†**you**¬†believe something truly on the basis of faith this¬†**isn't**¬†because of anything¬†**you're**¬†naturally competent to do‚Ä¶**I argue**¬†in this article that¬†**there's**¬†no deep tension between faith-based knowledge and virtue epistemology.\"\n\u003e \n\u003e \\- Kegan J. Shaw, Cambridge University Press\n\nModal verbs such as \"must\", \"may\", and \"shall\" have seen an all time low since the start of the internet. This decline was present well before the internet came about to speed it up, but phrases from only a few decades ago now feel archaic:\n\n\u003e \"Of course, we shall not be staying here long.\"\n\u003e \n\u003e \"May I take my jacket off, please?\"\n\u003e \n\u003e \\- British National Corpus 1994\n\n![The decline of English modals](modal_graph.png)\n\nSimply put, the internet has pushed the boundaries of informality. The way we now communicate online somewhat resembles the telegraphic stage of child language acquisition, where children typically from the ages of around 18 to 24 months old use only the necessary words such as nouns, verbs and adjectives and omit function words such as prepositions and conjunctions. Online communication follows similar patterns; previously pressured by the monetary incentives of short messages, online language has remained laconic and efficient, focused solely on conveying meaning with the fewest words possible. This could be attributed to the fast-paced nature of online communities, creating pressure on our language for quick and concise communication.\n\nThe presence of the internet has also caused the lexical shift of words previously well established in the English lexicon. For many younger people, the word \"viral\" would describe content that has gained rapid popularity rather than the older spreading that implied a virus. The word \"tweet\" could also be considered a similar case, though this would more so fall into the category of genericisation, similar to \"google\" or \"band-aid\".\n\nOverall, in a more globalised world, the internet gives rise to a new register of communication, incorporating elements of many languages and dialects to bring them to a mainstream audience. English, like all languages is constantly evolving and the internet is merely one of the many influences that shapes its trajectory, but we can stand back and watch in awe as the words we speak morph in front of our very eyes.\n\n\\newpage\n\n## The Future of English\n\nLanguage changes, and the future of English will be no exception. Due to the global role of English, the emergence of new dialects and variations will play a large part in the fate of this language, along with the major influence of technology.\n\nLatin, once the lingua franca of the pre-modern Europe, gave birth to several regional dialects, and over time these eventually evolved into the modern Romance languages. A similar phenomenon can be observed today with English, namely in countries where it functions as a second language. The emergence of \"interlanguages\" combine features of English with native regional languages, mixing phonetics, syntax, and lexemes into new variations. Examples include \"Singlish\" in Singapore, \"Hinglish\" in India and \"Spanglish\" in the United States. It can very easily then be hypothesised that English may bare a similar fate, splitting up into regional languages and perhaps evolving into a different form in the United States (the country with the largest concentration of native English speakers in the world).\n\nThe rise of online language has also lead to the relaxation of language rules, and attitudes towards consistently and correctness have shifted to be more lenient. Just as English said goodbye to its complicated inflectional system almost a millennia ago when coming in contact with new groups, online communities have found new ways to make the language more accessible and easier to use. Though these shifts tend to be viewed as informal at first, many stand the test of time, and there could possibly even be a slight reversal of the standardisation from Middle to Modern English such that there are competing norms for how the language should be used.\n\nOverall, the future of English will be shaped by its role as a global language across borders, both digitally and in the hearts of many cultures worldwide.\n\n\\newpage\n\n## Bibliography\n\n1. Al Kadi, A \u0026 Ahmed, R 2018, _(PDF) Evolution of english in the internet age_, ResearchGate, viewed 12 August 2023, \u003chttps://www.researchgate.net/publication/323052712_Evolution_of_english_in_the_internet_age\u003e.\n\n2. Curzan, A 2003, _Gender Shifts in the History of English_, Cambridge University Press.\n\n3. Favilla, E 2017, _How the internet changed the way we write ‚Äì and what to do about it_, The Guardian.\n\n4. Godwin, R 2019, _How the internet is changing language as we know it (ikr lol)_, the Guardian, viewed 13 August 2023, \u003chttps://www.theguardian.com/books/2019/oct/11/how-to-speak-internet-online-writing-richard-godwin\u003e.\n\n5. Hist, S-GC n.d., _How did William Caxton influence and change modern English Language?_, Shorthand.\n\n6. Horobin, S 2015, _What will the English language be like in 100 years?_, The Conversation, viewed 13 August 2023, \u003chttps://theconversation.com/what-will-the-english-language-be-like-in-100-years-50284\u003e.\n\n7. Jones, C 2015, _Grammatical Gender in English_, Routledge.\n\n8. Knibbs, K 2013, _How Internet-speak is changing the way we talk | Digital Trends_, Digital Trends, viewed 13 August 2023, \u003chttps://www.digitaltrends.com/social-media/how-the-internet-is-changing-the-way-we-talk/\u003e.\n\n9. _Middle English, the Standardisation of English and the Printing Press_ 2012, My English Language, viewed 12 August 2023, \u003chttps://www.myenglishlanguage.com/history-of-english/middle-english/\u003e.\n\n10. The Editors of Encyclopedia Britannica 2019, _William Caxton | Biography \u0026 Facts_, _Encyclop√¶dia Britannica_.\n\n11. The Ohio State University n.d., _The Cases in English | Department of Classics_, classics.osu.edu, viewed 12 August 2023, \u003chttps://classics.osu.edu/Undergraduate-Studies/Latin-Program/Grammar/Cases/English-Case\u003e.\n\n12. Toko≈°ov√°, K \u0026 Vogel, M 2015, _Reduction in Noun and Adjective Inflections in Middle English Texts_, 3 June, Masaryk University, Faculty of Education, viewed 12 August 2023, \u003chttps://is.muni.cz/th/qu7t4/Tokosova_Bachelor_thesis.pdf\u003e.","lastmodified":"2023-09-07T08:27:08.596882703Z","tags":[]},"/notes/School-Subjects/English-Language/Subsystems/Discourse":{"title":"Discourse","content":"#englang #subsystem \n\n## Coherence vs Cohesion\n### Coherence #card\nThis is about flow, about a text flowing nicely together\n### Cohesion #card\nThis is about the individual parts of the text sticking together\n^1685778032070\n\nIn order to build something that is coherent, you need cohesion (which is like the building bricks or being grammatically correct).\n","lastmodified":"2023-09-07T08:27:08.608882805Z","tags":[]},"/notes/School-Subjects/English-Language/Subsystems/Morphology-Lexicology":{"title":"Morphology \u0026 Lexicology","content":"#englang #subsystem \n\n\u003e [!info]\n\u003e \n\u003e **Lexicology**:: the study of the form, meaning, and behaviour of words. ^1677146913651\n\u003e \n\u003e **Lexicon**:: the pool of words or vocabulary of someone or something ^1677146913656\n\u003e \n\u003e **Lexeme**:: all the variations of a word, for marry would be marriage, married, etc ^1677146913660\n\u003e \n\u003e **Etymology**:: the history of how words became the words ^1677146913663\n\n## Morphology\nMorphology is the branch of linguistics that studies *the structure of words.*\n\nIn English and many other languages, many words can be broken down into parts, for example\n- unhappiness -\u003e un-happi-ness\n- horses -\u003e horse-s\n- walking -\u003e walk-ing\n\nWhat is a morpheme? :: The *smallest unit* which has a meaning or grammatical function that words can be broken down into are known as **morphemes** ^1677545865719\n\n### Free vs Bound Morphemes\n#### Free Morphemes #card\nFree morphemes are morphemes which can stand alone. We have already seen the example of \"yes\".\n^1678180906338\n\n#### Bound Morphemes #card\nBound morphemes never exist as words themselves, but ate always attached to some other morpheme. An example would be \"un-\"\n^1678180906342\n\nCan further be divided into 4 categories:\n- Prefix: *un*-happy\n- Suffix happi-*ness*\n- Infix: abso-*blooming*-lutely (only non-standard words in English)\n- Circumfix: *en*-light-*en*, same meaning of affixes ‚à¥ em-bold-en would have be an example of a circumfix\n  \n### Derivational vs Inflectional Morphemes\n#### Derivational Morphemes #card\n**Derivational morphemes** create or derive new words by changing the meaning or changing the word class of the word. For example, happy turns into unhappy, and both words are adjectives but the meaning changes.\n^1678180906349\n\n##### The Diminutive Suffix #card\nA diminutive creates a meaning of ‚Äòsmall‚Äô or ‚Äòlittle‚Äô (this can be literal or notional) The most common diminutives are formed with and with suffixes such as¬†_-let_¬†and¬†_-y_. We often use a diminutive with names or with abbreviated names when we want to be more informal, or to express affection for someone or something.\n- _Here‚Äôs a book**let**¬†which gives advice on keep-fit._¬†(_booklet_¬†= a small book)\n- _Right, Matt**y**, I‚Äôve got some very good news for you._¬†(_Matty_¬†is formed from the name ‚ÄòMatthew‚Äô)\n- _I think she‚Äôs the perfect kitt**y**¬†for Jennifer._¬†(_kitty_¬†is formed from ‚Äòkitten‚Äô a young cat)\n- What a cute little duck**ling**\n^1683501679006\n\n#### Inflectional Morphemes #card \n**Inflectional morphemes** don't alter the meaning or word class of a word; instead they only refine and give extra grammatical information about the word's already existing meaning. For example cat into cats or walk into walking.\n^1678180906352\n\nIn English, all inflectional morphemes are suffixes (only by chance, since in other languages this is not true) and there are 8 of them.\n- -s, 3rd person sg. present\n  \"He waits\"\n- -ed, past tense (also -t as in \"used to\" or \"spent\")\n  \"He waited\"\n- -ing, progressive\n  \"He is waiting\"\n- -en, past participle\n  \"I had eaten\"\n- -s, plural\n  \"Both chairs are broken\"\n- -'s, possessive\n  \"The chair's leg is broken\"\n- -er, comparative, can also be agentive but that's derivational\n  \"He was faster\"\n- -est, superlative\n  \"He was the fastest\"\n\n## Word Formations\n### Affixation #card\nForming new words by adding an extra bound morpheme, so an affix.\n^1683501679018\n\n### Compounding #card\nForming new words not from bound affixes but from two or more independent words: the words can be free morphemes, words derived by affixation, or even words formed by compounds themselves. e.g. girlfriend, blackbird\n^1683501679021\n\nBy putting stress on both words you seperate them into two words\n\n### Reduplication #card\nThis is forming new words either by doubling an entire free morpheme (total reduplication) or part of a morpheme (partial reduplication).\n^1683501679026\n\n### Blending #card\nWhere two words are merged together, such as:\n- brunch - from breakfast and lunch\n- smog - from smoke and fog\n- spork - from spoon and fork\n^1683501679031\n\n## The Parts of Speech\nA part of speech is a class of words based on the word's function, the way it works in a sentence. They are sometime's referred to as word classes.\n\n### Nouns #card\n'Noun' is the name given to words that name things or concepts.\nThere are many different types, or sub classes of nouns, some you will be familiar with, other maybe not.\n^1677146895726\n\n### Verbs #card\nVerbs are words that describe what a subject is doing. They also describe relationships between one thing and another, allowing us to place an event, state, etc. in the past, present or future. \n^1677146895729\n\n### Adjective #card\nA word that modifies or defines a noun, or a describing word. \n##### Degrees of Adjectives\n- Positive Degree: plain old adjective, e.g. happy\n- Comparative Degree: e.g. happier\n- Superlative Degree: e.g. happiest\n- Absolute: e.g. unique\n^1677146895731\n\n### Adverbs #card\nAdverbs are words that change, modify or qualify a verb, or another adjective/adverb. \n^1677146895733\n\n### Pronouns #card\nPronouns are words which we use in place of a noun, to avoid being repetitive.\nThe noun they replace is known as the antecedent. The antecedent doesn't always come before the pronoun that replaces it.\n^1677146895735\n\nSaying \"John did ....... He .......\" is **anaphoric reference**, whereas if the pronoun was before it would be **cataphoric reference**. \n\n### Prepositions #card\nAs the name suggests, a preposition places, links or connects words and phrases to other words and phrases within a sentence. Prepositions usually come directly before a noun in a sentence and can also precede a gerund verb (non-finite form, -ing version where it's being used as a noun \"shopping really annoys me\").\n^1677146895738\n\n### Conjunctions #card\nConjunctions connect words, phrases, clauses and sentences. They tell us the relationship between 'thoughts'.\n^1677146895740\n\n### Interjection #card\nAn interjection is a word or expression that occurs as an utterance on its own and expresses a spontaneous feeling or reaction.\nThe category is quite heterogeneous, and includes such things such as exclamations, curses, greetings, response particles, and hesitation markers.\n^1677146895742\n\n## Types of Writing Systems\n### Orthographic #card\nThis type of writing system is arbitrary and the language is \"represented\" in writing by something like an alphabet, such as English.\n^1677545865722\n\n### Iconographic #card\nThis type of writing system is less arbitrary and uses icons that visually represent what they're meant to mean, such as Chinese or Korean.\n^1677545865723\n\n## Accent and Dialect #card\nAccent is to do with how things are pronounced, purely to do with sound, while dialect is to do with words and the lexicon that people pull from. For example, a Yorkshire man may say tub instead of bath (a different dialect), but would still say grass and have it sound different.\n- **Accent**: style switching\n- **Dialect**: code switching\n^1683501679036\n\n### Definitions\n#### Jargon #card\nWords from any semantic field, namely specialist terminology that others won't understand\n#### Argo #card\n**A secret code**, the jargon or slang of a particular group or class (usually thought of lower class)\n#### Slang #card\nInformal language that is non-standard but something that isn't necessarily used by a particular group\n- Normally made to avoid detection to make it harder for certain groups to understand\n#### Colloquial Language #card\nConversational language that is informal\n#### Vernacular #card\nColloquial language or dialect that is regional\n- Street\n- Jive\n- Cant\n- Demotic\n- Idiomatic\n- Parlance\n- Patios\n- Phraseology\n- Archaic\n- Dialect, Sociolect and Idiolect\n#### Dialectal variation #card\nVariation associated with the language of a particular locality, region or geographical area. **one thing, multiple words**\n#### Flipping #card\nTerm used to suggest rapid semantic change in a word from its original meaning to its opposite (or near opposite)\n#### Orthographical variation #card\nHow the use of symbols, letters and spellings varies among language users\n#### Phonological variation  #card\nHow the sounds of a language vary among different speakers (accent)\n#### Semantic variation  #card\nHow word (and phrase) meanings vary from place to place and group to group. **one word, multiple things**\n#### Social variation #card\nVariation associated with a particular social group i.e., social class or educational background\n^1683501679041\n\n## Etymology\nThe study of the history of use and origins of words.\n\n### Examples\n- **Sandwich (n.):** \n  1762, said to be a reference to John Montagu (1718-1792), 4th Earl of¬†Sandwich, who was said to be an inveterate gambler who ate slices of cold meat between bread at the gaming table during marathon sessions rather than rising for a proper meal (this account of the origin dates to 1770).\n  \n  It also was in his honor that Cook named the Hawaiian islands (1778) when Montagu was first lord of the Admiralty (hence the occasional 19c. British¬†**Sandwicher**¬†for \"a Hawaiian\"). The family name is from the place in Kent, one of the Cinque Ports, Old English¬†Sandwic√¶, literally \"sandy harbor (or trading center).\"\n\n- **Berserk (adj.):**\n  1844, from¬†berserk¬†(n.) \"Norse warrior\" (by 1835), an alternative form of¬†[berserker](https://www.etymonline.com/word/berserker?ref=etymonline_crossreference \"Etymology, meaning and definition of berserker\"), a word which was introduced (as¬†berserkar) by Sir Walter Scott in \"The Pirate\" (1822), from Old Norse¬†berserkr¬†(n.) \"raging warrior of superhuman strength.\" It is probably from¬†*ber-¬†\"bear\" +¬†serkr¬†\"shirt,\" thus literally \"a warrior clothed in bearskin\" (see¬†[[n.]]%20+%C2%A0%5Bsark%5D(https://www.etymonline.com/word/sark?ref=etymonline_crossreference%20%22Etymology,%20meaning%20and%20definition%20of%20sark%22%7C%5Bhttps://www.etymonline.com/word/bear?ref=etymonline_crossreference#etymonline_v_8204%20%22Etymology,%20meaning%20and%20definition%20of%20bear%22)). Thus not, as Scott evidently believed, from Old Norse¬†berr¬†\"bare, naked\" and meaning \"warrior who fights without armor.\"\n\n- **Nightmare (n.):**\n  c. 1300, \"an evil female spirit afflicting men (or horses) in their sleep with a feeling of suffocation,\" compounded from¬†[night](https://www.etymonline.com/word/night?ref=etymonline_crossreference \"Etymology, meaning and definition of night\")¬†+¬†[[https://www.etymonline.com/word/mare?ref=etymonline_crossreference#etymonline_v_43707 \"Etymology, meaning and definition of mare\"]]¬†(n.3) \"goblin that causes nightmares, incubus.\" The meaning shifted mid-16c. from the incubus to the suffocating sensation it causes. Sense of \"any bad dream\" is recorded by 1829; that of \"very distressing experience\" is from 1831.\n\n- **Quarantine (n.):**\n  1660s, \"period a ship suspected of carrying contagious disease is kept in isolation,\" from Italian¬†quaranta giorni, literally \"space of forty days,\" from¬†quaranta¬†\"forty,\" from Latin¬†quadraginta\"forty\" (related to¬†quattuor¬†\"four,\" from PIE root¬†[\\*kwetwer-](https://www.etymonline.com/word/*kwetwer-?ref=etymonline_crossreference \"Etymology, meaning and definition of *kwetwer-\")¬†\"four\").\n  \n  The name is from the Venetian policy (first enforced in 1377) of keeping ships from plague-stricken countries waiting off its port for 40 days to assure that no latent cases were aboard. The extended sense of \"any period of forced isolation\" is from 1670s.\n\n- **Clue (n.):**\n  \"anything that guides or directs in an intricate case,\" 1590s, a special use of a revised spelling of¬†[clew](https://www.etymonline.com/word/clew?ref=etymonline_crossreference \"Etymology, meaning and definition of clew\")¬†\"a ball of thread or yarn\" (q.v.). The word, which is native Germanic, in Middle English was¬†clewe, also¬†cleue; some words borrowed from Old French in -ue, -eu¬†also were spelled¬†-ew¬†in Middle English, such as¬†blew, imbew,¬†but these later were reformed to¬†-ue, and this process was extended to native words (hue, true, clue) which had ended in a vowel and¬†-w. The spelling¬†clue¬†is first attested mid-15c.\n  \n  The sense shift is originally in reference to the clew of thread given by Ariadne to Theseus to use as a guide out of the Labyrinth in Greek mythology. The purely figurative sense of \"that which points the way,\" without regard to labyrinths, is from 1620s. As something which a bewildered person does not have, by 1948.\n\n- **Euphemism (n.):**\n  1650s, from Greek¬†euphemismos¬†\"use of a favorable word in place of an inauspicious one, superstitious avoidance of words of ill-omen during religious ceremonies,\" also of substitutions such as¬†[Eumenides](https://www.etymonline.com/word/Eumenides?ref=etymonline_crossreference \"Etymology, meaning and definition of Eumenides\")¬†for the Furies. This is from¬†euphemizein¬†\"speak with fair words, use words of good omen,\" from¬†eu-¬†\"good, well\" (see¬†[eu-](https://www.etymonline.com/word/eu-?ref=etymonline_crossreference \"Etymology, meaning and definition of eu-\")) +¬†phƒìmƒì¬†\"speech, voice, utterance, a speaking,\" from¬†phanai¬†\"speak\" (from PIE root¬†[[2]]%20%22to%20speak,%20tell,%20say%22).%20See%20also%C2%A0%5BEuxine%5D(https://www.etymonline.com/word/Euxine?ref=etymonline_crossreference%20%22Etymology,%20meaning%20and%20definition%20of%20Euxine%22%7C%5Bhttps://www.etymonline.com/word/*bha-?ref=etymonline_crossreference#etymonline_v_52548%20%22Etymology,%20meaning%20and%20definition%20of%20*bha-%22), and compare Greek Greek¬†aristeros¬†\"the better one,\" a euphemism for \"the left (hand).\" In English, a rhetorical term at first; broader sense of \"choosing a less distasteful word or phrase than the one meant\" is first attested 1793.\n\n- **Emergency (n.):**\n  \"unforeseen occurrence requiring immediate attention,\" 1630s, from Latin¬†emergens, present participle of¬†emergere¬†\"to rise out or up\" (see¬†[emerge](https://www.etymonline.com/word/emerge?ref=etymonline_crossreference \"Etymology, meaning and definition of emerge\")). Or from¬†emerge¬†+¬†-ency. As an adjective by 1881.\n","lastmodified":"2023-09-07T08:27:08.608882805Z","tags":[]},"/notes/School-Subjects/English-Language/Subsystems/Phonetics-Phonology":{"title":"Phonetics \u0026 Phonology","content":"#englang #subsystem\n\n## Phonetics\nPhonetics is the study of human speech sounds, how they're produced, transmitted and received. Phonetic transcription focuses on the precise way in which a sound is produced by a particular speaker on a particular occasion, but is not related to any particular language.\n\n\n- We refer to individual sounds as phones or sounds, never letters\n- There are two kinds of transcriptions using the IPA; broad and narrow\n- All broad (general or phonemic) transcriptions is done with phonetic slashes /si/\n- All narrow (phonetic) transcription is done within phonetic brackets:¬† \\[si]\n\n\u003e Questions:\n\nWhat is phonetics the study of? :: Phonetics is the study of human speech sounds, how they're produced, transmitted and received. ^1677146865711\n\nWhat are the two kinds of transcriptions using the IPA? :: There are two kinds of transcriptions using the IPA; broad and narrow. ^1677146865717\n\n### Fields #card\n#### Articulatory Phonetics\nHow sounds are produced\n#### Acoustic Phonetics\nPhysical properties of sounds\n#### Auditory Phonetics\nHow sounds are perceived\n^1685778115231\n\n### Transcription\nTranscription aims to create a system of one-to-one sound-symbol correspondence, which is not necessarily the case with spelling.\n\nExamples of transcription:\n- Next: /n…õkst/\n- Chin: /t É…™n/‚Å† \n- Lamb: /l√¶m/ \n- Kite: /ka…™t/\n- Cat: /k√¶t/\n- Meet: /miÀêt/\n\nA rough-coated, dough-faced, thoughtful ploughman strode through the streets of Scarborough.¬† After falling into a slough, coughed and hiccoughed.\n\n/…ô …πuf-k…ô äted, d…ô ä-fe…™sd, Œ∏…îÀêtf äl pla äm…òn str…µ äd Œ∏ruÀê √∞…ô striÀêts …íf sk…ëÀêbr…ô. …ëÀêft…ô f…îÀêl…™≈ã …™ntuÀê …ô sla ä, k…ëft and h…™k åpt/\n\n### The International Phonetic Alphabet\nThe IPA is an international alphabet that can transcribe any of the world's languages.\n- In IPA transcription, one phone (IPA symbol) usually equals one sounds\n\n### Allophones #card\nWhat is an allophone? :: Allophones are more specific interpretations of a phoneme, made for narrow transcriptions.  ^1677146865719\n![[Allophone Diagram.png]]\n\n### Place + Manner\n#### **Place** of Articulation #card\n**Where** the sound is made\n![[Human Mouth Diagram.png]]\n##### Consonants\n![[Consonant IPA Table.png]]\nThe top is the place and the and the left is the manner\n##### Vowels\n![[Vowel IPA Table.png]]\n#### **Manner** of Articulation\n**How** the sound is made\n^1685778115248\n\n## Phonology #card\nPhonology is the study of the sound system of a specific language. The sounds of the English language for instance are very different to the sounds of Italian or Mandarin, and the sounds of Australian English differ from those of American English.\n- How many sounds in Australian English? :: 44 phonemes ^1677146865721\n- Each language has different sounds and stresses particular phonemes, and can completely change the meaning of the word (*pro*ject vs pro*ject*)\n\n### Connected Speech\nThere are no actual gaps in between words in speech generally, only written. \n#### Elision #card\nWhat is elision? :: The omission (deletion) of a sound in connected speech (**sounds are lost**) - this sound may be a vowel, a consonant or even a whole syllable. For instance 'cos instead of pronouncing because. We often **elide** sounds in rapid, everyday speech purely for ease of pronunciation. Another example would be 'want to' vs wanna ^1677146865722\n#### Vowel Reduction #card\nWhat is vowel reduction? :: Similar to elision but, instead of disappearing completely, vowels in unstressed positions are reduced to schwa /…ô/. So the word 'to' /tu/ might be reduced to /t…ô/ ^1677146865723\n#### Assimilation #card\nWhat is assimilation? :: When a **sound changes** to become more like a neighbouring sound. Assimilation may be *progressive* where the sound is affected by a preceding sounds, or *regressive* (also known as *anticipatory assimilation*), where the following sound is affected by a following sound.  ^1677146865724\n##### Examples\nProgressive:\n- talked becomes /t…îÀêkt/\n- pens become /penz/\nRegressive:\n- light blue /laip bluÀê/\n- green boat becomes /griÀêm b…ô ät/\n\n#### Insertion #card\nWhat is insertion? :: There are two examples of **sounds being added**, generally deliberately. The first is insertion, the other is epenthesis. **Insertion doesn't add a full syllable, whereas epenthesis does**  ^1685778838440\n- a voiceless stop insertion where, between a nasal consonant and a voiceless fricative, a voiceless stop with the same place of articulation as the nasal consonant is inserted.\n\t- e.g. In English, many add a /p/ to hamster and say \"hampster\"/\n- after a nasal consonant, a voiceless stop may be 'added\n\t- e.g. In English, many add a /k/ to something which becomes /s åmŒ∏…™≈ãk/\n^1677146865725\n\n##### Epenthesis #card\nWhat is epenthesis? :: Epenthesis is the insertion of an extra sound into a word. **Epenthesis adds a full extra syllable** ^1685778838445\n- Involves the addition of sounds (syllables) where they don't strictly belong. For instance, it's common for people to insert a vowel in 'souvlaki' so that it sounds like 'souv-e-laki'. And humbling sometimes becomes humb-e-ling.\n^1677146865726\n\n##### Intrusion #card\nWhat is intrusion? :: This is where sounds are added between words but is not deliberate, but may be put together as insertion.  ^1685778838448\nWhen two vowel sounds meet, we tend to insert an extra sound which resembles wither a /j/, /w/ or /r/, to mark the transition sound between the two vowels, a device referred to as intrusion.\n- Consonants can also be added, for instance Australians often add r in law and order so that it sounds more like \"lor an order\".\n^1677146865728\n\n#### Metathesis #card\nWhat is metathesis? :: Metathesis sounds complicated but it's a very common aspect of the English language. It is the transposition within a word of its sounds. The word \"metathesis\" comes from the Greek word meaning to transpose. It's also known as a permutation.  ^1685778838451\n- Ask becomes /arks/\n- Nuclear becomes /nuc…ôl…ôer/\n^1677146865729\n\n### Prosodic Features #card\nAffect **how** we say something\n- Volume is the modulation of volume in your voice, which is used to convey emotions\n- Tempo is the speed and which we speak, reasons for speaking faster or slower\n- Intonation is the pattern of pitch changes in speech, it is the variation of spoken pitch used in language. It can be used to\n\t- Indicate the different attitudes and emotions of the speaker\n\t- Signal the difference between statements, questions.\n- Stress is the degree of strength used to pronounce a syllable\n^1677146865730\n\nNon-verbal features do not affect the features of speech, while paralinguistic features (cough, laugh, breath, aka vocal effects) do impact my speech, meaning you can still hear them. \n\n### Phonological Patterning #card\n- Alliteration: seven slippery snakes\n- Assonance: he claps his hands and puts them in the sand\n- Consonance: Mike likes his new bike\n- Onomatopoeia: boom, crash, brrrrrr\n- Rhythm: I'm going down like a bottle of whiskey\n- Rhyme: The cat and the hat, sat on a mat\n^1677146865731\n","lastmodified":"2023-09-07T08:27:08.608882805Z","tags":[]},"/notes/School-Subjects/English-Language/Subsystems/Quiz":{"title":"Quiz!","content":"#subsystem #englang \n\n## Phonetics \u0026 Phonology\nWhat is the difference between phonetics and phonology? :: Phonetics studies speech sounds, and is not related to any language, while phonology studies the sound system of a particular language ^1685840741145\n\nWhat is the difference between phonemic and phonetic transcription? :: Phonemic transcription is **broad** (the intended phonemes of the general language), and phonetic is **narrow** (more detail on how the actual sounds are pronounced) ^1685841049197\n\nWhat are the prosodic features? :: The prosodic features (aka suprasegmental features) are **stress, pitch, intonation, tempo** and **volume**. They are phonological properties that relate to the pronunciation of syllables, words and phrases - not simply phonemes. ^1685846668922\n\nWhat is a complement? :: A word (or words) needed to complete the meaning of an expression, e.g. Algebra is ==difficult==. Practice makes algebra ==easy==.","lastmodified":"2023-09-07T08:27:08.608882805Z","tags":[]},"/notes/School-Subjects/English-Language/Subsystems/Semantics":{"title":"Semantics","content":"#englang #subsystem \n## Vocabulary\n### Synonyms/Antonyms #card\nSynonyms have the same or similar definition and antonyms the opposite\n^1683503025929\n\n### Hyponyms/hypernyms #card\nHyponyms are a type of something, so rabbit is a hyponym of animals, and animal is a hypernym of rabbit.\n^1683503025941\n\n### Polysemy #card\nWhen one word has multiple meanings, like bank as the side of a river and also where people put their money.\n^1683503025947\n\n### Euphemism #card \nMake something more polite, such as \"passed away\" or \"no longer with us\" for dying\n^1683503025953\n\n### Dysphemism #card \nMake something purposely more offensive, such as \"snuffed it\" for dying\n^1683503025958\n\n## Semantic Change #card\n\n| Process                               | Example         |\n| ------------------------------------- | --------------- |\n| Shift                                 | Mouse           |\n| Narrowing                             | Computer        |\n| Broadening                            | Bird            |\n| Elevation/Amelioration (+ve meaning)  | Fan             |\n| Degeneration/Pejoration (-ve meaning) | Knave/Emergency |\n| Eponyms                               | Elevator        |\n| Metaphor                              | Leg/Tongue      |\n^1683503025963\n\n\n","lastmodified":"2023-09-07T08:27:08.608882805Z","tags":[]},"/notes/School-Subjects/English-Language/Subsystems/Syntax":{"title":"Syntax","content":"#englang #subsystem \n\nSyntax refers to sentence \u003cu\u003estructure\u003c/u\u003e, whereas the sentence types refers to semantics.\nThis means it studies the parts of a sentence, and how information s organised within speech or writing.\n\n- Every sentence contains a subject and a predicate\n- The subject refers to what or who is doing the action within the sentence. This is normally found at the beginning of an English sentence.\n- The predicate tells us about the subject.¬† It contains the verb, direct and indirect object etc.\n- If a group of words¬† does not contain both a subject and a predicate it is not a sentence ‚Äì it is a phrase.\n\n## Direct vs Indirect Object #card \nObject: noun that has not taken action of the verb mentioned\n- Direct object: involved in action\n- Indirect object: affected by action; not directly involved\ne.g. He gave his teacher a gift\n\tteacher - direct object\ne.g. He gave a gift to his teacher\n\tteacher - indirect object\n\u003cu\u003eTIP\u003c/u\u003e: remove one of the nouns to see if it makes sense without\nunnecessary noun $\\rightarrow$ indirect object\n^1685839922103\n\n## Clauses #card \nClauses express one idea, and they are made up of the following:\nsubject, verb, object, complement, adverbial\n![[Parts of a clause.png]]\n^1679810263228\n\n## Phrases #card \nA phrase is a group of two or more words which act as a part of speech. They generally do not contain either a subject or a finite verb. They also perform the function of a particular word class.\n### Finite Verbs\nIn order for a verb to be finite is must contain a subject, tense and a number.¬† For example:¬†\nLoving life.¬†\nSubject:¬† unknown\nTense:¬† Present\nNumber: unknown\nTherefore it is a phrase.\n^1679810263232\n\n## Sentence Types #card\n- Declarative: a statement\n- Interrogative: a question\n- Imperative: a direction or command\n- Exclamative: an exclamation! \n^1678063588820\n\n## Sentence Structure\n### Simple Sentence #card\nConsists of one independent clause (contains a subject and verb and expresses a complete thought).\n- I like coffee.\n- Mary likes tea.\n^1678063588836\n\n### Compound Sentence #card \nTwo or more independent clauses joined by a conjunction or semi colon. \n- I like coffee and Mary likes tea\nThere are only seven coordinating conjunctions (FANBOYS):\n- for\n- and\n- nor\n- but\n- or\n- yet\n- so\n^1678063588842\n\n### Complex Sentence #card \nA complex sentence consists of an independent clause plus a dependent clause. (A dependent clause starts with a subordinating conjunction or a relative pronoun, and contains a subject and verb, but does not express a complete thought.)\n^1678063588846\n\n### Compound-Complex Sentences #card\nConsists of at least two independent clauses and one or more dependant clause.\n^1679810263235\n- John didn't come because he was ill so Mary was not happy.\n^1678063588849\n","lastmodified":"2023-09-07T08:27:08.608882805Z","tags":[]},"/notes/School-Subjects/English-Language/Transition-Period/Freedom-of-Speech-Essay":{"title":"Freedom of Speech Essay","content":"\n#englang #essay\nFreedom of speech: it is an integral part of our society's concept of freedom and liberty, and a right that many people do not have the privilege to exercise. Nonetheless, our nations are built on a notion of democracy that is flawed without this freedom, the ability to be able to articulate opinions and thoughts without the fear of being censored or face legal consequences. Time and time again, this right has been used to defend hate speech, and though freedom of speech definitely gives people the right to use hate speech, as it always has done, this does not mean people are exempt from any form of retaliation.\n\nVery frequently when people say that their freedom of speech is being violated, what they actually mean is that they are upset that people do not agree with them. In no way has anyone physically stopped them from saying ludicrous or hateful things, they have just faced retaliation for the harmful messages they are spreading. Such petty individuals seemingly miss the point of the concept: they are allowed to say what they want and let people listen, but what people do when they hear the message is up to the people and the people alone.\n\nIn some extreme cases, hate speech *will* be removed, or in other words, the opinion of the speaker is being censored. This in most cases can be seen as a consequence of the impact of the message, not the idea the message carries itself. Once again, they have fully been able to voice their opinion, and it is not being silenced by some tyrannical regime, but has rather been removed due to active harm that is being caused to others. Does it not make sense that if a message online is hypothetically teaching children how to make explosives that cause property damage, it would be removed and erased? This is simply correct not because it is censoring a message of being able to defend yourself, but because it is hurting landowners and the kids it influences. There is always a line, and though the edges near that line can be blurry, someone has to be able to apply moral judgement to the outcome of messages as to prevent easily preventable actions.\n\nIn conclusion, freedom of speech is a wonderful right that should apply to us all, including allowing the use of any kind of speech. This being said, hate speech can and will be removed from certain platforms if it is actively causing harm, an image the platforms would not like to convey, and people are welcome to find other ways to express their opinions. People disagreeing with an opinion is clearly not a violation of your freedom of speech, as encouraged discourse is the whole idea behind the concept, and people of all ages should be free to form their own opinions with all information available to them.","lastmodified":"2023-09-07T08:27:08.608882805Z","tags":[]},"/notes/School-Subjects/English-Language/Transition-Period/Interesting-English-Language-Articles":{"title":"Interesting English Language Articles","content":"\n#englang #research\n1. The Scots Language\n\tThis is a really interesting article I found through [this video](https://www.youtube.com/watch?v=zP-PV9ryXM4) by xidnaf, and it talked about when a language actually becomes a different language. The line seems to be *really* blurry surprisingly.\n\t\n\tThe video mentions that linguists actually split languages by mutual intelligibility, so if people can understand each other even though some words are different or dialects/accents are different, the language is the same.\n\t\n\tThis still has its own problems though, because for example the Chinese \"languages\" are referred to as dialects even though they can't exactly understand each other, but they still use the same writing system, so you're in the weird position of they speak different languages, but they write in the same one ¬Ø\\\\\\_(„ÉÑ)\\_/¬Ø\n\t\n\tDialect Continuums are also a thing which is cool, overall there's just quite a big range. Australian people might struggle to understand British people, not a different language, but could still maybe understand a *few* loan words in Arabic or such, and the range varies such as English with German etc.\n\t\n\tIt's also not symmetrical e.g. people from Denmark can understand people from Sweden a lot better than vice versa.\n\t\n\tAll in all, what even is a different language is basically up to what we call it, and in the end it's basically all politics funnily enough.\n\t\n\tAnd now we get the Scots Language! It split from Old English similar to modern English, which was spoken about 1000 years ago in Britain. This is completely seperate to Scottish mind you, but is rather a remnant of what Old English was like.\n\t\n\tHere's a demonstration of the Scot's Language which can be found [here](https://youtu.be/cENbkHS3mnY) and helped demonstrate the concept of mutual intelligibility, which is quite common in other places but not so much for native English speakers\n\t \n\thttps://www.atlasobscura.com/articles/scots-language\n\n2. Why is the letter w so weird?\n\tLike isn't it so odd that it's like double u, but it's not even shaped like that, like where did that come from??\n\thttps://youtu.be/sg2j7mZ9-2Y\n\thttps://www.rd.com/article/why-w-is-pronounced-double-u-and-not-double-v/\n\n","lastmodified":"2023-09-07T08:27:08.608882805Z","tags":[]},"/notes/School-Subjects/English-Language/Transition-Period/The-Eloquent-Ape":{"title":"The Eloquent Ape","content":"\n#englang #article\n![[The Eloquent Ape.pdf]]\n\nLanguage is like code, encoded in certain patterns of actions like vocal noises, which are then decoded to decypher meaning by someone else.\nOur ability to communicate is founded on not only our larger brains and ability to control our facial muscles, but also our need for complex social behaviours such as the ability to negotiate, trade and bargain.","lastmodified":"2023-09-07T08:27:08.608882805Z","tags":[]},"/notes/School-Subjects/English-Language/What-is-a-Language/Features-of-Language":{"title":"Features of Language","content":"#englang #notes \n\n## Spontaneity and Displacement\n### Spontaneity #card\nHumans have the ability to initiate speech. Unlike animals that need a stimulus such a biscuit or a treat to be forced to speak, humans speak by themselves and start conversations themselves.\n### Displacement #card\nHumans also have the ability to talk about things that are not in the present moment. This means that they can talk about something that happened lats week, or something that is happening somewhere else right now. This is similar to object perminance, having the ability to communicate beyond the here and now.\n^1685778274060\n\n## Arbitrariness #card\nIn general, human language is quite arbitrary. There is nothing about language that neccessarily symbolises something. There is nothing about the sound \"tree\" that links to the thing outside which is brown and green; it is all random. Though there are exceptions, the most common of which being onomatopoeic words such as *whoosh*, *slurp*, *pop* and so on, most words in general are arbitrary.\n^1685778274083\n\n## Structure and Creativity #card\nHuman language is an open system that can be added to and combined and recombined in many ways to create new forms. Random units of sound which don't have meaning in of themselves combine to form meaningful morphemes or words. Animals generally don't have this ability, where one sound means one action, and cannot be split up into individual pieces to be reconstructed. Male grasshoppers have the ability to say one of 6 messgages; humans have the ability to talk about literally anything we want. We can even talk about things that don't exist!\n^1685778274087\n\n## Cultural Transmission #card\nHuman language depends on cultural transmission. It is not genetic and instinctual like a dog barking, who will bark the same wherever they go, but is rather learnt from the environment. A cantonese born child growing up in an English speaking house will speak English, it is not something defined inherantly but by the people around the child. Similarly, a bird isolated from any contact will still sing songs, but humans isolated from any society will not be able to speak any languages until they start learning from contact with people around them.\n^1685778274090\n","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/English-Language/What-is-a-Language/Key-Terms":{"title":"Key Terms","content":"#englang \n\n## Dialectal Variation #card \nVariation associated with the language of a particular locality, region or geographical area.\n^1678180892654\n\n## Flipping #card \nTerm used to suggest rapid semantic change in a word from its original meaning to its opposite (or near opposite).\n^1678180892684\n\n## Orthographical Variation #card \nHow the use of symbols, letters and spellings varies among language users.\n^1678180892687\n\n## Phonological Variation #card \nHow the sounds of a language vary among different speakers (accent)\n^1678180892690\n\n## Semantic Variation #card \nHow word (and phrase) meanings vary from place to place and group to group\n^1678180892693\n\n## Social Variation #card \nVariation associated with a particular social group i.e., social class or educational background.\n^1678180892696\n","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/English-Language/What-is-a-Language/Variables-of-Communication":{"title":"Variables of Communication","content":"#englang #notes\n\nIn [[English Language]] Units 1 - 4 we will be using these variables to annotate texts:\n\n## Mode #card\nThe medium of communication\n- **Written**\n- **Spoken**\n- **Sign**\n^1685778339519\n\n## Register #card\nFormality and respect level, the way a person speaks in respect to their audience\n- **Intimate**: people you know really well, close\n- **Casual**: the way we speak every day to one another, varies from more formal to less in of itself\n- **Consultative**: where there is an uneven power relationship, i.e. doctor patient, student teacher\n- **Formal**: one way, so a speech or letter. maybe meeting the queen lol\n- **Frozen**: things that don't change, such a marriage ceremony, beginning of a sermon, starting of a high court, welcome to country\n^1685778339591\n\n## Context #card\nEstablished background/circumstance, situation surrounding text\n- Situational\n- Cultural\n- Historical\n^1685778339597\n\n## Audience #card\nThe demographic that your are speaking to\n^1685778339603\n\n## Function #card\nPurpose of communication, what we are hoping to gain\n- What is the text set out to do\n- Social purpose, e.g. building rapport, encouraging group membership\n^1685778339610\n\n## Field #card\nHow specialised the communication is, area of interest + subject area\n^1685778351773\n\n## Setting #card\nWhere the communication is taking place\n^1685778317157\n\n\u003cmark style=\"background: #F9C74F;\"\u003e# MR CAFS\u003c/mark\u003e\n","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/English-Language/What-is-a-Language/What-is-a-Language":{"title":"What is a Language?","content":"\n#englang #research \n## Definition 1\n### Source: [Language Meaning \u0026 Concept | What is Language? - Video \u0026 Lesson Transcript | Study.com](https://study.com/learn/lesson/language-meaning-concept.html)\n### Definition:\nEssentially, language is a term for any complex communication system used by humans that consists of words and phrases that, when combined, can create infinite variable utterances. How humans initially developed language is not wholly clear and is something that linguists are still researching. Most humans learn at least one language in early childhood. If a person lacks exposure to language as a young child, they will never be able to fluently learn a language as an adult because of how human brain development works.\n\n---\n## Definition 2\n### Source: [What is Language | IGI Global](https://www.igi-global.com/dictionary/using-lean-method-in-english-language-classes/16613)\n### Definition:\nSystem for the expression of thoughts, feelings, etc., by the use of spoken sounds or convention symbols.\n\n---\n## Definition 3\n### Source: [what is language? : linguistics](https://www.reddit.com/r/linguistics/comments/bw37zc/what_is_language/)\n### Definition:\nA language is defined as a being an open system of communication. In other words, new symbols can be freely added to the system. For example, if I say that I define \"vlirsnik\" to mean \"the feeling of learning something new\" I can add it to this system of communication we are using right now and you will be able to understand it. Therefore, this is a language.\n\n---\n## What is common to your three definitions?\nAll three of the definitions mention that languages are a communication system, that try to express thoughts, ideas and feelings. They also mention that they have a common set of conventions that allow for a practically infinite set of meanings to be added.\n\n---\n## In your own words explain the word \"language\"\nA language is a set of communication standards that aim to convey meaning in the form of ideas, concepts, thoughts and feelings. This is done in a way that ideas can be added to these said conventions to be able to convey new concepts that were previously not expressible, therefore being modular in its usage.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/Literature":{"title":"Literature","content":"\n#lit #subject \n## Unit 1\n### AoS 1: The Penelopiad\n- Read an extract from [[A Thousand Ships Extract|A Thousand Ships]] and annotate, and then compare and contrast it with [[Calliope and the Painting|a painting]]\n- Read [[Chapter 1]] of The Penelopiad and write about how [[Atwood]] comments on [[Culture \u0026 Society- The Penelopiad|Culture and Society]]\n- Write a short 200 word essay on a quote from [[Chapter 6]]\n- Write about the maids' [[Cold Eyed Teenaged Killer|cold eyed teenaged killer]], Telemachus\n- Write a [[The Obstacle To Go Through|creative piece]] on Chapter 6\n- Do a close passage analysis on [[The Birth of Telemachus Close Analysis|the birth of Telemachus]]\n- Comment on [[Relationships|relationships]] in Chapter 12\n- Comment on [[Penelope as a Narrator|Penelope as a narrator]] in Chapter 15\n- Explore the significance of a passage from Chapter 18, [[News Of Helen|News of Helen]]\n- Explore [[Chapter 24]] and what it says about the eyes of the beholder\n- What is the significance of [[Truth and Storytelling]] in the novel.\n- [[What is The Penelopiad About?|What is The Penelopiad even about?]]\n- Analyse the quote, [[In Death I Know Everything|\"Now that I am dead I know everything.\"]]\n- Create an [[Oral Presentation Script|Oral Presentation]] on any extract of ur choosing in the Penelopiad","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Invisible/Question-Documents/44-to-1h12-Minutes":{"title":"44 to 1h12 Minutes","content":"#lit #questions #flashwrite \n\n1) What lie does Tor tell the police officer?\nShe tells the police officer that she hasn't met El at all.\n\n2) How does the detective try to blackmail Tor into giving him information about her brother?\nHe says that if she doesn't tell him the truth, they will remove her mother's status of ease.\n\n3) What new command does Tor give Rose if she is in danger? Why does she do this?\nShe tells Rose to delete all information about her and all memories, because she does not want to be tracked or found.\n\n4) True or false: even if Rose deletes all memories of Tor, she will still remember the shapes and patterns that Tor has taught her.\nTrue\n\n5) What is Cal concerned about? What does he want Tor to do?\nHe is concerned that Tor is throwing away everything that she has earned and her whole life for her brother who she hasn't seen in so long. He wants Tor to just forget about it.\n\n6) ‚ÄúIt‚Äôs never going to be for old people, is it? It was always going to be a two-way mirror. We see what we want to see; they see everything.‚Äù Explain what Cal means by this.\nHe says that Tor knows what she is creating, and she is safe creating something that helps her company spy on people, that Rose is meant for surveillance not \"helping old people\". He means that we can make our truth whatever we want, and in return they can see everything.\n\n7) What is it that Rose cannot process?\nThe unspoken. The information that is not said or expressed but is in between people. Moments that are shared through silence.\n\n8) Who is Leith?\nEl's son.\n\n9) Why did El leave?\nTo go and marry a woman that he loved who did not have status of ease.\n\n10) ‚ÄúI can make patterns of the world, recognise, splice, relearn behaviour, but there is something between them which I cannot see. I cannot make sense of the invisible. The things they don‚Äôt say or do.‚Äù (Rose) Why does Rose find it impossible to make sense of the invisible?\nBecause she cannot sense it, there is no data for her to go off. She is not human, no matter how much they try, because she cannot see what they *do not* do, only what they do. We have something between us, the moments of silence and the shared understanding that Rose will never have.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Invisible/Question-Documents/7-to-29-Minutes":{"title":"7 to 29 Minutes","content":"#theinvisible #questions #lit \n\n1)¬†¬†¬† What are the people protesting about outside Parliament?\nPeople are protesting about the use of using digital tracking and identification to deter illegal movements in the city for people that are displaces by global flooding and climate change, taking away all the privacy of people to keep them under control.\n\n2)¬†¬†¬† Who does Tor see on the television news? How long has it been since she has seen him?\nTor sees her brother on the news, and it's been 17 years since she's seen him.\n\n3)¬†¬†¬† What consequences is Cal concerned about if Tor goes out to find him?\nCal is concerned that Tor will get caught on surveillance and be mistaken as a defacer, and that their status of ease won't mean anything if she goes outside to look for him.\n\n4)¬†¬†¬† What does the man at Westminster mean when he tells Tor, ‚Äúyou‚Äôre talking to the invisible‚Äù? What is implied about the setting by this?\nIt is implied that he was never here, but also that she is talking to someone who was never registered and that cannot be seen by any digital systems. This \"invisible\" person will never be tracked, so it is the same as Tor never having talked to anyone.\n\n5)¬†¬†¬† Why is Tor‚Äôs mum reluctant to use her Rose?\nShe doesn't like the use of technology everywhere, because she feels like she will wend up becoming too dependant on it and she wants to be able to do things herself.\n\n6)¬†¬†¬† What does Rose find so difficult to interpret about the conversation between Tor and her mother?\nThe emotions and expressions that she was not programmed to register. She find it really hard to understand how they are feeling or what they are thinking about each other, because their feelings do not fall into the cookie cutter definitions of what people normally feel. She sats she can't understand the blank expression and the things that are left unsaid.\n\n7)¬†¬†¬† Rose says, ‚ÄúAnd I wonder what it is like to stand and look at the sky. I can make a sky, but I cannot look at it. I can conjure a sea but I cannot experience its coldness.‚Äù What does she appear to be yearning for here?\nShe appears to be yearning for feeling and touch, similar to how humans feel it. She appears to be yearning for being human.\n\n8)¬†¬†¬† What does Tor suspect has been hidden from the people of London?\nTor suspects that photos and information and the old plans of the city have been hidden from everyone.\n\n9)¬†¬†¬† What is unusual about the library in Charing Cross Road? Why does Cal fear it will be dangerous?\nBecause it is not registered anywhere and is run by people off the books, otherwise known as defacers.\n\n10) Why is Rose unable to see inside the ‚Äúmind‚Äù of the library?\nBecause none of it is digital. She cannot index what is not digital so it is all isolated from her.\n\n12) What does Tor discover about the Circle Line by consulting the A ‚Äì Z?\nThat it is in fact not a circle, it is not just a circuit but there is a leg that travels outwards. This leg has been hidden and removed from all the maps everywhere.\n\n14) What is outside the borders of London?\nLadbroke Grove, and the rest of the leg. London was most likely isolated as an island after some great floods that isolated it from the rest of the country, and people no longer travel inside and outside the place.\n\n16) How might Tor be able to get there?\nApparently there is a \"ghost train\" that travels sometime at night and takes people out of the central area outside of London, This is how she plans to get there.\n\n17) ‚ÄúThis is a library. You can open a book and read something, close it, forget it, but it‚Äôs still there. It exists, even if we don‚Äôt think about it.‚Äù Discuss the significance of this statement.\nThis links back to the title of the show. It is all invisible, but the information is still there even if you forget it. Information is always there when it is in its hard copy, but when it becomes digital it can all go away, even when people do not think about it. There is a lot behind the eyes of what we don't actively think about, a lot that is hidden.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Invisible/Question-Documents/Eight-Minute-Questions":{"title":"Eight Minute Questions","content":"#theinvisible #questions #lit \n\n1. \"She continually expands in ways of thinking.\" \"I taught her to ask questions.\" (Tor on Rose). How does the playwright Linda Marshall Griffiths want the audience to understand Rose?\nPossibly Griffiths is positioning the audience to treat Rose like a learning child, like a project that was created to understand as much as possible and have a curiosity not much unlike that of a human. As such we are positioned to have sympathy towards Rose and treat her as more than just a machine.\n\n2. List the clues about setting in the first seven to eight minutes of the play. Make an inference from these clues. What does Linda Marshall Griffiths want the audience to understand about the world in which this play takes place?\nI think one of the clues is how Wren talks about how he enjoys fear to Rose. This is slightly unnerving, as an AI trying to grapple with human emotions may not fully understand the implications of that statement, because a lot of the time even humans don't interpret that correctly. I think this could possibly foreshadow that something more sinister is to come with Rose.\n\n2. What question does Tor ask Rose? What is Rose's response? What does Tor ask Rose to do regarding this?\nhmmm","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Invisible/Question-Documents/Silent-Solo-Three-Statements":{"title":"Silent Solo- Three Statements","content":"#lit #flashwrite \n\n1. Tor lives in a bubble because of her status of ease, because she hasn't been exposed to the rest of the world. She very happy living in her own bubble, because even though she might see glimpses of the outside world not being as well off as them, she's very okay to continue living the way that she does.\n2. Tor lives in a bubble and her brother El doesn't like this about her.\n3. Tor lives in a bubble, so she cannot see further than her own life. She is content with the position she is in and is unaware of the situation around her. ","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Invisible/Surveillance":{"title":"Surveillance","content":"#lit #flashwrite #theinvisible \n\n\u003e [!info]\n\u003e \n\u003e Using the passage as a focus, discuss the ways in which the concept of surveillance is endorsed, challenged or marginalised.\n\n\nThe concept of surveillance is ","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Invisible/Theme-Essay":{"title":"Theme Essay","content":"\n\u003e [!info]\n\u003e \n\u003e \"The Invisible\" represents how often, the government in pursuit of security ends up being corrupted by power, but cannot fully control the unseen resilience that will always amount in resistance of censorship.\n\u003e \n\n","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Invisible/World-Setting":{"title":"World \u0026 Setting","content":"#theinvisible #flashwrite \n\n\u003e [!info]\n\u003e \n\u003e What have you learned so far about the setting and the world of this play? What questions do you have?\n\nThe world of the play is quite dystopian, and there's a significant amount of control of information. It is set far in the future, around 2090 or later, and all information is stored digitally. People who refuse to go digital and barred from society, and they are known as defacers. \n\nFor Tor and her family, there is nothing outside of London. They have an island, the inner circle, and there is nothing outside for them. There is also a significant lack of resources and food, in fact her family takes it as a treat when they are given the opportunity to eat an apple. As such, they may be extremely advanced in technology but lack many other things, like freedom of information, food and overall their life feels quite mundane. Information is also very easily lost, because it is all controlled by a central body who can remove or add whatever information they like whenever they want. \n","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/A-Thousand-Ships-Extract":{"title":"A Thousand Ships Extract","content":"#lit #flashwrite \n\n\u003e Comment on the author's use of tone and voice of the character Calliope in this extract.\n\nThe author makes Calliope's voice quite direct, using a lot of short clauses which comment on her own emotions and the state of the world around her. This observational tone combined with propositions such as, \"Perhaps he hasn't thought of what it is like to be me,\" allow the extract to form a clear image of how Calliope feels in the situation she describes: she is not understood and she is alone in her suffering. She questions her reality a lot, the need for it and the purpose behind it. Rhetorical questions such as, \"Can he really believe he has something new to say?\" or \"How much epic poetry does the world really need?\" all play into this narrative of it all being unnecessary, that none of it is required and is all built up on a greed for more fame and wealth and money, forgetting the true purpose behind any of in the first place.\n\nThe author also uses anaphora as a staple in Calliope's voice, utilising the repetition to highlight the monotony and \"foreverness\" of this situation. It is all a cycle, as evident by the end of the extract, and the character of Calliope embodies this, having experienced everything already. \"Every conflict joined, every war fought very city besieged, every town sacked, every village destroyed.\"","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Atwood":{"title":"Atwood","content":"#lit #thepenelopiad #author\n\nMargeret Atwood is a Canadian writer and poet best known for her prose from a feminist perspective. She is the author of The Penelopiad, a retelling of Homer's [[Odyssey]] from [[Penelope|Penelope's]] perspective.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Calliope-and-the-Painting":{"title":"Calliope and the Painting","content":"#lit #flashwrite\n\nBoth the painting and Calliope both look very tired, like this has been going on for so long and they just want it to end. They are both also the subjects of painting, likely having to have sat as a model for so long, such a dull repetitive process that has completely drained them. They both are conventionally beautiful, dressed with riches and money, but there is a hollowness in their eyes, because none of it really means anything. Overall, she just seems tired and broken, because there is more to life than just the wealth and money that they are chasing, posing as an obedient wife character that will follow whatever the male lead says. The sense of dread permeates both the pieces, because they both would rather not be there.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Chapters/Chapter-1":{"title":"Chapter 1","content":"#lit #chapter #thepenelopiad \n\n\u003e Whose point of view is this told from and what is their motivation in telling this story?\n\nThe introductory chapter is told from the point of view of [[Penelope]], someone who has been neglected their whole life and now, only in death, has the will and ability to try and tell her story. She has been lost in the shadows for all her life, so she wants to be able to portray her side of the story, and get it all out there because she never could while she was alive.\n\nShe had to suffer so much just because of her husband, and she doesn't want others to go down the same path of suffering needlessly. She wants to be known as more than just a faithful wife, but her own person. The weaponisation of [[Penelope|Penelope's]] character not only makes them suffer more, but further excuses the behaviour of the men.\n\n\u003e Comment on the tone used here and give an example\n\nThe tone of the chapter is very sombre, and and reminiscent. She feels sad that her life never amounted to too much, but she is determined now to tell her story when she can. She says now that no one cares, that it didn't matter at all, but she's waited for so long that she can finally find a little bit of motivation because there is nothing left to lose. \n\nShe is also almost slightly resentful towards Odysseus. She talks about his characters and how she was played the fool, holding a bit of a grudge but condemning herself for not acting on it sooner. \"I turned a blind eye, I kept my mouth shut or if I opened it, I sang his praises\". This rescinded tone, where she sounds so defeated and tired doesn't see herself as anyone perfect but is rather very self critical. She talks about her blissful ignorance, but in death she realises that she was dragged through the mud, and now she wants to set the record straight. \n\n\u003e What is meant by \"A stick used to beat other women with\"?\n\nPeople weaponise [[Penelope|Penelope's]] faithfulness and use that as a measuring bar to compare other women with. So [[Penelope|Penelope's]] faithfulness, rather than being celebrates, is used to degrade other women and further pushes the status quo that women are defined by their husbands. Keeping that loyalty was actually something that hurt her, and she doesn't want others to follow her example because it just makes the lives of others worse.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Chapters/Chapter-24":{"title":"Chapter 24","content":"\n\u003e [!info]\n\u003e \n\u003e What does this chapter suggest about perception and the way it changes based on the subject and the beholder?\n\nThis chapter shows us the maid's perception of their own story, told through a historical lens where they interpret themselves to be the three followers of Artemis, a god who is viewed favourably. They assign symbolism to themselves, similar to how the Odyssey and other tales do to deeply interpret their lives as metaphors for something greater. Atwood explores how the perception of a story changes from person to person and lens to lens. We look at the story for a modern view, linking it to what it tells us about our society as *we* know it, but for the maids, the world may have very well meant something very different. The observer, looking at themselves, sees a very different life from the audience who are watching the maids from their point of view.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Chapters/Chapter-6":{"title":"Chapter 6","content":"#lit #thepenelopiad #chapter \n\n\u003e [!quote] Prompt\n\u003e \n\u003e \"If you can't go through an obstacle, go around it.\" What do you think Penelope's mother might be implying here about Penelope's marriage to Odysseus?¬† What does this suggest about the world of the text?\n\nPenelope's mother might be implying that her marriage with Odysseus is an obstacle in and of itself. In the text, marriage is mandatory, not being a choice of the bride at all but rather something she has to live through for the rest of her life without her own approval. Penelope's mother implies that life will always keep throwing obstacles at Penelope, one after the other, but she has to smarter than what she faces and find a way to get around it, to live through what comes her way using her \"one redeeming quality\", her brain.\n\nThe quote shows that the world that the text is set in is far from favourable to the women in it, expecting them all to be happy with what is given to them while demanding docility. Penelope's mother is well versed in this world of hardships that cannot be expressed on her face, having to be dealt with behind a facade, so she advises her child to do the same: to use her smarts to outwit the challenge of marriage that comes her way, and to try and live happily despite the unideal scenario the world places her in against her own will.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Cold-Eyed-Teenaged-Killer":{"title":"Cold Eyed Teenaged Killer","content":"#lit #flashwrite \n\n\u003e [!question] \n\u003e \n\u003e How and why does Atwood compare the maids and their \"cold eyed teenaged killer\", Telemachus? 200 words\n\nAtwood makes the comparison between Telemachus and the maids, highlighting parallels, stating that they were \"infants when he was an infant, wailing just as he wailed, helpless as he was helpless, but ten times more helpless as well\". Quotes like this create a defined distinction between the maids and Telemachus, they are one in the same besides their status at birth, their power. \n\nThey are both human, they both have the same mortal flesh, they were both born in the same location at the same time, but one was given every power that they could wish for and the other \"found\". Atwood makes this active comparison to make the audience think about what the maids did to deserve their fate, a fate they could never have controlled no matter how much they wished to. \n\nThe maids implore the reader to \"Ask the Three Sisters, [...] Only they know how events might then have been altered\". This metaphor of the Three Fatal Sisters explores the idea that the ability to change one's fate is inherently linked with power, and those who are the bottom of the hierarchy can't change anything no matter how much they tried because nothing would change. \n\nThe maids and Telemachus are the same, but yet just due to their birth they are fated completely seperate lives.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Culture-Society-The-Penelopiad":{"title":"Culture \u0026 Society- The Penelopiad","content":"#lit #flashwrite #thepenelopiad \n\n\u003e In re-writing The Penelopiad, what assumptions and ideas about culture and society is Atwood seeking to question?\n\n[[Atwood]] aims to question the idea that there is one true tale for the events of a story. Never is there just one side, and all too often we take the side of power, because those who have power tell the tale. These ideas are taken as the truth, without question from anyone, but [[Atwood]] aims to question these tales taken as truth. [[Penelope]] is a side character, a footnote that is disregarded and praised, but simply a shadow because she has no meaning as a character by herself in the [[Odyssey]]. [[Atwood]] aims to give her character meaning again, build up someone who is more than just a shell of a faithful wife but has their own tale and their own story, as all real people do. [[Atwood]] is seeking to question the assumption that wives have to be so faithful, so ever loving, despite any actions of the husband, that a relationship is the wife's job and her's alone, an idea that is still deeply rooted in our society.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/In-Death-I-Know-Everything":{"title":"In Death I Know Everything","content":"#lit #thepenelopiad #flashwrite \n\n\u003e [!info]\n\u003e \n\u003e \"Now that I am dead I know everything.\" (Penelope)¬†To what extent do you consider this to be true in Margaret Atwood's The Penelopiad?\n\nPenelope says she knows everything in death, but throughout the novel, this is contradicted time and time again. Atwood writes about the theme of truth, ad how there is no single truth that can be confirmed but rather many stories from many different perspectives, a world of lies and deceit for anyone to make their own tale. There is no truth for Penelope to know, there simply isn't anything that can be confirmed or known. She says it herself: \"*Now that I'm dead I know everything.* This is what I wished would happen, but like so many of my wishes it failed to come true\". Atwood tells us that there is no truth, or even that the truth doesn't matter, only stories and perspectives and people and their lives.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/News-Of-Helen":{"title":"News Of Helen","content":"#flashwrite #lit #thepenelopiad #chapter \n\n\u003e [!info] Section A Question 1\n\u003e \n\u003e Explore the significance of the passage in the text\n\nThis passage takes place in Chapter 18, News of Helen, as Telemachus successfully arrives back from his voyage, one he went on without consulting or asking Penelope. The extract further establishes the struggle for power in the world of the text, with an \"ambush\" always set out to dethrone those in power. Further, the extract furthers our understanding of entitlement and power.\n\nTelemachus mentions how \"he didn't need anyone's permission to take a boat\", while the chapter previous told us of the maids dreaming about boats, to be able to escape. This entitlement, to be able to take whatever he wants furthers the audience's understanding of the motif of boats and water that permeates the novel, representing a sense of agency and being able to enact your own will, having the power to make a change. The extract makes it evident that Telemachus has no sense of consequences, where he was saved \"more by good luck than good planning\", showing how those with power born into high status can so often disregard the outcomes of their actions. \n\nThe passage is crucial to understanding Telemachus' views and inherent entitlement to power, and whenever the patriarchy is defied in any way, such as Penelope doing ‚Äúwhat was usually considered a man‚Äôs business‚Äù, he gets \"irritated by it\" expressing that he needs to \"\\[get] out from under the thumbs of the women\".  Atwood uses this idea to further push and reinforce the idea that children are a product of society's values and flaws, and there was no difference between the maids and Telemachus at birth, only the way that the world treated them. It also furthers our understanding of gender roles within the novel, where once again Penelope is stripped from her individual identity, being referred to as \"the women\", where her gender defines her even to her own son.\n\n","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Odyssey":{"title":"Odyssey","content":"#lit #book\n\nThe Odyssey is a tale by Homer about the epic adventures of the Greek king Odysseus. The story revolves around him leaving his home to embark on epic journeys of places afar, leaving his wife [[Penelope]] for greater ventures. Penelope is cool","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Oral-Presentation-Script":{"title":"Oral Presentation Script","content":"#lit #thepenelopiad #speech \n\nOdysseus and Telemachus *Snuff* the Maids: a very interesting word to use here. Snuff, as defined by the Oxford Dictionary, is the action of extinguishing a candle or a flame, almost like the maids were stamped out, like a dying meaningless flicker of life, and it sets us up well for the power dynamic that is to come.\n\nHere we can see an excerpt the chapter, analysed through the lens of Storytelling, Truth and Voice. Atwood explores the different interpretations of truth in this passage, an exchange between Penelope and Eurycleia, \"who could not disguise her gloating pleasure\" at the killing of the maids and the suitors. Penelope uses harsh language to describe the scene, words such as \"hacked\", \"genitals\" and \"agonising screams\" while describing Melanthius as a \"poor man\" that was thrown to the dogs. This builds a sympathetic view towards the suitors that otherwise were so hated throughout the novel. But why does Atwood want us to feel sympathetic towards these barbaric men? \n\nI believe this is where the underlying theme of a lack of voice and agency comes through, one which is heavily endorsed by this chapter, showing Penelope's lack of agency leaving her in the shambles. \"I bit my tongue. It's a wonder I had any tongue left, so frequently had I bitten it over the years.\" Atwood wants the audience to understand that within the novel, voice and agency is only given to those born with it: men of high status like Telemachus or Odysseus. Melanthius is at their whim, Penelope is at their command, and the maids die at their hands, whenever they choose. Odysseus is allowed to come in and impose himself upon everything in Penelope's life, killing all the suitors and brutally torturing the maids, because he has decided that \"they were notorious whores.\"\n\nEven so, Penelope blames herself, stating that \"I hadn't told her of my scheme\" and this lack of ability to express herself results in pain for others, showing that despite it being her choice not to talk, she is inherently limited by her lower status as a women within the novel. She so willingly hands her fortune over to the man in her life, not valuing her own agency or what she has built up, but rather only the validation of Odysseus, further shown by how dismissive she is of the maids death, because Odysseus can do whatever he likes! \"What could I do? Lamentation wouldn't bring my lovely girls back to life\". \"Dead is dead\". Yet she still values herself in relation to him, saying she'll have to mourn the girls in secret, \"or Odysseus will suspect me as well\". Evidently this chapter heavily endorses the lack of agency given to women and people of lower class at the time, Penelope left helpless.\n\nThe chapter also endorses and challenges the idea that those with power, those with voice, get to tell their story which then becomes the truth. The two different interpretations of the truth are very clear in this extract: Eurycleia believes in the \"impertinent\" girls, \"the ones who‚Äôd been rude. The ones who used to thumb their noses at me\". Eurycleia very well believes this to be true, not told otherwise by a voiceless Penelope. So when Odysseus sees this \"truth\", or rather this story that Penelope has so cleverly manufactured, he takes it at face value and has the agency to do whatever he likes with it. So not only does Penelope have the power to turn her own stories into a reality, but a lot of the time counterintuitively, as her lack of voice still means she is powerless in other aspects. Overall, this idea that the wealthy can write their own story is challenged, because though Penelope has status, she is still in the shadow of the men in her life, but this idea that gender and birthright can allow you to decide what is true is heavily endorsed by Atwood throughout the extract.\n\nUltimately, Atwood presents this passage as a commentary on voice and storytelling, and how status and power influences agency throughout the wider novel. Many characters are directly compared and contrasted, making the Penelopiad a profound demonstration of relationships and power dynamics in the real world, not only seeping into every corner of the novel but also reflecting our biases, privilege and viewpoints in the world around us.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Penelope":{"title":"Penelope","content":"#lit #thepenelopiad #character\n\nPenelope is the main character of The Penelopiad, and presented as the wife of Odysseus in Homer's story, The [[Odyssey]]. She is portrayed as the faithful wife, someone who will stay true despite anything their husband does, a beacon for all other women to aspire to be, but never her own character or person.\n","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Penelope-as-a-Narrator":{"title":"Penelope as a Narrator","content":"#thepenelopiad #lit #flashwrite \n\n\u003e [!info]\n\u003e \n\u003e In what ways does Atwood make Penelope an¬† unreliable narrator in this chapter? Why do you think she chooses to present Penelope's character in this way?¬† Use evidence from chapter 15, The Shroud, to support your point of view.\n\nThroughout Chapter 15, we get a glimpse as to why Penelope may not be the most reliable of narrators throughout the novel. In general, the recount of the events in the story are quite opinionated, clouded by a judgement from one side and experience, and as such there can never be one \"truth\" because all experiences will be under some lens or the other.\n\nWe keenly get this idea when Penelope speaks of the maids, who are supposedly her children whom for she cares a lot. Despite this, she still allows for horrid things to happen to them such as being raped by the suitors, occurrences that she describes as almost inevitable with no remorse or sympathy. Further, she describes them as her \"eyes and ears around the castle\", pawns that she uses for her own individual purposes to their detriment. Nonetheless, the story is portrayed from the perspective of Penelope, meaning that all of these flaws of her character are obfuscated behind the lens of her narration.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Relationships":{"title":"Relationships","content":"#flashwrite #lit #analysis \n\n\u003e [!info]\n\u003e \n\u003e Comment on the theme of relationships as reflected in chapter xii, Waiting\n\nRelationships in Chapter 12, Waiting, are viewed almost as transactional with defined purposes in a very cold and non-compassionate manner. Atwood uses the chapter to express the idea that women are so often left behind and discarded in relationships, with Odysseus just leaving with not much more than a word, causing everything to blur into one monotonous cycle. All she did was wait for news in of Odysseus, further pushing the idea that her only worth is in relation to him.\n\nThe chapter also explores the idea that men have no consequences for their actions, and that anything they do will be glorified and portrayed as a wonderful tale, whereas the women's actions will never be credited to them, simply given to the man who did nothing. Atwood describes a Penelope who dreams of a day, \"Odysseus returning and \\[her] - with womanly modesty - revealing to him how well \\[she] had done at what was usually considered a man's business. On his behalf, of course\". It all had to be on his behalf, because within the text women have no voice at all or any individuality when removed for their male counterpart. Unlike Penelope, Odysseus could do anything, flirt with anyone, even Helen who \"had bathed him and anointed him with her very own hands\" and there were meant to be no consequences, because he can do whatever he pleases.\n","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/The-Birth-of-Telemachus-Close-Analysis":{"title":"The Birth of Telemachus Close Analysis","content":"#lit #flashwrite #analysis\n\n\u003e [!info] \n\u003e \n\u003e Comment on how the passage illustrates the theme of power and powerlessness\n\nThroughout the passage, Atwood uses the motif of water and ocean to represent the power dynamic of the world she has built. The ones who hold the power, Telemachus, Odysseus, the Gods, all use water as a medium to enact their will. Telemachus' birth was not just a birth, it was a \"nine-month voyage\" to be celebrated, as was the great tale of Odysseus who travelled the many seas with great feats. At the same time, Atwood uses the metaphor of water to show how helpless those without power can be. The same power of the ocean just spat the maid out, \"beached at the same time he was\". They were simply spat out, discarded and sub-human, with words such as spawned and appeared describing their inherent inhumanity.\n\nAtwood also uses a combination of anaphora and juxtaposition to directly compare Telemachus and the maids. \"**Infants** when he was an **infant**, **wailing** just as he **wailed**,\" a repetition of the same words to emphasise the point that they apply to directly both the maids and Telemachus. At the same time, the enjambment of lines such as \"wailing just\" and \"as he wailed\" makes the reading more uncomfortable, expressing the idea that though they are identical in almost every way, the wail of a prince is still not equal to the wail of a servant girl. \n\nAtwood uses this mechanism to comment on an important aspect of our modern society: all children are born the same and equal, but it is society's ideals that create imbalance. The environment around Telemachus, not Telemachus himself, is what caused his wail to be any different from the others, and when he grows up being told he is entitled to a kingdom and the lives of those within it, he thus believes so, evident by Penelope's description in Chapter 15, that ‚Äú\\[Telemachus] was starting to look at \\[her] in an odd way, holding \\[her] responsible for the fact that his inheritance was being literally gobbled up.‚Äù \n\nThe excessive use of pronouns in this passage also creates the effect of dehumanising everyone involved. The maids, as always are referred to as a collective, but Telemachus is also never referred to by name, rather as a mysterious \"he\". This lack of definitive character portrays Telemachus as someone who is much more sinister than otherwise, an amalgamation and representation of the power imbalance in their world, causing him to be the antagonist in this poem. The repetitive use of short quick phrases and many verbs also gives the reader a sense that the maids are *objects* built for doing things with, further commenting on the humanity of this conglomeration of broken, unwanted children.","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/The-Obstacle-To-Go-Through":{"title":"The Obstacle To Go Through","content":"#lit #thepenelopiad #flashwrite \n\n\u003e [!quote]\n\u003e \n\u003e \"It's hope, and hope only, that keeps us afloat.\" (Chapter 7 The Chorus Line: If I Was a Princess, A Popular Tune)\n\n**Water**, crashing against the hull of our fate as we hurl further and further into the ocean's **waves**. Eyes stare at us from the distance of the horizon and we pray to them to keep a sympathetic watch rather than an apathetic one if we do, as we all surely will eventually, go under. \n\n**Water**, we float in a boat on the sea, unsure of whether we are being pulled down or lifted up, whether this is the start of a new voyage with new opportunities, or the end of the only dreadful journey we simultaneously want to leave while being too scared to run from.\n\n**Water**, once it gave us life, drinking from the pool of life with the young joys of an innocent girl, rejuvenated by the same hands that would strange our throats and take that very air away from us just some years later. It was a temporary loan. We failed to realise that and the debt collector struck the door at dawn; we had nothing to give but our skin and our air, so the investment laid in futile, and we gave what we could.\n\n**Hope** we kept even when the air left our bodies, but what substance does hope have? What food does hope give you when your stomach churns? Hope we kept, until that too was collected, drop after drop by the water we had acquired it from in the first place. It was a loan. We failed to realise that.\n\nHere lay what is left of our hope, what was meant to let us breath through the water that wrapped around our throats:\n\n*There was a girl once. Her name doesn't matter all too much, but she was a girl for sure. How do I know you ask? Why, her smile of course! It was the way she walked, the way she talked, the way she greeted everyone with a shimmer in her eyes that made her warmth present. The faint colour along her cheeks, and the wonderful approving speech, oh how she loved whatever her eyes looked on, and her looks went everywhere! Oh how I wish I had the hope she did.*\n\n*This nameless girl, the girl of hopes and dreams, she frolicked around the paddocks and fields, until one day she met a man. Now they frolicked together instead, a pair of inseparable nature, the hope gleaming from one to the other, until one day, he got down on one knee and asked the question every girl wants to here: \"Will you be mine?\"*\n\n*She said yes, but like us all, she didn't realise. It was a loan. He gave her hope, she gave him herself. \"Will you be mine?\" Surely she thought \"Oh, why yes of course!\" rather than whats she should have thought: \"Well of course I'll be yours! Until death do us part, I will be your property, with modesty, I'll do whatever you please, I'm properly **yours**\"*\n\n*So she was his, the same as all brides in any marriage, and when it all came to an end, he came to collect her hope as well*","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/Truth-and-Storytelling":{"title":"Truth and Storytelling","content":"#flashwrite #thepenelopiad #lit \n\n\u003e [!danger] Truth vs Storytelling\n\u003e \n\u003e What do you understand about truth and storytelling in the novel?\n\nThese chapters tell us some key information about how the world of the Penelopiad views the truth and myth. In the Anthropology Lecture, the maids deeply interpret their own lives as legend, a chapter that may initially be viewed as reaching for meaning, but as the maids address, is as valid as any other myth in Ancient Greek mythology. Men place such deep value on their lives, over interpreting the mundane and making that their own truth. Each Chorus Line chapter is a different rendition of this truth, told in a great variety of mediums from many different stories and perspectives, highlighting a key idea that Atwood tries to express: the truth is what we make it. In this chapter, the Maids are taking back the voice and agency that they never had in their lives, the ability to tell their own story and hence express their own truth. \n","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Literature/The-Penelopiad/What-is-The-Penelopiad-About":{"title":"What is The Penelopiad About?","content":"#lit #essay #thepenelopiad \n\n\u003e [!info]\n\u003e \n\u003e What is The Penelopiad about?\n\nMyth is always ambiguous. In countless retellings and recounts, what is considered to be true or the relevance of a truth even mattering is warped and moulded, recontextualised to be timeless and universal. Such is demonstrated by Margaret Atwood's 2005 novel \u003cu\u003eThe Penelopiad\u003c/u\u003e, which retells and appropriated Homer's epic, \u003cu\u003eThe Odyssey\u003c/u\u003e from the perspective of Penelope, an otherwise overshadowed character. Atwood reshapes the narrative to reflect contemporary contexts and values, and tells a story that is pertinent to our society. \u003cu\u003eThe Penelopiad\u003c/u\u003e is a book about truth and power, and how those who have the voice and power are the ones that decide what is true, holding the lives of other in the palm of their hand.\n\nOne of the main themes of the book is truth: who the story is told by. Penelope states that \"many people have believed that \\[Odysseus's] version of events was the true one\", so to set the record straight \"\\[she'll] spin a thread of \\[her] own\". Atwood brings up the idea, time and time again, that people with power (in most cases men) are the ones who have the ability to dictate what is true and what is not. Odysseus made up any fictitious remark about himself, deeply interpreting his own life, yet his account was taken as meaningful due to his reputation and position. This theme permeates the novel from the beginning to end, Penelope never getting a chance to tell her story while she was alive, and the maids still voiceless in death, all of which are structured in a power hierarchy that ruthlessly rips agency away from those born less notable. \n\nOn the counter-side to this, the novel is filled with deceit and lies. The same quote from above sees Penelope mention how \"\\[Odysseus] was always so plausible ... even I believed him from time to time\". Atwood wonders how Odysseus, actively known for his trickery and lies, still holds academic merit. She is haunted by these lies, where anyone with power can spin up their own tale and retell other people's truth, enacting it into reality. From the moment they meet, Penelope comments that ‚Äúthe way Odysseus told the story made me suspect there was more to it‚Äù, and this follows for the rest of her marriage, where she states ‚Äúthe two of us were...proficient and shameless liars of long standing. It was a wonder either of us believed a word the other said. But we did. Or so we told each other‚Äù.\n\nOverall, Atwood tells a story of how power is truth, more these days than ever. By recontextualising a novel told from the male perspective about glorified events embedded in myth, Atwood is able to use \u003cu\u003eThe Penelopiad\u003c/u\u003e as a means of touching on important societal issues such as sexism, wealth inequality and power imbalance, all through a unique but subtle novel that leaves the reader wondering one question: what was actually true?\n","lastmodified":"2023-09-07T08:27:08.668883316Z","tags":[]},"/notes/School-Subjects/Maths-Methods/Methods-Mega-Quiz":{"title":"Methods Mega Quiz","content":"# Tech Free\n\n## Calculus\n\n### Question 1 (2016 MAV Trial Exam 1, Q1b)\n\na) Factorise $x^3-3 x^2+3 x-1$.\n\nb) Hence, anti-differentiate $\\frac{1}{(1-x)\\left(x^3-3 x^2+3 x-1\\right)}$.\n\n### Question 2 (2016 MAV Trial Exam 5, Q3)\n\n\nLet $f(x)=xe^{2x}$.\n\na) Find $f^{\\prime}(x)$.\n\nb) **Hence**, find the average value of $f$ over the interval $[0,\\frac{1}{2}]$.\n\n## Functions \u0026 Graphs\n\n### Question 1 (2016 MAV Trial Exam 1, Q3)\n\nConsider the function $g:[0,2] \\rightarrow R, g(x)=2 x^5-10 x^4+20 x^3-20 x^2+10 x+2$.\n\na) Find $A, B$ and $C$ given $g(x)=A(x+B)^5+C$, where $A, B$ and $C$ are real constants.\n\nb) Sketch the graph of $g$ on the set of axes below. Label the endpoints and any stationary points with their coordinates.\n\n## Algebra\n\n### Question 1 (2016 MAV Trial Exam 1, Q4)\n\na) Show that $x=\\log _e(3)$ is a solution of the equation $\\frac{9}{e^{2 x}}-\\frac{6}{e^x}+2 e^x=5$.\n\nb) Hence, or otherwise, solve the equation $\\frac{9}{e^{2 x}}-\\frac{6}{e^x}+2 e^x=5$ for $x$, given that there are only two real solutions.\n\n### Question 2 (2016 MAV Trial Exam 1, Q6)\n\nFind the values of $A$ and $B$, where $A$ and $B$ are real constants, if the graph of $y=A \\log _e(x-B)$ passes through the points $(2,10)$ and $(8,20)$.\n\n# Tech Active\n\n## Probability\n\n### Question 1\n\nThe time (in minutes) it takes Jerry to cycle to school is given by the random variable $T$ with the pdf:\n\n$$\nf(t)=\n\\begin{cases} \n  \\frac{1}{24}(t-6) \u0026 6\\leq t\\leq10 \\\\\n  \\frac{1}{48}(K-t) \u0026 10\\leq t\\leq K \\\\\n\\end{cases}\n$$\n\na) Find $K$. Hence state the minimum and maximum times it could take Jerry to cycle to school.\n\nb) Sketch the pdf on the set of axes below.\n\nc) Find the median time it takes Jerry to cycle to school.\n\nd) Find the expected time it takes Jerry to cycle to school.\n\ne) Find, correct to three decimal places, the probability that Jerry takes longer than 10 minutes at least twice in a 5-day school week.\n","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Electricity/Applications-of-Electric-Circuits":{"title":"Applications of Electric Circuits","content":"#physics #electricity \n\n\n\u003e [!question] How can we model the nehaviour of real electrical components, such as light bulbs?\n\u003e Light bubls produce light by passing a current through the filament, causing it to heat up and glow. Resistance is dependant on temperature, so when the filament heats up, its resistance increases.\n\nThis produces the following I-V graph of an incandescent bulb.\n\n```functionplot\n---\ntitle: Current \u0026 Potential Difference in Light Bulb\nxLabel: V (V)\nyLabel: I (A)\nbounds: [0,10,0,4]\ndisableZoom: false\ngrid: true\n---\nf(x)=sqrt(x)\n```\n\n## [[Internal Resistance]]\nHow to determine voltage provided to the load resistor, $R_{L}$:\n\n$$\nV_{L} = \\frac{R_{L}}{R_{i}+R_{L}}\\times V_{in}\n$$\n\n## Diodes\n![[Diode Diagram.png]]\nA diode only allows the current to go through in one direction, which is the direction of the arrow. In the other direction, it blocks that.\n\nMost diodes \"switch on\" at about 0.7V. Refer to the graph below.\n![[Knee Voltage.png]]\n","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Electricity/Fundamentals-of-Electricity":{"title":"Fundamentals of Electricity","content":"#physics #electricity\n\n- Particles with \"charge\"\n\t- Subatomic $e^{-}, p^{+}$ \n- Coulomb - $6.24 \\times 10^{18}$ $e^{-}$ or $p^{+}$ \n\t- $\\therefore$ charge on $1e^{-}$ or $p^{+}$\n\t- $\\frac{1}{6.24 \\times 10^{18}} = 1.603 \\times 10^{-19}C$\n\n$m = \\textrm{mass in kg}$\n$q = \\textrm{charge in Coulomb} \\space (C)$\n$I = \\textrm{current in Amps} \\space \\frac{C}{S}$ or Q/T\ncoulombs per second\n\nVoltage $=\\frac{J}{C}$ (joules per coulomb)\nVoltage is Potential Difference, essentially the difference between two points\n$P = IV$, Power = Current $\\times$ Voltage\n$V = IR$, Voltage = Current $\\times$ Resistance\n$R=\\frac{V}{I}$ Resistance is in the unit $\\ohm$ (ohm)\n\n\\*$\\ohm = \\frac{m^{2}\\textrm{kg}}{s^{3}A^{2}}$ in S.I units, s = seconds, A = area\n\nResistance limits and controls $I$ in a circuit\n- The electrical potential energy of the charge carriers is turned into thermal energy \n- A resister is a load, so any load can be modelled by a resistor\n\nBy conventional direction: red wire is first, by electron direction, black is first","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Electricity/Internal-Resistance":{"title":"Internal Resistance","content":"#physics #electricity \n\nInternal Resistance refers to the resistance of a component itself. For example, a battery at 20¬∫ may have an internal resistance of $20 \\ohm$ but at 30¬∫ may have an internal resistance of $30\\ohm$. This is modelled by both a battery and resistor in the diagram.\n\nThis links into the [[Applications of Electric Circuits]], since the resistance needs to be modelled well.","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Electricity/Ohms-Law":{"title":"Ohm's Law","content":"#physics #electricity \n\n\u003e [!note] Ohm's Law\n\u003e $V=IR$\n\u003e a higher P.D. $\\rightarrow$ higher current\n\u003e $\\therefore R=\\frac{V}{I}$\n\nIn a series circuit, current is constant.\n\n## Calculating Total Resistance\nSeries: $R_{t}=R_{1}+R_{2}+\\cdots+R_{n}$\nIn parallel: $\\frac{1}{R_{t}} = \\frac{1}{R_{1}}+\\frac{1}{R_{2}}\\cdots\\frac{1}{R_{n}}$ \n\n","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Kinematics/Forces":{"title":"Forces","content":"#physics #kinematics\n\n\u003e [!info]\n\u003e \n\u003e \u003cu\u003eForces\u003c/u\u003e - make a change in movement\n\n$F_{g}=$ gravitational force\n$F_{r}=$ frictional force\nFrictional forces can either slow something down or speed it up\n$T=$ tensile force\nFor example, tug of war, the force in the rope when it's being pulled, or perhaps a hanging mass\n$F_{N}=$ normal contact force (perpendicular to the surface), same magnitude as $F_{g}$ if no motion\n\n","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Kinematics/Inclined-Planes":{"title":"Inclined Planes","content":"![[Inclined Planes.png]]\n$F_{N}=mg\\cos(\\theta)$\n$F_{net}=mg\\sin(\\theta)$\n","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":["physics","kinematics"]},"/notes/School-Subjects/Physics/Kinematics/Momentum":{"title":"Momentum","content":"Describes a characteristic of the motion of an object, or the \"**mass in motion**\"\n\n$p$ - momentum (kg m s^-1)\n$m$ - mass (kg)\n$v$ - velocity (m s^-1)\n$p$ = $mv$\n\n## Change in Momentum\n\nTo change the momentum of an object ($\\Delta p$), a net force needs to be applied over time.\nA change in momentum would in most cases require a change in velocity, so $\\Delta p = m \\Delta v$ and $\\therefore \\Delta p = m(v-u)$.\nThis means that if $\\sum\\limits p = 0$ then $p_{i}=p_{f}$ meaning that if the sum of all momentum in a system is zero then the initial momentum will equal the final momentum.\n\nBecause a net force is required, $\\Delta p = F_{net} \\Delta t$ or $\\Delta p = Ft$, which is a change in momentum over time. Changes in momentum don't happen instantaneously, there is always some period (no matter how small) over which this occurs.\n\n## Impulse\n\nAn impulse is the net force experienced by an object over time. It results in a change in momentum.\n$$\nF_{net}=\\frac{m \\Delta v}{\\Delta t}\n$$\n### Derivation\n\nFrom Newton's Second Law, we know that $F_{net}=ma$. We also know that $a=\\frac{\\Delta v}{\\Delta t}=\\frac{v-u}{\\Delta t}$. Subbing this into Newton's Second Law, we get $F_{net}=\\frac{m(v-u)}{\\Delta t}=\\frac{m \\Delta v}{\\Delta t}=\\frac{\\Delta p}{\\Delta t}$. ","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":["physics","kinematics"]},"/notes/School-Subjects/Physics/Kinematics/Newtons-First-Law":{"title":"Newton's First Law","content":"#physics #kinematics \n\nInertia is the property of an object that represents the resistance to a change in motion of that object. Every object, whether initially at rest or moving with a certain velocity, possesses inertia.\n\nThe greater the mass, the greater the inertia and vice versa\n\n## Conditions:\n### First Half:\n1. An object at rest where $\\sum F = 0$ stays at rest\n2. An object not at rest where $\\sum F = 0$ continues in motion\n### Second Half\n1. An object will change its motion if $\\sum\\limits F \\neq 0$\nmotion is a change in position: i.e. velocity","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Kinematics/Newtons-Second-Law":{"title":"Newton's Second Law","content":"#physics #kinematics \n\n$\\sum\\limits (F)=ma$\n$F_{\\textrm{on B by A}}=m_{B}\\times a_{B}$\n\nThe force on B is impacted by the mass of B and the acceleration of B","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Kinematics/Newtons-Third-Law":{"title":"Newton's Third Law","content":"#physics #kinematics \n\n$F_{\\textrm{on B by A}}=-F_{\\textrm{on A by B}}$\n$\\textrm{Action Force} = -\\textrm{Reaction Force}$\n\nFor example:\n\n| Action force   | Reaction force          |\n| -------------- | ----------------------- |\n| Push on planet | Planet pushes on skater |","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Logbook/13-2-2023":{"title":"13-2-2023","content":"#physics #prac\n\n![[Refraction with Pyrex.pdf]]\n\nAlso put data into an excel worksheet that you can find [[I_R_Snells law prac_20231.xlsx|here]], along with some questions from a word document [[CGS Refraction of light prac 2023.docx|here]]","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Logbook/20-6-2023":{"title":"20-6-2023","content":"#physics #prac \n\n1. What does your graph indicate about the relationship between potential difference and current for the wire? State the relationship in mathematical form.\n    The graph for the light bulb indicates that as current increases at a constant rate, potential difference increases at an increasing rate, following a parabolic relationship of $V=15120\\times I + 88.638\\times I - 0.0727$.\n    $\\therefore$ The light bulb is non-ohmic.\n    \n    Meanwhile, the fixed resistor indicates a direct proportionality, where an increase in current at a constant rate results in the potential difference increasing at a constant rate, following the linear relationship of $V=10.63\\times I-0.042$.\n    $\\therefore$ The fixed resistor is ohmic.\n\n2. Is the resistance constant for each component?\n    No, the resistance is not constant for the light bulb, but was constant for the fixed resistor. This is demonstrated by calculating the resistance for each date points using the rule $R=\\frac{V}{I}$.\n    **Light Bulb:**\n\t- For $V=1.7$ and $I=0.009$, $R=118.89 \\ohm$ \n\t- For $V=3.4$ and $I=0.0127$, $R=267.72 \\ohm$\n\t- Evidently these two values are not very similar, so not a constant resistance.\n    **Fixed Resistor:**\n\t- For $V=2$ and $I=0.2$, $R=10 \\ohm$ \n\t- For $V=3.47$ and $I=0.33$, $R=10.52 \\ohm$\n\t- Evidently these two values are relatively close, so there is a constant resistance.\n\n3. The unit of resistance is OHM. Sow what 1 ohm is equal to in terms of volts and ampere.\n    $R=\\frac{V}{I} \\therefore$  If V = 1 and A = 1, R will = 1.\n\n4. An ohmic component is one for which the resistance is constant, at any voltage. Are these components ohmic? Justify your answer.\n    The fixed resistor is ohmic, as demonstrated above and the light bulb is non-ohmic.\n\n5. In the column headed 'power' in your results table, calculate the power for the light globe. Plot a graph of power against current for the light globe\n    - What relationship is suggested by this graph. \n       As current increases at a constant rate, power increases at an increasing rate.\n     - Use the formula for power (P=VI) and Ohm's Law (V=IR) to derive an equation for power as a function of current as suggested by your graph\n       $y=10.496\\times x^{2}+0.0717\\times x - 0.0136$.\n \n6. What sources of error are there in this experiment? Think about the assumptions that have been made - are they valid assumptions? (For example, it is assumed that the ammeter and wires have no resistance.)","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Logbook/30-11-2022":{"title":"30-11-2022","content":"#physics #waves #prac\n\nDid a prac with slinkies to explore longitudinal and transverse waves\n![[Waves Worksheet.pdf]]","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Logbook/Logbook":{"title":"Logbook","content":"\n#physics\n# [[30-11-2022]]\n30th November 2022: Waves Practical with Slinkies\n\n# [[13-2-2023]]\n13th February 2023: Refraction of Light with Snell's Law \n\n# [[20-6-2023]]\n20th June 2023: Ohm's Law Prac with Electrical Components","lastmodified":"2023-09-07T08:27:08.67288335Z","tags":[]},"/notes/School-Subjects/Physics/Physics":{"title":"Physics","content":"#physics #subject\n\nYou can also view my [[Logbook]] which is a log of all practicals\n## Unit 1\n- Week 1: Waves\n\t- [[Wave Definitions]] for the parts of a wave\n\t- [[WCCC 1]]: a weekly quiz handout to check our stage of learning\n- Week 3: Refraction\n\t- Snell's Law, etc\n\t- [[WCCC 3]]: Weekly Quiz, this time of refraction!\n- Week 4: Thermodynamics\n\t- [[WCCC 4]] on heat and temperature!\n\t- [[Laws of Thermodynamics]]\n- Week 5: Thermal Radiation\n\t- [[Wien's Law]]","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/Physics/Radiation/Fundamental-Forces":{"title":"Fundamental Forces","content":"#physics #radiation \n\n![[Fundamental Forces.png]]\n\n## Strong Force #card \nThe strongest fundamental force is the force that holds the nucleus together, binding quarks and holding nucleons together. This has a strength of 1 and the exchange particle is a gluon.\nIt has a range of $10^{-15}$ (a medium sized nucleus) and ‚à¥ larger sized nuclei decay.\n^1681003399139\n\n- The strong nuclear force is so short range that its attraction can only be between *adjacent* nucleons\n- Think of the force like a spring linking nucleons, the harder you try to pull them, the more the spring reacts to hold them together until they are separated by too much¬† and the spring snaps. The particles go out of reach of the attractive nature of the strong nuclear force and repel away from each other by the electromagnetic force.\n\n![[Attractive and replusive force in atomic nuclei.png]]\n\nStable isotopes usually require the strong force to be slightly stronger than the electrostatic force within the nucleus. This means the nucleus is more attracted to itself than it is repelled by itself.\n\n## Electro-magnetic Force #card \nThe force that attracts opposite charges and repels like charges. It has a strength of $\\frac{1}{137}$ and a range of infinity, and it has a greater effect than the strong force beyond a certain range, causing decayed nuclei to repel each other (alpha decay).\nExchange particle is a proton.\n^1681003399147\n\n## Weak Force #card \nThe force that allows quarks to rearrange themselves, so neutrino (short lived fundamental particle) interaction induces beta decay. The weak force changes the spin of quarks, but essentially it causes beta decay. Exchange particles are W and Z bosons.\nIt has a strength of $10^{-6}$ and a range of $10^{-18}$ (0.1% of the diameter of a proton)\n^1681003399149\n\n## Gravity #card \nAny objects of mass are attracted to each other. This is gravity, and is the weakest force, with a strength of $6 \\times 10^{-39}$ and range of $\\infty$ \n^1681003399152\n\n","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/Physics/Radiation/Nuclear-Half-Life":{"title":"Nuclear Half-Life","content":"## Half-life #card \nThe time it takes for half of a radioactive sample to decay (generally in seconds or years).\nIt can also be defined as the time after which there is a 50% chance that an individual nucleus has decayed.\n^1681003403907\n\nIf the mass is 100g, after one half life it would be 50g, After another it would be 25g, and 12.5g, 6.25g, etc. This is a logarithmic relationship.\n\nYou cannot speed up or slow down half-lives.\n\n### Half Life Formula #card\n$$\nN = N_{0}(\\frac{1}{2})^n\n$$\n$N$ = remaining nuclei\n$N_{0}$ = initial no. nuclei\n$n$ = no. half lives since $N_{0}$ calculated\n^1681003403916\n\n## Activity #card \nThe number of decays per second of a sample, also called the decay rate. \nAs more nuclei have decayed (time has passed), the activity of the substance will decrease (the rate decreases).\n^1681003403925\n\n$$\nA = A_{0}(\\frac{1}{2})^n\n$$\n$A$ = the activity at a given time (Bq)\n$A_{0}$ = the initial activity (Bq)\n$n$ = no. half-lives since the initial measurement (no units)\n\nRate: the number of nuclei decaying per unit of time\n‚à¥ 1 Bq = 1 decay/disintegration per second (becquerel)\n","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/Physics/Radiation/Radiation":{"title":"Radiation","content":"#physics #radiation\n\n## Definitions\n### Radiation #card\nEnergetic waves and particles ($\\alpha = ^{4}_{2}He$, $\\beta = e^{-}/e^{+}$)\n^1681003407256\n\n### Radioactivity\nAny form of particles emitting radiation\n\n- Natural: 88% of annual human dosage\n\t- Terrestrial radioactive sources within the Earth\n\t- Cosmic rays from outer space\n\t\t- Shielded by atmosphere -\u003e higher doses at higher altitudes\n- Artificial: 12% of annual human dosage\n\t- Mainly Medical sources (eg X-ray)\n\t- Nuclear power industry\n\n## Timeline of Discovery\n- 1895 - German scientist, Wilhelm Rontgen, discovers that X-rays are being emitted from cathode ray tubes\n- 1896 - Frenchman, Henri Becquerel, investigates X-rays in a series of tests on potassium uranyl sulfate with photographic plates. He discovers that the uranium salt produces radiation (these are called Becquerel rays).\n- Late 1890's - Marie Curie first uses the term 'Radioactivity' to describe the spontaneous and uncontrollable decay of an atomic nucleus, resulting in an emission of particles and rays (an atom that is emitting particles).\n\n## X-rays\n- X-rays are short wavelength electromagnetic waves formed from the sudden deceleration of an electric charge. (e.g. when electrons hit the end of a cathode ray rube)\n- Wavelengths range from 0.001nm to 10nm.\n- X-rays can penetrate flesh but not bone, and are thus used extensively for medical diagnosis.\n\n## Types of Radiation\n### Alpha (Œ±) Decay\n- Alpha decay occurs when an unstable parent nuclear ejects an alpha particle.\n- Œ±- particles are positively charged and consist of 2 protons and 2 neutrons, and is equivalent to a helium nucleus.\n- The daughter nucleus becomes more stable. (the daughter is what is left behind)\n### Beta (Œ≤) Decay\n- Œ≤-particles are ejected from a parent nucleus when one of the neutrons spontaneously turns into a proton and an electron.\n- The electron is emitted from the atom as a Œ≤-particle.\n$$\np^{+} \\rightarrow n^{0}+e^{+}\\space(\\beta^{+})\n$$\n$$\nn^{0} \\rightarrow p^{+}+e^{-}\\space(\\beta^{-})\n$$\n\n","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/Physics/Thermodynamics/Laws-of-Thermodynamics":{"title":"Laws of Thermodynamics","content":"#physics #thermodynamics\n\n\u003e [!info]\n\u003e \n\u003e What is heat? :: Heat is the energy transferred between objects because of a temperature difference.  ^1677189354317\n\u003e \n\u003e Objects are in thermal contact if heat can flow between them.\n\u003e \n\u003e When the transfer of heat between objects in thermal contact ceases, they are in thermal equilibrium.\n\nWhat is temperature the measure of? :: Temperature is the measure of the average kinetic energy of the particles in substance. ^1677189354322\n\n## Zeroth Law #card\nThe zeroth law states that if two¬†thermodynamic systems¬†are in¬†thermal equilibrium¬†with each other, and also separately in thermal equilibrium with a third system, then the three systems are in thermal equilibrium with each other.\n^1677189354323\n\n## First Law #card\n**Energy cannot be created or destroyed.** In other words, the total amount of energy in a system is conserved (constant), however, energy can be transformed from one from to another.\n^1677189354324\n\n$U$ stands for the internal energy of a substance, which is the sum of **all** the energy in the substance, including:\n- Potential energy in the bonds\n- Rotational energy\n- Vibrational energy\n- Translational (kinetic) energy of the particles in the substance.\n\n$Q$ stands for the thermal energy of a substance in Joules.\n\n$W$ stands for the work done, and work is done when a force acts on an object and moves the object through a distance.\n- Work by the system: \"System pushes back on plunger and it goes up\" (positive work) \n- Work on the system: \"I push down on plunger to compress system\" (negative work)\n\n**Negative work increases the energy of a system**\nThis is because when work is done on a system, the system isn't really doing anything and it gets work done for it, ‚à¥ it is negative\n\n$$ŒîU=Q - W$$\n\nWork **BY** the system is ==positive== work.\n^1677225721447\nWork **ON** the system is  ==negative== work.\n^1677225721469\n\n### Specific Heat Capacity #card\nThe way the temperature increases when an object gains thermal energy depends on the material from which the object is made.\n- The amount of thermal energy (heat energy) required to increase the temperature of an object by 1¬∞C is termed the thermal capacity of the object (with the unit being $J ¬∞C^{-1}$, Joules per degree Celsius/Kelvin)\n^1677189797344\n\nTo make comparisons easier we can compare the amount of thermal energy required to increase 1 kg of the material by $1¬∞C$. This is termed the **specific heat capacity** of the material.\n\nThe symbol for specific heat capacity $c$ with the unit $J kg^{-1}¬∞C^{-1}$ or $J kg^{-1}¬∞K^{-1}$. \nThis can also be written as $$c=\\frac{J}{Kg \\times K}$$\nThis can be rearranged to $c \\times kg \\times K = J$ and if we replace $J$ with $ŒîQ$, $kg$ with $m$ for mass and K with $ŒîT$, we get $$ŒîQ=mcŒîT$$\n\n#### Example #card\nHow much heat energy is required to increase the temperate of 5kg of water by 80¬∞C?\n$ŒîQ = mcŒîT$\n      $= 5 \\times 4200 \\times 80$\n      $= 1680000$\n      $= 1.68 \\times 10^6 J$\n^1677191437178\n\n### Latent Heat\nLatent (meaning \"Hidden\") Heat refers to the heat curve of changes in phases. This means that during the phase change, the energy that would normally manifest itself in a change in temperate ($ŒîT$) is instead put towards the process of rearranging the atoms to change the phase of the material.\n#### Specific Latent Heat\nThe amount of energy required to change 1 kg of a substance from one state to another is called the Specific latent Heat. The unit is $J \\space kg^{-1}$ \n- $L_{vap} =$ specific latent heat of vaporisation\n- $L_{fus} =$ specific latent heat of fusion\n\nTo calculate the amount of energy required to change the state of mass m\n$$\nQ = mL\n$$\n\n\n","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/Physics/Thermodynamics/Wiens-Law":{"title":"Wien's Law","content":"#physics #thermodynamics \n\n\u003e [!note]\n\u003e \n\u003e Relationship between temperature and emission of radiation.\n\u003e ‚à¥ Any object that is above 0 K will be emitting some radiation\n\n- Cool objects, such as the human body, emit radiation at long wavelengths with lower energy, such as infrared radiation. Infrared radiation is not visible by the naked human eye under normal circumstances.\n- At higher temperatures, objects emit radiation with a higher frequency and you can see it glow red. An example is a bar heater that glows red hot.\n- At even higher temperatures, say $2000 \\space K$, objects such as the filament of an incandescent light glow yellow or white.\n- Very hot objects, at temperatures of $10^{6}\\space K$ or more, emit the majority of their radiation within the gamma and X-ray regions of the electromagnetic spectrum.\n\nWien discovered that the peak wavelength at which an object will emit the maximum intensity of radiation is dependant on its surface temperature.\n\n\u003e [!info] Wien's Law\n\u003e \n\u003e $\\lambda_{max} \\times T = 2.898 \\times 10^{-3}\\space m \\space K$\n\u003e where $\\lambda_{max}$ is the peak wavelength of the emitted radiation in metres ($m$) and $T$ is the surface temperature of the object in kelvin ($K$).","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/Physics/WCCC/WCCC-1":{"title":"WCCC 1","content":"\n#physics #wccc #waves \n1. Describe the motion of particles within a medium as a mechanical wave passes through the medium:\n   - The particles oscillate around a mean position, allowing for energy to be transferred through them without a net transfer of matter with zero displacement\n2. Which of the following statements are true and which are false? For the false statements, rewrite them so they become true.\n\t- **A**: ~~Longitudinal~~ Transverse waves occur when particles of the medium vibrate in the opposite direction to the direction of the wave: False, needs to be transverse\n\t- **B**: Transverse waves are created when the direction of vibration of the particles is at right angles to the direction of the wave: True\n\t- **C**: A longitudinal wave is able to travel through air: True\n\t- **D**: The vibrating string of a guitar is an example of a transverse wave: True\n3. The diagram below represents a slinky spring held at point A by a student.\n   \\[Insert Imaginary Diagram]\n   Draw an image of the pulse a short time after that shown in the diagram and determine the motion of point B. Is point B moving upwards, downwards or is it stationary?\n   - Point B is moving downwards in the image shown\n4. Which of the following are examples of mechanical waves?\n   light, \u003cmark style=\"background: #FFF3A3A6;\"\u003esound\u003c/mark\u003e, \u003cmark style=\"background: #FFF3A3A6;\"\u003eripples on a pond\u003c/mark\u003e, \u003cmark style=\"background: #FFF3A3A6;\"\u003evibrations in a rope\u003c/mark\u003e\n5. The diagram below shows dots representing the average displacement of air particles at one moment in time as a sound wave travels to the right.\n   \\[Insert Imaginary Diagram]\n   Describe how particles A and B have moved from their equally-spaced undisturbed positions to form the compression.\n   - They oscillate around their mean position causing them to produce compression in certain areas, which causes them to move back in the other direction.\n6. A sound wave is emitted from a speaker and heard by Lee who is 50m from the speaker. He made several statements once he heard the sound. Which one or more of the following statements made by Lee would be correct? Explain your answers.\n\t- **A**: Hearing a sound wave tells me that air particles have travelled from the speaker to me.\n\t- **\u003cmark style=\"background: #FFF3A3A6;\"\u003eB\u003c/mark\u003e**: Air particles carried energy with them as they travelled from the speaker to me.\n\t- **\u003cmark style=\"background: #FFF3A3A6;\"\u003eC\u003c/mark\u003e**: Energy has been transferred from the speaker to me.\n\t- **\u003cmark style=\"background: #FFF3A3A6;\"\u003eD\u003c/mark\u003e**: Energy has been transferred from the speaker to me by the oscillation of air particles.\n\t- Explanation: The particles do not have a net transfer of matter but do transfer energy from the speaker to Lee\n7. A mechanical wave may be described as transverse or longitudinal. In a transverse wave, how does the motion of the particles compare with the direction of travel of the wave?\n   - In a transverse wave, the motion of the particles is perpendicular to the direction of the wave \n8. Classify the waves described below as either longitudinal or transverse:\n\t- **A**: sound waves - longitudinal\n\t- **B**: a vibrating guitar string - transverse\n\t- **C**: slinky moved with an upward pulse - transverse\n\t- **D**: slinky pushed forwards and backwards - longitudinal\n9. Mechanical waves generally travel faster in solids than in gases. Provide an explanation for this.\n   - The particles of the solid are packed closer to each other, meaning that the speed of the oscillations can be faster with same amount of energy due to the smaller distance that has to be travelled for the particles to change direction\n10. For the wave shown below, describe the direction of energy transfer of the sound between the tuning fork and point X. Justify your answer.\n\t- The direction of energy transfer is parallel to the point of the sound's origin, meaning it will move directly from the tuning fork to point X","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/Physics/WCCC/WCCC-3":{"title":"WCCC 3","content":"#physics #wccc #refraction\n\n\u003e [!question]\n\u003e \n\u003e Light is incident on a piece of glass. The light travels from air (assume n = 1.00) in to the glass. In the air, the light beam makes an angle of 32.0¬∞ with the normal. In the glass it makes an angle of 21.0¬∞ with the normal.\n\n1. List the angles of incidence and refraction in this situation\n    Angle of Incidence: 32.0¬∞, Angle of Refraction: 21.0¬∞\n2. What is the refractive index of the glass?\n    Snell's Law tells us that \n    $n_{1}\\sinŒ∏_{1}=n_{2}\\sinŒ∏_{2}$\n    ‚à¥ Given the information from the question we can create the following equation where $n_{2}$ is the refractive index of the glass:\n    $1\\times \\sin 32¬∞=n_{2}\\sin 21¬∞$\n    $n_{2}=\\frac{\\sin 32¬∞}{\\sin 21¬∞}$\n    ‚à¥ The refractive index of glass is approx. 1.4787\n3. The light beam re-emerges from the other side of the glass. What is the angle from the normal at which it emerges?\n    32.0¬∞\n\n\u003e [!question]\n\u003e \n\u003e Calculate the speed of light in seawater that has a refractive index of 1.38\n\n$\\frac{c}{v}= n$\n$\\frac{3\\times10^{8}}{v}=1.38$\n$v=\\frac{3\\times10^{8}}{1.38}$\n\n\u003e [!question]\n\u003e \n\u003e Light travels at a speed of $2.25 \\times 10^{8} ms^{-1}$ in water and $2.29 \\times 10^{8} ms^{-1}$ in ice. If water has a refractive index of 1.33, use this information to calculate the refractive index of ice.\n\n$n_{2}=\\frac{c}{v}$\n$n_{2}=\\frac{3\\times10^{8}}{2.29\\times10^{8}}$\n$n_{2}=\\frac{300}{229}$\n$n_{2}\\approx 1.31$\n\n\u003e [!question]\n\u003e \n\u003e Light travels from water (n = 1.33) into glass (n = 1.60). The incident angle is 44¬∞. Calculate the angle of refraction\n\n$n_{1}\\sinŒ∏_{1}=n_{2}\\sinŒ∏_{2}$\n$1.33\\sin 44¬∞=1.60\\sin Œ∏_{2}$\n$\\sin^{-1}(\\frac{1.33\\sin 44¬∞}{1.60})=Œ∏_{2}$\n$Œ∏_{2}\\approx35.27$\n\n\u003e [!question]\n\u003e \n\u003e For which of the following situations can total internal reflection occur?\n\n| Incident medium  | Refracting medium |\n| ---------------- | ----------------- |\n| air (n = 1.00)   | glass (n = 1.55)  |\n| glass (n = 1.55) | air (n = 1.00)    |\n| glass (n = 1.55) | water (n = 1.33)  |\n| glass (n = 1.55) | glass (n = 1.55)  |\n\nAll but the first are possible\n\n\n\n","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/Physics/WCCC/WCCC-4":{"title":"WCCC 4","content":"#wccc #physics #thermodynamics \n\n\u003e [!info]\n\u003e \n\u003e **Use the following information to answer questions 9-11.**\n\u003e \n\u003e A physics teacher is holding a hot cup of coffee in her hand as she marks exams. She is so busy marking the exams that she forgets to drink the coffee and, eventually, the cup of coffee reaches thermal equilibrium with her hand.\n\n\u003e [!question]\n\u003e \n\u003e **Question 9**\n\u003e What is temperature a measure of?\n\n1.  ÔªøÔªøÔªøhow hot each particle in a system is\n2.  ÔªøÔªøÔªøthe total kinetic energy of a system\n3.  ÔªøÔªøÔªøthe internal energy of a system\n4.  \u003cmark style=\"background: #F9C74F;\"\u003eÔªøÔªøÔªøthe average translational kinetic energy of the particles in a system\u003c/mark\u003e\n\n\u003e [!question]\n\u003e \n\u003e **Question 10**\n\u003e What does it mean for the teacher's hand to be in thermal equilibrium with the cup of coffee?\n\n1.  ÔªøÔªøÔªøThere is no force between the hand and the cup of coffee.\n2.  \u003cmark style=\"background: #F9C74F;\"\u003eÔªøÔªøÔªøThe hand and the cup of coffee are at the same temperature.\u003c/mark\u003e\n3.  ÔªøÔªøÔªøThe particles in the hand and the cup of coffee have stopped moving.\n4.  ÔªøÔªøÔªøThe temperatures of the hand and the cup of coffee add to zero.\n\n\u003e [!question]\n\u003e \n\u003e **Question 11**\n\u003e Describe how the average translational kinetic energy of the particles in the teacher's hand compares with the average translational kinetic energy of the particles in the cup of coffee throughout the process of reaching thermal equilibrium.\n\nAt the start, the average translation kinetic energy (i.e. temperate) of the teacher's hand would be lower than that of the coffee, because the coffee's kinetic energy means that the particles move much more than that of the hand. Throughout the process of reaching thermal equilibrium, the faster moving particles in the coffee collide with the slower ones in the hand and then they eventually average out to being the same speed.\n\n\u003e [!question]\n\u003e \n\u003e **Question 12**\n\u003e The surface of the planet Venus maintains a nearly constant temperature of 735 K. Convert the temperature of the surface of Venus to degrees Celsius.\n\n$$735¬∞ K - 273.15 = 461.85¬∞ C $$\n\n\u003e [!question]\n\u003e \n\u003e **Question 13**\n\u003e The surface of the planet Mercury can reach temperatures as high as 450¬∞C during the day, and as low as -170¬∞C at night. This large variation occurs because Mercury does not have an atmosphere to trap the thermal energy during the night.\n\n1.  Convert the minimum night-time temperature on Mercury to kelvin.\n     $-170¬∞C + 273.15 = 103.15¬∞K$\n2. ÔªøÔªøÔªøCalculate the temperature range (the difference between the maximum and minimum temperatures) of the surface of Mercury. Provide your answer in kelvin.\n      Maximum temp: $723.15¬∞K$\n      Difference: $723.15¬∞K - 103.15¬∞K = 620¬∞K$","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/Physics/Waves/Wave-Definitions":{"title":"Wave Definitions","content":"\n#physics #waves\n- **Œª**: wavelength (m)\n\t- Distance between two spots on a wave where it repeats\n- **∆í**: frequency (Hz)\n\t- Cycles per second\n\t- $∆í = \\frac{1}{T}$\n- **T**: Period (s)\n\t- Time taken for 1 cycle\n- **v**: Velocity (m/s)\n\t- $v=\\frac{Œª}{T}$\n\t- $v=∆íŒª$","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/School-Subjects":{"title":"School Subjects","content":"\n## [[English Language]]\nAn analytical lens on the language of English as we know it and how it is used to communicate thoughts and ideas\n\n## [[Algorithmics]]\nVCE Algorithmics examines how information about the world can be systematically represented and processed, and how such processes can be made sufficiently explicit and precise that they can be implemented in a computer program through \"algorithmic thinking\"\n\n## [[Physics]]\nPhysics is a natural science based on observations, experiments, measurements and mathematical analysis with the purpose of finding quantitative explanations for phenomena occurring from the subatomic scale through to the planets, stellar systems and galaxies in the universe.\n\n## [[Literature]]\nVCE Literature focuses on¬†the meaning derived from texts, the relationship between texts, the contexts in which texts are produced and read, and the experiences the reader brings to the texts.\n\n## [[Specialist Maths]]\nSpecialist Maths focuses on the abstract side of maths, looking at proofs , imaginary numbers and more to delve deep into the theory behind maths and beyond.\n","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/Specialist-Maths/Sequences-Challenge-Problems":{"title":"Sequences - Challenge Problems","content":"\nBelow are 3 challenge problems.\n\nPlease choose ONE problem and attempt to solve it.\n\nThen do your best to write a **CLEAR EXPLANATION** below of how to solve the problem. A classmate who reads your explanation should be able to follow and understand it. You can either type it, or write in your book and upload a photo below.\n\nEven if you are not able to solve the problem, please explain\n**YOUR THINKING PROCESS...**\n\n- What did you try?\n- Why didn't it work?\n- What questions would you ask to help understand the problem?\n\n## Question 1\n\n\u003e [!question] Question 1\n\u003e \n\u003e Each row and column in the grid below is an arithmetic sequence with 5 terms.\n\u003e\n\u003e Find the value of $X$ in the centre cell. \n\n![[Question 1 Diagram.png]]\n\nSo, with the current square, we have 5 arithmetic sequences to solve.\n\n- 1‚Ä¶25:\n\n    This is the arithmetic sequence at the top, so $t_1=1$ and $t_5=25$\n\n    The first term is 1 so $a=1$ \t\n\n    $\\therefore t_5=1+4d$ \n\n    $24=4d$\n\n    $d=6$\n    \n\n    $t_n=1+6\\left(n-1\\right)$\n    \n\n    This means the sequence goes $1, 7, 13, 19, 25$\n\n- 1‚Ä¶17:\n\n    This is the arithmetic sequence at the left, so $t_1=1$ and $t_5=17$\n\n    The first term is 1 so $a=1$ \t\n\n    $\\therefore t_5=1+4d$ \n\n    $16=4d$\n\n    $d=4$\n\n    \n    $t_n=1+4\\left(n-1\\right)$\n\n    \n    This means the sequence goes $1, 5, 9, 13, 17$\n\n- 17‚Ä¶81:\n\n    This is the arithmetic sequence at the bottom, so $t_1=17$ and $t_5=81$\n\n    The first term is 17 so $a=17$ \t\n\n    $\\therefore t_5=17+4d$ \n\n    $64=4d$\n\n    $d=16$\n    \n\n    $t_n=17+16\\left(n-1\\right)$\n    \n\n    This means the sequence goes $17, 33, 49, 65, 81$\n\n- 25‚Ä¶81:\n\n    This is the arithmetic sequence at the right, so $t_1=25$ and $t_5=81$\n    \n    The first term is 25 so $a=25$ \n    \n    $\\therefore t_5=25+4d$ \n    \n    $56=4d$\n    \n    $d=14$\n    \n\n    $t_n=25+14\\left(n-1\\right)$\n    \n\n    This means the sequence goes $25, 39, 53, 67, 81$\n\nNow we have the following table:\n| 1  | 7  | 13 | 19 | 25 |\n|----|----|----|----|----|\n| 5  |    |    |    | 39 |\n| 9  |    | X  |    | 53 |\n| 13 |    |    |    | 67 |\n| 17 | 33 | 49 | 65 | 81 |\n\nWe can either solve the vertical or the horizontal arithmetic sequence now, so arbitrarily we can go with the horizontal.\n\n\n$t_1=13$ and $t_5=49$\n\nThe first term is 13 so $a=13$ \n\n$\\therefore t_5=13+4d$ \n\n$36=4d$\n\n$d=9$\n\n\n$t_n=13+9\\left(n-1\\right)$\n\n\nThis means the sequence goes $13, 22, 31, 40, 49$\n\n\n‚à¥ $X$ is 31\n\n## Question 2\n\n\u003e [!question] Question 2\n\u003e \n\u003e For each positive integer $k$; let $a_k$ denote the increasing arithmetic sequence of integers whose first term is $1$ and whose common difference is $k$: \n\u003e\n\u003e For example, $a_3$ is the sequence $1, 4, 7, ...$ \n\u003e\n\u003e For how many values of $k$ does $a_k$ contain the term $2023$?\n\t\nLet the nth term of the sequence $a_k$ be $2023$:\n\n$a_n=1+k(n‚àí1)$\n\n$‚à¥2023=1+k(n‚àí1)$\n\n$2022=k(n‚àí1)$\n\n\nNow we have two terms, $k$ and $(n‚àí1)$ whose product produces the number $2022$. By this logic, we should be able to list the factors of $2022$ to produce all the possible values of k.\n\n\n\n$1√ó2022=2022$\n\n$2√ó1011=2022$\n\n$3√ó674=2022$\n\n$6√ó337=2022$\n\n$337√ó6=2022$\n\n$674√ó3=2022$\n\n$1011√ó2=2022$\n\n$2022√ó1=2022$\n\n\n\nTherefore there are $8$ possible values of $k$ that contain the term $2023$.\n\n## Question 3\n\n\u003e [!question] Question 3\n\u003e \n\u003e The terms of an arithmetic sequence add to $2023$. \n\u003e\n\u003e The first term of the sequence is increased by $1$, the second term is increased by $2$, the third term is increased by $3$, and so on.\n\u003e\n\u003e The terms of the new sequence add to $2176$.\n\u003e \n\u003e Find the middle term in the original sequence.\n\nThe new sequence will have $n$ added onto the end each time\n\nFor the sequence $1, 2, 3, 4, 5, ‚Ä¶$\n\n$S_n=\\frac{n}{2}(2+(n‚àí1))$\n\n$S_n=\\frac{n}{2}(n+1)$\n\n$S_n=\\frac{(n^2+n)}{2}$\n\n\nThe difference between $2023$ and $2176$ must equal $\\frac{(n^2+n)}{2}$  so we get the equation:\n\n$153=\\frac{(n^2+n)}{2}$\n\n$306=n^2+n$\n\n$n^2+n‚àí306=0$\n\n$(n‚àí17)(n+18)=0$\n\n\n$n\u003e0‚à¥n=17$\n\nThis means there are $17$ terms in the sequence, and if the sum of all these terms is $2023$, the mean must be $\\frac{2023}{17}=119$\n\n\nSince the sequence has a \"middle\" term, there must be an odd number of terms in the sequence and this middle term must be equivalent to the mean.\n\n\n‚à¥ The middle term is $119$\n","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/School-Subjects/Specialist-Maths/Specialist-Maths":{"title":"Specialist Maths","content":"\nI probably won't put much stuff here but here are some cool [[Sequences - Challenge Problems|challenge problems!]]","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/University-Applications/Strategist-Meetings/Thu-August-10th-2023":{"title":"Thu August 10th 2023","content":"#crimson #meeting\n## Meeting Notes\n**With**: Jon Javier\n**Date**: 10/08/2023\n\u003cmark style=\"background: #F9C74F; color: #000000\"\u003eYellow\u003c/mark\u003e = To Action\n\u003cmark style=\"background: #90BE6D; color: #000000\"\u003eGreen\u003c/mark\u003e = Dates/Info\n\nStudied at UCLA and did a language major in French\n\n- Figure out when to next take the SATs\n\nWrite down all the honours\nName, What I got, like place out of people, level (regional, etc)\nPlay around with Crimson app and fill it out\nTake a peak at ideas\n\n\u003e [!note]+ Session Notes\n\u003e \n\u003e ![[Thu August 10th 2023.png]]\n\n\n## Awards\nHere's are the noteworthy honours/awards:\n\n- Apple Scholarship, formally the [Swift Student Challenge](https://developer.apple.com/wwdc21/swift-student-challenge/), awarded in 2021 one of 300 global students, overall number of applicants not published\n\n- International Mathematical Modeling Challenge, Award of Meritorious Achievement: 2nd in Australia, one of two teams chosen to represent Australia at the international round. 93 teams across Australia registered\n\n- Australian Maths Challenge: Prize Award, top 0.3% one in 300 students\n\n- Australian Defence Force 2022 Future Innovators Award - awarded to 5000 students across years 10 and 12\n\n### Primary School\nVEX IQ Academy Certification Level 3 of 3: Grade 5\n\nCPM Drum Kit: Step 2\n\nVEX Robotics National Finals: 2nd Place\n\nScholarship to Caulfield Grammar\n\n### Year 7\nOutstanding Academic Achievement:\n\n- Maths Enrichment, Science, Art, Theatre Studies, Geography, Robotics and Engineering: STEM Sem 1\n\n- Maths Enrichment, History, Science\n\nClass Academic Achievement: \n\n- Chinese Phase 1, English Sem 1\n\n- Physical Education, English, Chinese Phase 1 Sem 2\n\nState Wide Maths Games Day\n\nHouse Commendation\n\nSchool Service Award\n\nMusic Distinction\n\nColours for Academic Excellence\n\n2019 Australian Maths Challenge: Distinction\n\n2019 Australian Maths Challenge: High Distinction\n\nAPSMO Maths Olympiad: top 10% achiever + highest individual score\n\nAIMO: Participation\n\nGeneral Excellence Semester 1 and 2\n\nICAS:\n\n- High Distinction: Science, Maths, Digital Technologies\n\n- Distinction: English\n\n### Year 8\nOutstanding Academic Achievement: \n\n- Design \u0026 Technology, English, History, Maths Enrichment, Music Technology, Theatre Studies Sem 1\n\n- English, Art, Theatre Studies Sem 2\n\nClass Academic Achievement: \n\n- Physical Education Sem 1\n\n- Geography, Science, Physical Education, Maths Enrichment, Classroom Music, Animation Fixation Sem 2\n\nHouse Commendation\n\nThe M.E Award (Best Team Player)\n\nMusic Emblem\n\nDouble Colours for Academic Excellence\n\nSchool Service Award\n\n2020 Australian Maths Challenge: Distinction\n\nAPSMO Maths Olympiad: top 10% achiever + highest individual score\n\nAIMO: Credit\n\nAMC: Score of 92 in non-competition round\n\nAustralian Geography Competition: High Distinction\n\nIMMC: Participation\n\nAustralian Informatics Olympiad: Bronze Certificate\n\nGeneral Excellence Semester 1 and 2\n\nICAS:\n\n- Distinction: English, Maths, Digital Technologies, Science\n\n### Year 9\n\nOutstanding Academic Achievement: \n\n- English, Science, Learning Journeys, Media, Design \u0026 Technology Sem 1\n\n- English, Science, Enrichment Maths, Learning Journeys, Coding and Computers\n\nClass Academic Achievement: \n\n- Enrichment Maths Sem 1\n\nMiddle School Committee Award\n\nMiddle School Langley House Captain\n\n==Apple Scholarship - One of 300 global students, for app submission==\n\nOxford University Computing Challenge: Participation\n\nComputational and Algorithmic Thinking Competition: Credit, top 27%\n\nState Wide Maths Games Day\n\nThe Mike Ellis and Michael Michalakopoulos Award for House Leadership\n\nBoys' Soccer Commendation\n\nIMMC: Participation\n\nSchool Service Award\n\nMusic Colours\n\nAIMO: Credit\n\nTriple Colours for Academic Excellence\n\nHouse Distinction\n\nCommendation for Theatre\n\nInternational Chemistry Quiz: High Distinction\n\n2021 Australian Science Olympiad: Distinction\n\nGeneral Excellence Semester 1 and 2\n\nAustralian History Competition: High Distinction\n\nAustralian Geography Competition: High Distinction\n\nAustralian Informatics Olympiad: Bronze Certificate with score of 230\n\n==Australian Maths Challenge: Prize Certificate, top 0.3%==\n\nICAS:\n\n- Distinction: Writing, Digital Technologies, English, Maths\n\n### Year 10\nOutstanding Academic Achievement: \n\n- English, History: Australia and the Modern World Sem 1\n\n- English Sem 2\n\nClass Academic Achievement: \n\n- Ethics Sem 1\n\n==IMMC Award of Meritorious Achievement: 2nd in Australia, chosen out of two teams to represent Australia at the international round ==\n\nCommunity Service Emblem\n\nDouble Colours for Music\n\nColours for Debating\n\nState Wide Maths Games Day\n\nHouse Colours\n\nThe Tom N. Rowe Prize for Service\n\nThe Keith V. Crawley Prize for Academic Excellence\n\nOxford University Computing Challenge: Participation\n\nComputational and Algorithmic Thinking Competition: Credit\n\n50 hours of community service to Balyam Orphanage in India\n\nBig Science Competition: High Distinction\n\nAustralian Maths Challenge: Distinction\n\nAustralian Science Olympiad: High Distinction\n\n==Australian Defence Force 2022 Future Innovators Award==\n\n==The University of Melbourne Kwong Lee Dow Young Scholar==\n\nTriple Colours for Academic Excellence Re-awarded\n\nAIMO\n\nGeneral Excellence Semester 1 and 2\n\n### Year 11\n\nSemester 1:\n\n- Cheer Squad Emblem\n\n- Community Service Colours\n\n- Debating Double Colours\n\n- Music Triple Colours\n\n- Publication Emblem\n\n- Public Speaking Emblem\n\n- Service to Debating Colours\n\n- Service to Music Emblem","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/University-Applications/Strategist-Meetings/Thu-August-24th-2023":{"title":"Thu August 24th 2023","content":"#crimson #meeting\n## Meeting Notes\n**With**: Jon Javier\n**Date**: 24/08/2023\n\u003cmark style=\"background: #F9C74F; color: #000000\"\u003eYellow\u003c/mark\u003e = To Action\n\u003cmark style=\"background: #90BE6D; color: #000000\"\u003eGreen\u003c/mark\u003e = Dates/Info\n\n\u003cmark style=\"background: #F9C74F;\"\u003eResearch into:\u003c/mark\u003e\n- Georgia Institute of Technology\n- UIUC\n- University of Washington\n- University of Texas - Austin\n- University of Michigan - Ann Arbor\n\nWill do SATs again in \u003cmark style=\"background: #90BE6D;\"\u003eMarch\u003c/mark\u003e, tutoring probably around \u003cmark style=\"background: #90BE6D;\"\u003eJanuary\u003c/mark\u003e, grind it out during the holidays\n\nForgot to list activities last time:\n- Play sports: table tennis top level team, currently do badminton did tennis too\n- Community service with the school, conducting school tours etc (this is more of an award rather than activity)\n- Editorial Committee, write pieces that get published in the yearbook \"The Grammarian\"\n- FOTA Director and Captain\n- Research (work in progress, hasn't been to successful so far)\n\n\u003cu\u003eIMPROVE ACADEMICS\u003c/u\u003e\n\n### Research\n\nJust write something, anything\n- Look into Busy Beaver problem\n- Collate the Algorithmics SAT into something usable\n- Any other research ideas\n\nJust write it all out, look at what other people have done and how you can do the same.\n\n**Email 2nd rate universities, doesn't have to be good**. All you want is someone with a PhD looking over your work so it is reputable. Better to get it published than not published at all","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]},"/notes/University-Applications/University-Applications":{"title":"University Applications","content":"#university \n\nWelcome to the home page for my University Admissions resources! Currently I'm trying to go overseas and get into a computer science university like [[Stanford]] or [[University of California Berkley]].\n\n## Resources\n- [[Crimson Alex Meeting.canvas|Initial Mindmap Pathway]]","lastmodified":"2023-09-07T08:27:08.676883384Z","tags":[]}}